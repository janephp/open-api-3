<?php

namespace PicturePark\API\Model;

class ContentDetail
{
    /**
    * The ID of the content schema. The SchemaType of the specified schema must be Content.
    The schema specifies the structure of the Content dictionary.
    *
    * @var string
    */
    protected $contentSchemaId;
    /**
    * An optional list of IDs of the schemas that form the layers of the content.
    The SchemaType of the specified schemas must be Layer.
    *
    * @var string[]|null
    */
    protected $layerSchemaIds;
    /**
     * All the IDs of the referenced list items (tagboxes) that do not exist in the system.
     *
     * @var string[]|null
     */
    protected $brokenReferenceIds;
    /**
    * All the IDs of the indirectly referenced list items (tagboxes) that do not exist in the system.
    They are referenced list items that reference at least a list item that do not exist in the system.
    *
    * @var string[]|null
    */
    protected $brokenIndirectReferenceIds;
    /**
     * All the IDs of the contents or list items target of a relation that do not exist in the system.
     *
     * @var string[]|null
     */
    protected $brokenRelationTargetIds;
    /**
    * The content data of the content. It's an object of dynamic metadata whose structure is defined in the Content schema identified.
    by the ContentSchemaId property.
    *
    * @var mixed|null
    */
    protected $content;
    /**
    * The metadata belonging to the layers of the content. It's a dictionary of dynamic metadata whose structure is defined in the Layer schemas identified
    by the LayerSchemaIds property.
    *
    * @var mixed[]|null
    */
    protected $metadata;
    /**
     * The content ID.
     *
     * @var string
     */
    protected $id;
    /**
     * An optional list of content permission set IDs which control content permissions. These permissions control content accessibility for the users that do not own the content.
     *
     * @var string[]|null
     */
    protected $contentPermissionSetIds;
    /**
    * The Outputs generated from the content. They identifies the rendered files generated by the system.
    They are available only for file base contents, and they depends on the output formats configured in the system.
    *
    * @var Output[]|null
    */
    protected $outputs;
    /**
     * Audit information.
     *
     * @var mixed|null
     */
    protected $audit;
    /**
     * The owner token ID. Defines the content owner.
     *
     * @var string
     */
    protected $ownerTokenId;
    /**
     * The resolved owner.
     *
     * @var mixed|null
     */
    protected $owner;
    /**
     * Content type.
     *
     * @var mixed
     */
    protected $contentType;
    /**
     * Contains language specific display values. They are calculated values based on the template stored in the Content schema DisplayPatterns property.
     *
     * @var mixed|null
     */
    protected $displayValues;
    /**
     * The actual lifecycle value of the content. Becomes Inactive when the content is deleted.
     *
     * @var mixed
     */
    protected $lifeCycle;
    /**
     * List of content rights the user has on this content
     *
     * @var string[]|null
     */
    protected $contentRights;
    /**
     * Activity information: dynamically mapped from configured metadata fields or from audit information if no mapping is configured.
     *
     * @var mixed|null
     */
    protected $activity;
    /**
    * The ID of the content schema. The SchemaType of the specified schema must be Content.
    The schema specifies the structure of the Content dictionary.
    *
    * @return string
    */
    public function getContentSchemaId() : string
    {
        return $this->contentSchemaId;
    }
    /**
    * The ID of the content schema. The SchemaType of the specified schema must be Content.
    The schema specifies the structure of the Content dictionary.
    *
    * @param string $contentSchemaId
    *
    * @return self
    */
    public function setContentSchemaId(string $contentSchemaId) : self
    {
        $this->contentSchemaId = $contentSchemaId;
        return $this;
    }
    /**
    * An optional list of IDs of the schemas that form the layers of the content.
    The SchemaType of the specified schemas must be Layer.
    *
    * @return string[]|null
    */
    public function getLayerSchemaIds() : ?array
    {
        return $this->layerSchemaIds;
    }
    /**
    * An optional list of IDs of the schemas that form the layers of the content.
    The SchemaType of the specified schemas must be Layer.
    *
    * @param string[]|null $layerSchemaIds
    *
    * @return self
    */
    public function setLayerSchemaIds(?array $layerSchemaIds) : self
    {
        $this->layerSchemaIds = $layerSchemaIds;
        return $this;
    }
    /**
     * All the IDs of the referenced list items (tagboxes) that do not exist in the system.
     *
     * @return string[]|null
     */
    public function getBrokenReferenceIds() : ?array
    {
        return $this->brokenReferenceIds;
    }
    /**
     * All the IDs of the referenced list items (tagboxes) that do not exist in the system.
     *
     * @param string[]|null $brokenReferenceIds
     *
     * @return self
     */
    public function setBrokenReferenceIds(?array $brokenReferenceIds) : self
    {
        $this->brokenReferenceIds = $brokenReferenceIds;
        return $this;
    }
    /**
    * All the IDs of the indirectly referenced list items (tagboxes) that do not exist in the system.
    They are referenced list items that reference at least a list item that do not exist in the system.
    *
    * @return string[]|null
    */
    public function getBrokenIndirectReferenceIds() : ?array
    {
        return $this->brokenIndirectReferenceIds;
    }
    /**
    * All the IDs of the indirectly referenced list items (tagboxes) that do not exist in the system.
    They are referenced list items that reference at least a list item that do not exist in the system.
    *
    * @param string[]|null $brokenIndirectReferenceIds
    *
    * @return self
    */
    public function setBrokenIndirectReferenceIds(?array $brokenIndirectReferenceIds) : self
    {
        $this->brokenIndirectReferenceIds = $brokenIndirectReferenceIds;
        return $this;
    }
    /**
     * All the IDs of the contents or list items target of a relation that do not exist in the system.
     *
     * @return string[]|null
     */
    public function getBrokenRelationTargetIds() : ?array
    {
        return $this->brokenRelationTargetIds;
    }
    /**
     * All the IDs of the contents or list items target of a relation that do not exist in the system.
     *
     * @param string[]|null $brokenRelationTargetIds
     *
     * @return self
     */
    public function setBrokenRelationTargetIds(?array $brokenRelationTargetIds) : self
    {
        $this->brokenRelationTargetIds = $brokenRelationTargetIds;
        return $this;
    }
    /**
    * The content data of the content. It's an object of dynamic metadata whose structure is defined in the Content schema identified.
    by the ContentSchemaId property.
    *
    * @return mixed
    */
    public function getContent()
    {
        return $this->content;
    }
    /**
    * The content data of the content. It's an object of dynamic metadata whose structure is defined in the Content schema identified.
    by the ContentSchemaId property.
    *
    * @param mixed $content
    *
    * @return self
    */
    public function setContent($content) : self
    {
        $this->content = $content;
        return $this;
    }
    /**
    * The metadata belonging to the layers of the content. It's a dictionary of dynamic metadata whose structure is defined in the Layer schemas identified
    by the LayerSchemaIds property.
    *
    * @return mixed[]|null
    */
    public function getMetadata() : ?iterable
    {
        return $this->metadata;
    }
    /**
    * The metadata belonging to the layers of the content. It's a dictionary of dynamic metadata whose structure is defined in the Layer schemas identified
    by the LayerSchemaIds property.
    *
    * @param mixed[]|null $metadata
    *
    * @return self
    */
    public function setMetadata(?iterable $metadata) : self
    {
        $this->metadata = $metadata;
        return $this;
    }
    /**
     * The content ID.
     *
     * @return string
     */
    public function getId() : string
    {
        return $this->id;
    }
    /**
     * The content ID.
     *
     * @param string $id
     *
     * @return self
     */
    public function setId(string $id) : self
    {
        $this->id = $id;
        return $this;
    }
    /**
     * An optional list of content permission set IDs which control content permissions. These permissions control content accessibility for the users that do not own the content.
     *
     * @return string[]|null
     */
    public function getContentPermissionSetIds() : ?array
    {
        return $this->contentPermissionSetIds;
    }
    /**
     * An optional list of content permission set IDs which control content permissions. These permissions control content accessibility for the users that do not own the content.
     *
     * @param string[]|null $contentPermissionSetIds
     *
     * @return self
     */
    public function setContentPermissionSetIds(?array $contentPermissionSetIds) : self
    {
        $this->contentPermissionSetIds = $contentPermissionSetIds;
        return $this;
    }
    /**
    * The Outputs generated from the content. They identifies the rendered files generated by the system.
    They are available only for file base contents, and they depends on the output formats configured in the system.
    *
    * @return Output[]|null
    */
    public function getOutputs() : ?array
    {
        return $this->outputs;
    }
    /**
    * The Outputs generated from the content. They identifies the rendered files generated by the system.
    They are available only for file base contents, and they depends on the output formats configured in the system.
    *
    * @param Output[]|null $outputs
    *
    * @return self
    */
    public function setOutputs(?array $outputs) : self
    {
        $this->outputs = $outputs;
        return $this;
    }
    /**
     * Audit information.
     *
     * @return mixed
     */
    public function getAudit()
    {
        return $this->audit;
    }
    /**
     * Audit information.
     *
     * @param mixed $audit
     *
     * @return self
     */
    public function setAudit($audit) : self
    {
        $this->audit = $audit;
        return $this;
    }
    /**
     * The owner token ID. Defines the content owner.
     *
     * @return string
     */
    public function getOwnerTokenId() : string
    {
        return $this->ownerTokenId;
    }
    /**
     * The owner token ID. Defines the content owner.
     *
     * @param string $ownerTokenId
     *
     * @return self
     */
    public function setOwnerTokenId(string $ownerTokenId) : self
    {
        $this->ownerTokenId = $ownerTokenId;
        return $this;
    }
    /**
     * The resolved owner.
     *
     * @return mixed
     */
    public function getOwner()
    {
        return $this->owner;
    }
    /**
     * The resolved owner.
     *
     * @param mixed $owner
     *
     * @return self
     */
    public function setOwner($owner) : self
    {
        $this->owner = $owner;
        return $this;
    }
    /**
     * Content type.
     *
     * @return mixed
     */
    public function getContentType()
    {
        return $this->contentType;
    }
    /**
     * Content type.
     *
     * @param mixed $contentType
     *
     * @return self
     */
    public function setContentType($contentType) : self
    {
        $this->contentType = $contentType;
        return $this;
    }
    /**
     * Contains language specific display values. They are calculated values based on the template stored in the Content schema DisplayPatterns property.
     *
     * @return mixed
     */
    public function getDisplayValues()
    {
        return $this->displayValues;
    }
    /**
     * Contains language specific display values. They are calculated values based on the template stored in the Content schema DisplayPatterns property.
     *
     * @param mixed $displayValues
     *
     * @return self
     */
    public function setDisplayValues($displayValues) : self
    {
        $this->displayValues = $displayValues;
        return $this;
    }
    /**
     * The actual lifecycle value of the content. Becomes Inactive when the content is deleted.
     *
     * @return mixed
     */
    public function getLifeCycle()
    {
        return $this->lifeCycle;
    }
    /**
     * The actual lifecycle value of the content. Becomes Inactive when the content is deleted.
     *
     * @param mixed $lifeCycle
     *
     * @return self
     */
    public function setLifeCycle($lifeCycle) : self
    {
        $this->lifeCycle = $lifeCycle;
        return $this;
    }
    /**
     * List of content rights the user has on this content
     *
     * @return string[]|null
     */
    public function getContentRights() : ?array
    {
        return $this->contentRights;
    }
    /**
     * List of content rights the user has on this content
     *
     * @param string[]|null $contentRights
     *
     * @return self
     */
    public function setContentRights(?array $contentRights) : self
    {
        $this->contentRights = $contentRights;
        return $this;
    }
    /**
     * Activity information: dynamically mapped from configured metadata fields or from audit information if no mapping is configured.
     *
     * @return mixed
     */
    public function getActivity()
    {
        return $this->activity;
    }
    /**
     * Activity information: dynamically mapped from configured metadata fields or from audit information if no mapping is configured.
     *
     * @param mixed $activity
     *
     * @return self
     */
    public function setActivity($activity) : self
    {
        $this->activity = $activity;
        return $this;
    }
}