<?php

namespace PicturePark\API\Model;

class FieldBase
{
    /**
     * @var array
     */
    protected $initialized = [];
    public function isInitialized($property) : bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * The field ID. It can be a slug; it must be unique within the schema hierarchy (ancestors / descendants); it must be begin with lower case.
     *
     * @var string
     */
    protected $id;
    /**
     * The index ID is auto generated by the system.
     *
     * @var string|null
     */
    protected $indexId;
    /**
     * The field namespace is auto generated by the system: it carries the hierarchy information.
     *
     * @var string|null
     */
    protected $fieldNamespace;
    /**
     * Language specific field names.
     *
     * @var mixed|null
     */
    protected $names;
    /**
     * Language specific field descriptions.
     *
     * @var mixed|null
     */
    protected $descriptions;
    /**
     * Defines if a field value is mandatory or not.
     *
     * @var bool
     */
    protected $required;
    /**
     * Defines if the field can be edited or not.
     *
     * @var bool
     */
    protected $fixed;
    /**
     * Field is stored for filtering.
     *
     * @var bool
     */
    protected $index;
    /**
     * Field is stored for simple search.
     *
     * @var bool
     */
    protected $simpleSearch;
    /**
     * Field is stored for sorting.
     *
     * @var bool
     */
    protected $sortable;
    /**
     * 
     *
     * @var string
     */
    protected $kind;
    /**
     * The field ID. It can be a slug; it must be unique within the schema hierarchy (ancestors / descendants); it must be begin with lower case.
     *
     * @return string
     */
    public function getId() : string
    {
        return $this->id;
    }
    /**
     * The field ID. It can be a slug; it must be unique within the schema hierarchy (ancestors / descendants); it must be begin with lower case.
     *
     * @param string $id
     */
    public function setId(string $id)
    {
        $this->initialized['id'] = true;
        $this->id = $id;
    }
    /**
     * The index ID is auto generated by the system.
     *
     * @return string|null
     */
    public function getIndexId() : ?string
    {
        return $this->indexId;
    }
    /**
     * The index ID is auto generated by the system.
     *
     * @param string|null $indexId
     */
    public function setIndexId(?string $indexId)
    {
        $this->initialized['indexId'] = true;
        $this->indexId = $indexId;
    }
    /**
     * The field namespace is auto generated by the system: it carries the hierarchy information.
     *
     * @return string|null
     */
    public function getFieldNamespace() : ?string
    {
        return $this->fieldNamespace;
    }
    /**
     * The field namespace is auto generated by the system: it carries the hierarchy information.
     *
     * @param string|null $fieldNamespace
     */
    public function setFieldNamespace(?string $fieldNamespace)
    {
        $this->initialized['fieldNamespace'] = true;
        $this->fieldNamespace = $fieldNamespace;
    }
    /**
     * Language specific field names.
     *
     * @return mixed
     */
    public function getNames()
    {
        return $this->names;
    }
    /**
     * Language specific field names.
     *
     * @param mixed $names
     */
    public function setNames($names)
    {
        $this->initialized['names'] = true;
        $this->names = $names;
    }
    /**
     * Language specific field descriptions.
     *
     * @return mixed
     */
    public function getDescriptions()
    {
        return $this->descriptions;
    }
    /**
     * Language specific field descriptions.
     *
     * @param mixed $descriptions
     */
    public function setDescriptions($descriptions)
    {
        $this->initialized['descriptions'] = true;
        $this->descriptions = $descriptions;
    }
    /**
     * Defines if a field value is mandatory or not.
     *
     * @return bool
     */
    public function getRequired() : bool
    {
        return $this->required;
    }
    /**
     * Defines if a field value is mandatory or not.
     *
     * @param bool $required
     */
    public function setRequired(bool $required)
    {
        $this->initialized['required'] = true;
        $this->required = $required;
    }
    /**
     * Defines if the field can be edited or not.
     *
     * @return bool
     */
    public function getFixed() : bool
    {
        return $this->fixed;
    }
    /**
     * Defines if the field can be edited or not.
     *
     * @param bool $fixed
     */
    public function setFixed(bool $fixed)
    {
        $this->initialized['fixed'] = true;
        $this->fixed = $fixed;
    }
    /**
     * Field is stored for filtering.
     *
     * @return bool
     */
    public function getIndex() : bool
    {
        return $this->index;
    }
    /**
     * Field is stored for filtering.
     *
     * @param bool $index
     */
    public function setIndex(bool $index)
    {
        $this->initialized['index'] = true;
        $this->index = $index;
    }
    /**
     * Field is stored for simple search.
     *
     * @return bool
     */
    public function getSimpleSearch() : bool
    {
        return $this->simpleSearch;
    }
    /**
     * Field is stored for simple search.
     *
     * @param bool $simpleSearch
     */
    public function setSimpleSearch(bool $simpleSearch)
    {
        $this->initialized['simpleSearch'] = true;
        $this->simpleSearch = $simpleSearch;
    }
    /**
     * Field is stored for sorting.
     *
     * @return bool
     */
    public function getSortable() : bool
    {
        return $this->sortable;
    }
    /**
     * Field is stored for sorting.
     *
     * @param bool $sortable
     */
    public function setSortable(bool $sortable)
    {
        $this->initialized['sortable'] = true;
        $this->sortable = $sortable;
    }
    /**
     * 
     *
     * @return string
     */
    public function getKind() : string
    {
        return $this->kind;
    }
    /**
     * 
     *
     * @param string $kind
     */
    public function setKind(string $kind)
    {
        $this->initialized['kind'] = true;
        $this->kind = $kind;
    }
}