{
  "x-generator": "NSwag v13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v12.0.0.0))",
  "openapi": "3.0.0",
  "info": {
    "title": "Picturepark API V1",
    "description": "# Getting started\r\nWelcome to the reference for the Picturepark Content Platform REST API.\r\n\r\n## Client registration\r\nTo use the Picturepark API, you need first to create a new API Client. You can create clients via an Identity Server (IDS) interface directly from Content platform.\r\n\r\nGo to `Settings` / `API Clients` (https://{{customerHost}}/Settings/APIClients) and create a new API Client based on your desired authentication flow.\r\n\r\n### Client attributes\r\n\r\n| Attribute      | Description |\r\n| -------------- | ----------- |\r\n| **Allowed scopes** | Scopes which the client is allowed to access. Use can find scope name beside the respective API endpoints. |\r\n| **Redirect Uris**  | Which URI's is IDS allowed to send the authentication information to. |\r\n| **Urls (masks) safe to load** | IDS has to load some information from the CP customer instance like customer terms of service or logos. This lists the paths which are safe to load by IDS. Usually similar to Redirect Uris. |\r\n| **Allowed CORS origins** | Adds to the list of origins allowed to access the IDS authentication API. |\r\n\r\n## Authentication\r\nThe authentication process is based on [OpenID Connect](http://openid.net/connect/).\r\n\r\nThe following OAuth 2.0 flows are supported:\r\n\r\n| Flow         | Description |\r\n| ------------ | ----------- |\r\n| **Hybrid**   | Interactive user authentication with server based validation |\r\n| **Password** | Server to server, create access tokens that do not expire |\r\n| **Authorization code** with PKCE | Interactive user authentication recommended for SPA's |\r\n| **Implicit** | Not recommended anymore, used mostly in legacy SPA's |\r\n\r\n### Examples\r\nExample authentication implementations can be found here:\r\n- Angular: https://github.com/Picturepark/Picturepark.SDK.TypeScript/tree/master/src/picturepark-sdk-v1-angular\r\n- HTML5 Fetch: https://github.com/Picturepark/Picturepark.SDK.TypeScript/tree/master/src/picturepark-sdk-v1-fetch\r\n- .NET: https://github.com/Picturepark/Picturepark.SDK.DotNet/tree/master/docs\r\n\r\n### Access token lifetime\r\nFor **Implicit**, **Hybrid** and **Authentication code** flows, the access tokens are short-lived (1 hour). You need to refresh your access token after it's expired.\r\nYou can silently refresh the token using a hidden Iframe in the browser: [Angular example](https://damienbod.com/2017/06/02/implementing-a-silent-token-renew-in-angular-for-the-openid-connect-implicit-flow/)\r\n\r\nFor the **Password** flow, you can create an access token that never expires.\r\nGo to `Settings` / `API Clients` in Content platform (https://{{customerHost}}/Settings/APIClients) and click on Tokens beside the respective client (or create a new client).\r\n\r\n**Attention: Adding long lived access tokens to a web application (adding token to Javascripts source code) will expose that token to anyone. Use with care and a very limited set of scopes.**\r\n\r\n### Urls\r\n\r\n- Live: https://ids-cp-ch.picturepark.com\r\n- Stage: https://identity.current-picturepark.com\r\n- POC: https://identity.poc-picturepark.com\r\n- Preview: https://identity.preview-picturepark.com\r\n\r\n## SDKs\r\nTo simplify building applications, SDKs for the following languages/frameworks are provided and released as open source under MIT license:\r\n\r\n- .NET\r\n  - [https://github.com/Picturepark/Picturepark.SDK.DotNet](https://github.com/Picturepark/Picturepark.SDK.DotNet)\r\n  - Supports .NET 4.5+ / .NET Standard 1.3+\r\n- JavaScript / TypeScript\r\n  - [https://github.com/Picturepark/Picturepark.SDK.TypeScript](https://github.com/Picturepark/Picturepark.SDK.TypeScript)\r\n  - Supports [Angular](https://angular.io/) 4.3+ / [HTML 5 Fetch](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)\r\n\r\n# Concepts\r\n\r\n## HTTP Requests\r\nTo perform API calls, you can specify the following HTTP headers:\r\n\r\n| HTTP Header               | Value                | Required |\r\n| ------------------------- | -------------------- | -------- |\r\n| Accept                    | application/json     | Yes      |\r\n| Authorization             | Bearer {accessToken} | Yes      |\r\n| Picturepark-CustomerAlias | Customer identifier  | Yes      |\r\n| Picturepark-Language      | en / de              | No       |\r\n\r\n## Error responses\r\nErrors in Picturepark API are returned using HTTP status codes, as well as a JSON error response object.\r\n\r\nHTTP status 4xx\r\n- Client errors (e.g. wrong data provided by client)\r\n\r\nHTTP status 5xx\r\n- Server errors (something went wrong on the server)\r\n\r\n## Request limits / quota\r\nTo protect the Picturepark API you are limited in the number of API requests per interval.\r\n\r\nIf that limit is exceeded you will get an exception with HTTP status code 429 (Too many requests).\r\n\r\nIf you need more calls per interval, contact Picturepark sales (sales@picturepark.com).\r\n\r\n## Permissions / Scopes\r\n\r\nIn order to be able to perform requests, you need the permissions.\r\n\r\n### User permissions\r\nThe authenticated user needs the permission in Picturepark to perform the request.\r\n\r\n### Scopes\r\n\r\nAdditionally, your application needs to define which scopes are required.\r\n\r\nFor all the scopes requested by your application, the users need to confirm these in the consent screen.\r\n\r\n[List of scopes](#section/Authentication)\r\n\r\n\r\n# Search\r\n\r\nMost entities have a search endpoint to search and filter.\r\n\r\nFor list items and contents, the search and filters depend on the available schemas and search configurations.\r\n\r\n\r\n## Simple search\r\n\r\n([Elastic search query string reference](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-query-string-query.html))\r\n\r\nWith the simple search a multi field query is executed.\r\n\r\nallow_leading_wildcard is disabled.\r\n\r\nThe applicable query string syntax can be found [here](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-query-string-query.html).\r\n\r\nThe query is executed against all indexed schema fields with a boolean flag *SimpleSearch* set to `true`.\r\n\r\nRunning the query against multiple fields enables to put the searched fields under thight control and also to expand each query term to an OR clause (field1=\"value\" or field2=\"value\").\r\n\r\n\r\n## Filtering\r\n\r\nAvailable filters:\r\n\r\n- AndFilter\r\n- OrFilter\r\n- NotFilter\r\n- DateRangeFilter\r\n- NumericRangeFilter\r\n- ExistsFilter\r\n- PrefixFilter\r\n- TermFilter\r\n- TermsFilter\r\n- GeoBoundingBoxFilter\r\n- GeoDistanceFilter\r\n- NestedFilter\r\n- ChildFilter\r\n- ParentFilter",
    "contact": {
      "name": "Picturepark sales",
      "url": "https://www.picturepark.com",
      "email": "sales@picturepark.com"
    },
    "version": "1.0",
    "x-logo": {
      "url": "https://picturepark.github.io/Picturepark.SDK.DotNet/api/picturepark-logo.png",
      "backgroundColor": "#FFFFFF"
    }
  },
  "paths": {
    "/v1/BusinessProcesses/{id}": {
      "get": {
        "tags": [
          "BusinessProcess"
        ],
        "summary": "Get business process",
        "operationId": "BusinessProcess_Get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The business process id.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "BusinessProcess",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessProcess"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "businessprocess_read"
            ]
          }
        ]
      }
    },
    "/v1/BusinessProcesses": {
      "post": {
        "tags": [
          "BusinessProcess"
        ],
        "summary": "Create business process",
        "operationId": "BusinessProcess_Create",
        "requestBody": {
          "x-name": "request",
          "description": "The business process create request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BusinessProcessCreateRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "BusinessProcess",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessProcess"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "businessprocess_write"
            ]
          }
        ]
      }
    },
    "/v1/BusinessProcesses/{id}/state": {
      "put": {
        "tags": [
          "BusinessProcess"
        ],
        "summary": "Change business process state",
        "description": "Only available for business processes created through BusinessProcessCreateRequest). The operation is executed asynchronously and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.",
        "operationId": "BusinessProcess_ChangeState",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The business process id.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The business process state change request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BusinessProcessStateChangeRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "BusinessProcess",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessProcess"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "businessprocess_write"
            ]
          }
        ]
      }
    },
    "/v1/BusinessProcesses/{id}/notification": {
      "put": {
        "tags": [
          "BusinessProcess"
        ],
        "summary": "Update business process notification",
        "description": "Only available for business processes created through BusinessProcessCreateRequest).",
        "operationId": "BusinessProcess_UpdateNotification",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The business process id.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The business process notification update request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BusinessProcessNotificationUpdateRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": null
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "businessprocess_write"
            ]
          }
        ]
      }
    },
    "/v1/BusinessProcesses/{id}/cancel": {
      "post": {
        "tags": [
          "BusinessProcess"
        ],
        "summary": "Cancel business process",
        "description": "Only available if the business process indicates support for cancellation in SupportsCancellation.",
        "operationId": "BusinessProcess_Cancel",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The business process id.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": null
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "businessprocess_write"
            ]
          }
        ]
      }
    },
    "/v1/BusinessProcesses/{id}/waitStates": {
      "get": {
        "tags": [
          "BusinessProcess"
        ],
        "summary": "Wait for states",
        "description": "Wait for the business process to hit one of the given states.",
        "operationId": "BusinessProcess_WaitForStates",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The business process id.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "states",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "Business process states to wait for.",
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string"
              }
            },
            "x-position": 2
          },
          {
            "name": "timeout",
            "in": "query",
            "description": "The timeout to wait for completion.",
            "schema": {
              "type": "string",
              "format": "time-span",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "BusinessProcessWaitResult",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessProcessWaitForStateResult"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "businessprocess_read"
            ]
          }
        ]
      }
    },
    "/v1/BusinessProcesses/{id}/waitLifeCycles": {
      "get": {
        "tags": [
          "BusinessProcess"
        ],
        "summary": "Wait for life cycles",
        "description": "Wait for the business process to hit one of the given life cycles.",
        "operationId": "BusinessProcess_WaitForLifeCycles",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The business process id.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "lifeCycles",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "Business process life cycles to wait for.",
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "$ref": "#/components/schemas/BusinessProcessLifeCycle"
              }
            },
            "x-position": 2
          },
          {
            "name": "timeout",
            "in": "query",
            "description": "The timeout to wait for completion.",
            "schema": {
              "type": "string",
              "format": "time-span",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "BusinessProcessWaitForLifeCycleResult",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessProcessWaitForLifeCycleResult"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "businessprocess_read"
            ]
          }
        ]
      }
    },
    "/v1/BusinessProcesses/{id}/waitCompletion": {
      "get": {
        "tags": [
          "BusinessProcess"
        ],
        "summary": "Wait for completion",
        "description": "Shortcut to wait for the business process to hit one of the finished life cycles.\nFinished life cycles are:\n- Succeeded\n- SucceededWithErrors\n- Cancelled\n- Failed",
        "operationId": "BusinessProcess_WaitForCompletion",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The business process id.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "timeout",
            "in": "query",
            "description": "The timeout to wait for completion.",
            "schema": {
              "type": "string",
              "format": "time-span",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "waitForContinuationCompletion",
            "in": "query",
            "description": "Waits for the completion of the continuation business process (if existing, recursively). Default to true.",
            "schema": {
              "type": "boolean",
              "default": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "BusinessProcessWaitResult",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessProcessWaitForLifeCycleResult"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "businessprocess_read"
            ]
          }
        ]
      }
    },
    "/v1/BusinessProcesses/{id}/details": {
      "get": {
        "tags": [
          "BusinessProcess"
        ],
        "summary": "Get details",
        "description": "Gets details of the given business process.",
        "operationId": "BusinessProcess_GetDetails",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The business process id.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "BusinessProcessDetails",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessProcessDetails"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "businessprocess_read"
            ]
          }
        ]
      }
    },
    "/v1/BusinessProcesses/search": {
      "post": {
        "tags": [
          "BusinessProcess"
        ],
        "summary": "Search",
        "description": "Search for business processes.",
        "operationId": "BusinessProcess_Search",
        "requestBody": {
          "x-name": "request",
          "description": "The business process request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BusinessProcessSearchRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "BusinessProcessSearchResult",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessProcessSearchResult"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "businessprocess_read"
            ]
          }
        ],
        "x-code-samples": [
          {
            "lang": "C#",
            "source": "// Get the last 20 business processes\r\nvar request = new BusinessProcessSearchRequest\r\n{\r\n    Start = 0,\r\n    Limit = 20,\r\n    Sort = new List<SortInfo>\r\n    {\r\n        new SortInfo\r\n        {\r\n            Field = \"audit.creationDate\",\r\n            Direction = SortDirection.Desc\r\n        }\r\n    }\r\n};\r\nvar results = await _client.BusinessProcess.SearchAsync(request);\r\nAssert.NotNull(results);\r\n"
          }
        ]
      }
    },
    "/v1/BusinessRules/configuration": {
      "get": {
        "tags": [
          "BusinessRule"
        ],
        "summary": "Get the current business rule configuration",
        "operationId": "BusinessRule_GetConfiguration",
        "responses": {
          "200": {
            "description": "BusinessRuleConfiguration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessRuleConfiguration"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "businessrule_read"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "BusinessRule"
        ],
        "summary": "Updates the business rule configuration.",
        "operationId": "BusinessRule_UpdateConfiguration",
        "requestBody": {
          "x-name": "request",
          "description": "Request containing the new configuration.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BusinessRuleConfigurationUpdateRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Business process",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessProcess"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "businessrule_write"
            ]
          }
        ]
      }
    },
    "/v1/BusinessRules/traceLog/search": {
      "post": {
        "tags": [
          "BusinessRule"
        ],
        "summary": "Searches for trace logs produces by business rule execution.",
        "operationId": "BusinessRule_SearchTraces",
        "requestBody": {
          "x-name": "request",
          "description": "Request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BusinessRuleTraceLogSearchRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Holds results of trace log search.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessRuleTraceLogSearchResult"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "businessrule_read"
            ]
          }
        ]
      }
    },
    "/v1/Channels": {
      "get": {
        "tags": [
          "Channel"
        ],
        "summary": "Get all channels",
        "description": "Get all channels available for the current user.",
        "operationId": "Channel_GetAll",
        "responses": {
          "200": {
            "description": "List of channel",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Channel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "channel_read"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Channel"
        ],
        "summary": "Create channel",
        "description": "Creates new channel based on supplied request.",
        "operationId": "Channel_Create",
        "requestBody": {
          "x-name": "request",
          "description": "The request containing information needed to create new channel.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChannelCreateRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Created channel",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Channel"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "channel_write"
            ]
          }
        ]
      }
    },
    "/v1/Channels/{id}": {
      "get": {
        "tags": [
          "Channel"
        ],
        "summary": "Get channel",
        "description": "Gets the channel information by the output format ID.",
        "operationId": "Channel_Get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The channel ID.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Requested channel",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Channel"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "channel_read"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Channel"
        ],
        "summary": "Update channel",
        "description": "Updates the channel specified by the ID and based on supplied request.",
        "operationId": "Channel_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of channel to update",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The request containing information needed to update the channel.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChannelUpdateRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Updated channel",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Channel"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "channel_write"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Channel"
        ],
        "summary": "Delete channel",
        "description": "Deletes the channel specified by the ID.",
        "operationId": "Channel_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the channel that should be deleted.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "channel_write"
            ]
          }
        ]
      }
    },
    "/v1/ContentPermissionSets/{id}": {
      "get": {
        "tags": [
          "ContentPermissionSet"
        ],
        "summary": "Get content permission set",
        "description": "Gets the content permission set detail information by the content permission set ID.",
        "operationId": "ContentPermissionSet_Get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Content permission set ID.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Detail of a content permission set",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentPermissionSetDetail"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "permission_read"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "ContentPermissionSet"
        ],
        "summary": "Update content permission set",
        "description": "Updates the content permission set specified by the ID and based on supplied request.",
        "operationId": "ContentPermissionSet_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Content permission set ID.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "permissionSet",
          "description": "Permission set",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentPermissionSetUpdateRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Detail of a content permission set",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentPermissionSetDetail"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "permission_write"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "ContentPermissionSet"
        ],
        "summary": "Delete content permission set",
        "description": "Deletes the content permission set specified by the ID.",
        "operationId": "ContentPermissionSet_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Content permission set ID.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": null
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "permission_write"
            ]
          }
        ]
      }
    },
    "/v1/ContentPermissionSets": {
      "post": {
        "tags": [
          "ContentPermissionSet"
        ],
        "summary": "Create content permission set",
        "description": "Creates new content permission set based on supplied request.",
        "operationId": "ContentPermissionSet_Create",
        "requestBody": {
          "x-name": "permissionSet",
          "description": "Permission set",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentPermissionSetCreateRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Detail of a content permission set",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentPermissionSetDetail"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "permission_write"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "ContentPermissionSet"
        ],
        "summary": "Get multiple content permission sets",
        "description": "Gets multiple content permission set details by the content permission set IDs.",
        "operationId": "ContentPermissionSet_GetMany",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "Ids",
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string"
              }
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Array of Detail of a content permission set",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContentPermissionSetDetail"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "permission_read"
            ]
          }
        ]
      }
    },
    "/v1/ContentPermissionSets/{id}/ownership": {
      "put": {
        "tags": [
          "ContentPermissionSet"
        ],
        "summary": "Transfer ownership of content permission set",
        "description": "Transfers ownership of content permission set to supplied user.",
        "operationId": "ContentPermissionSet_TransferOwnership",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Content permission set ID.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "Request to transfer the ownership of a permission set.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PermissionSetOwnershipTransferRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": null
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "permission_write"
            ]
          }
        ]
      }
    },
    "/v1/ContentPermissionSets/{id}/permissions": {
      "get": {
        "tags": [
          "ContentPermissionSet"
        ],
        "summary": "Get permissions for content permission set",
        "description": "Returns permissions for the content permission set for the current user.",
        "operationId": "ContentPermissionSet_GetPermissions",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Content permission set ID.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Array of Permission set rights",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PermissionSetRight"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "permission_read"
            ]
          }
        ]
      }
    },
    "/v1/ContentPermissionSets/many": {
      "post": {
        "tags": [
          "ContentPermissionSet"
        ],
        "summary": "Create multiple content permission sets",
        "description": "Creates new content permission sets based on supplied requests.",
        "operationId": "ContentPermissionSet_CreateMany",
        "requestBody": {
          "x-name": "request",
          "description": "Request to create multiple content permission sets.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentPermissionSetCreateManyRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Response to a bulk operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "permission_write"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "ContentPermissionSet"
        ],
        "summary": "Update multiple content permission sets",
        "description": "Updates the content permission sets specified by the IDs and based on supplied request.",
        "operationId": "ContentPermissionSet_UpdateMany",
        "requestBody": {
          "x-name": "request",
          "description": "Request to update multiple content permission sets.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentPermissionSetUpdateManyRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Response to a bulk operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "permission_write"
            ]
          }
        ]
      }
    },
    "/v1/ContentPermissionSets/many/delete": {
      "post": {
        "tags": [
          "ContentPermissionSet"
        ],
        "summary": "Delete multiple content permission sets",
        "description": "Deletes the content permission sets specified by the IDs.",
        "operationId": "ContentPermissionSet_DeleteMany",
        "requestBody": {
          "x-name": "request",
          "description": "Request to delete multiple permission sets.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PermissionSetDeleteManyRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Response to a bulk operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "permission_write"
            ]
          }
        ]
      }
    },
    "/v1/ContentPermissionSets/many/ownership": {
      "put": {
        "tags": [
          "ContentPermissionSet"
        ],
        "summary": "Transfer ownership of multiple content permission sets",
        "description": "Transfers ownership of multiple content permission sets to respective supplied users.",
        "operationId": "ContentPermissionSet_TransferOwnershipMany",
        "requestBody": {
          "x-name": "request",
          "description": "Request to transfer the ownership of multiple permission sets.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PermissionSetOwnershipTransferManyRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": null
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "permission_write"
            ]
          }
        ]
      }
    },
    "/v1/ContentPermissionSets/many/permissions": {
      "get": {
        "tags": [
          "ContentPermissionSet"
        ],
        "summary": "Get permissions for multiple content permission sets",
        "description": "Returns permissions for multiple content permission sets for the current user.",
        "operationId": "ContentPermissionSet_GetPermissionsMany",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "Ids",
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string"
              }
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Array of Rights that the current user has on a permission set",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PermissionSetUserPermissionRights"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "permission_read"
            ]
          }
        ]
      }
    },
    "/v1/ContentPermissionSets/search": {
      "post": {
        "tags": [
          "ContentPermissionSet"
        ],
        "summary": "Search content permission set",
        "description": "Searches content permission sets as specified in the search request.",
        "operationId": "ContentPermissionSet_Search",
        "requestBody": {
          "x-name": "request",
          "description": "Request to search permission sets.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PermissionSetSearchRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Result of a permission set search operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionSetSearchResult"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "permission_read"
            ]
          }
        ]
      }
    },
    "/v1/Contents/{id}": {
      "get": {
        "tags": [
          "Content"
        ],
        "summary": "Get content",
        "description": "Gets the content detail by ID.",
        "operationId": "Content_Get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The content ID.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "resolveBehaviors",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "List of enums that control which parts of the content are resolved and returned.",
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "$ref": "#/components/schemas/ContentResolveBehavior"
              }
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Content detail",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentDetail"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "content_read"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Content"
        ],
        "summary": "Delete content",
        "description": "Deletes a single content. The lifecycle is changed to Inactive. After a customer instance specified time (default 30 days), the content and all files will be hard deleted.",
        "operationId": "Content_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the content to delete.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "forceReferenceRemoval",
            "in": "query",
            "description": "A value indicating whether references to the content should be removed.",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 2
          },
          {
            "name": "timeout",
            "in": "query",
            "description": "Maximum time to wait for the operation to complete. If timeout is exceeded, the operation is not aborted but continues anyhow.\n            Only the waiting is aborted, and the calls returned.",
            "schema": {
              "type": "string",
              "format": "time-span",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "waitSearchDocCreation",
            "in": "query",
            "description": "Wait for the creation of the search document and the rendered display values.\n            By default the endpoint waits for the search document creation. Passing false, the endpoint will return when the main entity has been created and the creation of the search document has been enqueued but not yet performed.",
            "schema": {
              "type": "boolean",
              "default": true
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "Ok"
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "content_write"
            ]
          }
        ]
      }
    },
    "/v1/Contents/downloads/{contentId}/{outputFormatId}": {
      "get": {
        "tags": [
          "Content"
        ],
        "summary": "Download content",
        "description": "Download a single content in a specific output format. To resize images on download specify target width &amp; height. To download only a portion of the file, specify the range parameter.",
        "operationId": "Content_Download",
        "parameters": [
          {
            "name": "contentId",
            "in": "path",
            "required": true,
            "description": "The content ID.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "outputFormatId",
            "in": "path",
            "required": true,
            "description": "The output format ID.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          },
          {
            "name": "width",
            "in": "query",
            "description": "Optional width in pixels to resize image.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "height",
            "in": "query",
            "description": "Optional height in pixels to resize image.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "range",
            "in": "header",
            "description": "The range of bytes to download (http range header): bytes={from}-{to} (e.g. bytes=0-100000).",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 5
          }
        ],
        "responses": {
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          },
          "200": {
            "description": null,
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "206": {
            "description": null,
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "412": {
            "description": null
          }
        },
        "security": [
          {
            "Bearer": [
              "content_read"
            ]
          }
        ]
      }
    },
    "/v1/Contents/thumbnails/{id}/{size}": {
      "get": {
        "tags": [
          "Content"
        ],
        "summary": "Download thumbnail",
        "description": "Provides a lightweight endpoint to download content thumbnails.",
        "operationId": "Content_DownloadThumbnail",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The content ID.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "size",
            "in": "path",
            "required": true,
            "description": "Thumbnail size. Either small, medium or large.",
            "schema": {
              "$ref": "#/components/schemas/ThumbnailSize"
            },
            "x-position": 2
          },
          {
            "name": "width",
            "in": "query",
            "description": "Optional width in pixels to resize image.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "height",
            "in": "query",
            "description": "Optional height in pixels to resize image.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "x-position": 4
          }
        ],
        "responses": {
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          },
          "200": {
            "description": null,
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "412": {
            "description": null
          }
        },
        "security": [
          {
            "Bearer": [
              "content_read"
            ]
          }
        ]
      }
    },
    "/v1/Contents": {
      "post": {
        "tags": [
          "Content"
        ],
        "summary": "Create content",
        "description": "Create a single file-less content item. To import files, see [Transfer](#tag/Transfer).",
        "operationId": "Content_Create",
        "parameters": [
          {
            "name": "resolveBehaviors",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "List of enums that control which parts of the content are resolved and returned.",
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "$ref": "#/components/schemas/ContentResolveBehavior"
              }
            },
            "x-position": 2
          },
          {
            "name": "allowMissingDependencies",
            "in": "query",
            "description": "Allows creating contents that refer to list items or contents that don't exist in the system.",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 3
          },
          {
            "name": "timeout",
            "in": "query",
            "description": "Maximum time to wait for the operation to complete. If timeout is exceeded, the operation is not aborted but continues anyhow.\n            Only the waiting is aborted, and the calls returned.",
            "schema": {
              "type": "string",
              "format": "time-span",
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "waitSearchDocCreation",
            "in": "query",
            "description": "Wait for the creation of the search document and the rendered display values.\n            By default the endpoint waits for the search document creation. Passing false, the endpoint will return when the main entity has been created and the creation of the search document has been enqueued but not yet performed.",
            "schema": {
              "type": "boolean",
              "default": true
            },
            "x-position": 5
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "Content create request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentCreateRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "The content details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentDetail"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "content_write"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Content"
        ],
        "summary": "Get multiple contents",
        "description": "Gets multiple content details by IDs.\nCan fetch 100 contents at most.",
        "operationId": "Content_GetMany",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "style": "form",
            "explode": true,
            "required": true,
            "description": "List of content IDs",
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string"
              }
            },
            "x-position": 1
          },
          {
            "name": "resolveBehaviors",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "List of enums that control which parts of the content are resolved and returned.",
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "$ref": "#/components/schemas/ContentResolveBehavior"
              }
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "List of Content detail",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContentDetail"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "content_read"
            ]
          }
        ]
      }
    },
    "/v1/Contents/{id}/metadata": {
      "put": {
        "tags": [
          "Content"
        ],
        "summary": "Update content metadata",
        "description": "Updates metadata layers of a specified content. For file-less contents, the content itself can be updated as well.\nThe update is flexible enough to allow the update of only the fields that are specified in the request (leaving untouched the other existing ones) or to allow\nthe entire replacement of all the values of a schema or even of all the schemas.\nSee [ShouldUpdateMetadata](https://github.com/Picturepark/Picturepark.SDK.DotNet/blob/master/src/Picturepark.SDK.V1.Tests/Clients/ContentTests.cs) tests.",
        "operationId": "Content_UpdateMetadata",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The content ID.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "resolveBehaviors",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "List of enums that control which parts of the content are resolved and returned.",
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "$ref": "#/components/schemas/ContentResolveBehavior"
              }
            },
            "x-position": 3
          },
          {
            "name": "allowMissingDependencies",
            "in": "query",
            "description": "Allows storing references to list items or contents that don't exist in the system.",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 4
          },
          {
            "name": "timeout",
            "in": "query",
            "description": "Maximum time to wait for the operation to complete. If timeout is exceeded, the operation is not aborted but continues anyhow.\n            Only the waiting is aborted, and the calls returned.",
            "schema": {
              "type": "string",
              "format": "time-span",
              "nullable": true
            },
            "x-position": 5
          },
          {
            "name": "waitSearchDocCreation",
            "in": "query",
            "description": "Wait for the creation of the search document and the rendered display values.\n            By default the endpoint waits for the search document creation. Passing false, the endpoint will return when the main entity has been created and the creation of the search document has been enqueued but not yet performed.",
            "schema": {
              "type": "boolean",
              "default": true
            },
            "x-position": 6
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "Content metadata update request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentMetadataUpdateRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Content detail",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentDetail"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "content_write"
            ]
          }
        ]
      }
    },
    "/v1/Contents/{id}/permissions": {
      "put": {
        "tags": [
          "Content"
        ],
        "summary": "Update content permissions",
        "description": "Updates the content permission sets of a single content. To get a list of available content permission sets, see [Permissions](operation/Permission_SearchContentPermissions)",
        "operationId": "Content_UpdatePermissions",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The content ID.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "resolveBehaviors",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "List of enums that control which parts of the content are resolved and returned.",
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "$ref": "#/components/schemas/ContentResolveBehavior"
              }
            },
            "x-position": 3
          },
          {
            "name": "timeout",
            "in": "query",
            "description": "Maximum time to wait for the operation to complete. If timeout is exceeded, the operation is not aborted but continues anyhow.\n            Only the waiting is aborted, and the calls returned.",
            "schema": {
              "type": "string",
              "format": "time-span",
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "waitSearchDocCreation",
            "in": "query",
            "description": "Wait for the creation of the search document and the rendered display values.\n            By default the endpoint waits for the search document creation. Passing false, the endpoint will return when the main entity has been created and the creation of the search document has been enqueued but not yet performed.",
            "schema": {
              "type": "boolean",
              "default": true
            },
            "x-position": 5
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "Content permissions update request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentPermissionsUpdateRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Content detail",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentDetail"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "content_write"
            ]
          }
        ]
      }
    },
    "/v1/Contents/{id}/restore": {
      "post": {
        "tags": [
          "Content"
        ],
        "summary": "Restore content",
        "description": "Restores a previously deleted content.",
        "operationId": "Content_Restore",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The content ID.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "allowMissingDependencies",
            "in": "query",
            "description": "Allows restoring contents that refer to list items or contents that don't exist in the system.",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 2
          },
          {
            "name": "timeout",
            "in": "query",
            "description": "Maximum time to wait for the operation to complete. If timeout is exceeded, the operation is not aborted but continues anyhow.\n            Only the waiting is aborted, and the calls returned.",
            "schema": {
              "type": "string",
              "format": "time-span",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "waitSearchDocCreation",
            "in": "query",
            "description": "Wait for the creation of the search document and the rendered display values.\n            By default the endpoint waits for the search document creation. Passing false, the endpoint will return when the main entity has been created and the creation of the search document has been enqueued but not yet performed.",
            "schema": {
              "type": "boolean",
              "default": true
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "Ok"
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "content_write"
            ]
          }
        ]
      }
    },
    "/v1/Contents/{id}/ownership": {
      "put": {
        "tags": [
          "Content"
        ],
        "summary": "Transfer content ownership",
        "description": "Transfers ownership of a content to another user. The target user must have the ManageContent UserRight.",
        "operationId": "Content_TransferOwnership",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The content ID.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "timeout",
            "in": "query",
            "description": "Maximum time to wait for the operation to complete. If timeout is exceeded, the operation is not aborted but continues anyhow.\n            Only the waiting is aborted, and the calls returned.",
            "schema": {
              "type": "string",
              "format": "time-span",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "waitSearchDocCreation",
            "in": "query",
            "description": "Wait for the creation of the search document and the rendered display values.\n            By default the endpoint waits for the search document creation. Passing false, the endpoint will return when the main entity has been created and the creation of the search document has been enqueued but not yet performed.",
            "schema": {
              "type": "boolean",
              "default": true
            },
            "x-position": 4
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "Content ownership transfer request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentOwnershipTransferRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Ok"
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "content_write"
            ]
          }
        ]
      }
    },
    "/v1/Contents/{id}/file": {
      "put": {
        "tags": [
          "Content"
        ],
        "summary": "Update content file",
        "description": "Updates binary file of existing content. The file must already be uploaded before calling this endpoint. See [Transfer](#tag/Transfer).\nThe operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.",
        "operationId": "Content_UpdateFile",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the content to replace.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "Content file update request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentFileUpdateRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Business process",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessProcess"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "content_write"
            ]
          }
        ]
      }
    },
    "/v1/Contents/{id}/references/search": {
      "post": {
        "tags": [
          "Content"
        ],
        "summary": "Get content references",
        "description": "Gets the references (list items, contents, shares) to a single content.",
        "operationId": "Content_GetReferences",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The content ID whose references to retrieve.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "Content references request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentReferencesRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "ContentReferencesResult",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentReferencesResult"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "content_read"
            ]
          }
        ]
      }
    },
    "/v1/Contents/{id}/outputs": {
      "get": {
        "tags": [
          "Content"
        ],
        "summary": "Get outputs",
        "description": "Retrieves all outputs available for content, also dynamic rendered outputs are returned, if requested.",
        "operationId": "Content_GetOutputs",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of content.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Array of Result of output resolution.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OutputResolveResult"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "content_read"
            ]
          }
        ]
      }
    },
    "/v1/Contents/downloadLinks": {
      "post": {
        "tags": [
          "Content"
        ],
        "summary": "Create download link",
        "description": "Creates a download link for one or more contents. The operation is executed asynchronously and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.",
        "operationId": "Content_CreateDownloadLink",
        "requestBody": {
          "x-name": "request",
          "description": "Content download link request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentDownloadLinkCreateRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Download link",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessProcess"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "content_read"
            ]
          }
        ]
      }
    },
    "/v1/Contents/downloadLink/{token}": {
      "get": {
        "tags": [
          "Content"
        ],
        "summary": "Resolve download token to Url",
        "operationId": "Content_GetDownloadLink",
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "required": true,
            "description": "Token",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Download link information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DownloadLink"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "content_read"
            ]
          }
        ]
      }
    },
    "/v1/Contents/many": {
      "post": {
        "tags": [
          "Content"
        ],
        "summary": "Create multiple contents",
        "description": "Create multiple file-less content items. To import files, see [Transfer](#tag/Transfer).\nThe operation is executed asynchronous and it's not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.",
        "operationId": "Content_CreateMany",
        "requestBody": {
          "x-name": "request",
          "description": "Content create many request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentCreateManyRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Business process",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessProcess"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "content_write"
            ]
          }
        ]
      }
    },
    "/v1/Contents/many/metadata": {
      "put": {
        "tags": [
          "Content"
        ],
        "summary": "Update multiple content metadata",
        "description": "Updates metadata layers of multiple contents. For file-less contents, the contents itself can be updated a swell.\nSee [ShouldUpdateMetadata](https://github.com/Picturepark/Picturepark.SDK.DotNet/blob/master/src/Picturepark.SDK.V1.Tests/Clients/ContentTests.cs) tests.\nThe operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.",
        "operationId": "Content_UpdateMetadataMany",
        "requestBody": {
          "x-name": "request",
          "description": "Content metadata update many request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentMetadataUpdateManyRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Business process",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessProcess"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "content_write"
            ]
          }
        ]
      }
    },
    "/v1/Contents/many/permissions": {
      "put": {
        "tags": [
          "Content"
        ],
        "summary": "Update multiple contents permissions",
        "description": "Updates the content permission sets of multiple contents. To get a list of available content permission sets, see [Permissions](#operation/Permission_SearchContentPermissions)\nThe operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.",
        "operationId": "Content_UpdatePermissionsMany",
        "requestBody": {
          "x-name": "request",
          "description": "Content permissions update many request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentPermissionsUpdateManyRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Business process",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessProcess"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "content_write"
            ]
          }
        ]
      }
    },
    "/v1/Contents/many/ownership": {
      "put": {
        "tags": [
          "Content"
        ],
        "summary": "Transfer multiple contents ownerships",
        "description": "Transfers ownerships of multiple contents to specified users. The target users must have the ManageContent UserRight.\nThe operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.",
        "operationId": "Content_TransferOwnershipMany",
        "requestBody": {
          "x-name": "request",
          "description": "Content ownership transfer many request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentOwnershipTransferManyRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Business process",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessProcess"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "content_write"
            ]
          }
        ]
      }
    },
    "/v1/Contents/many/delete": {
      "post": {
        "tags": [
          "Content"
        ],
        "summary": "Delete multiple contents",
        "description": "Deletes multiple contents. The lifecycle is changed to Inactive. After a customer instance specified time (default 30 days), the content and all files will be hard deleted.\nThe operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.",
        "operationId": "Content_DeleteMany",
        "requestBody": {
          "x-name": "request",
          "description": "Delete many request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentDeleteManyRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Business process",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessProcess"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "content_write"
            ]
          }
        ]
      }
    },
    "/v1/Contents/many/delete/filter": {
      "post": {
        "tags": [
          "Content"
        ],
        "summary": "Delete multiple contents - by filter",
        "description": "Deletes multiple contents. A filter must be provided to limit the deletion to specific contents.\nThe lifecycle is changed to Inactive. After a customer instance specified time (default 30 days), the content and all files will be hard deleted.\nThe operation is executed asynchronously and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.",
        "operationId": "Content_DeleteManyByFilter",
        "requestBody": {
          "x-name": "request",
          "description": "Delete many by filter request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentDeleteManyFilterRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Business process",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessProcess"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "content_write"
            ]
          }
        ]
      }
    },
    "/v1/Contents/many/restore": {
      "post": {
        "tags": [
          "Content"
        ],
        "summary": "Restore multiple contents",
        "description": "Restores previously deleted contents.\nThe operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.",
        "operationId": "Content_RestoreMany",
        "requestBody": {
          "x-name": "request",
          "description": "Content restore many request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentRestoreManyRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Business process",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessProcess"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "content_write"
            ]
          }
        ]
      }
    },
    "/v1/Contents/many/references/search": {
      "post": {
        "tags": [
          "Content"
        ],
        "summary": "Get many content references",
        "description": "Gets references (list items, contents, shares) to content documents defined by IDs.",
        "operationId": "Content_GetReferencesMany",
        "requestBody": {
          "x-name": "request",
          "description": "Content many references request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentManyReferencesRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Content references result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentReferencesResult"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "content_read"
            ]
          }
        ]
      }
    },
    "/v1/Contents/many/outputs": {
      "post": {
        "tags": [
          "Content"
        ],
        "summary": "Get outputs",
        "description": "Retrieves all outputs available for contents, also dynamic rendered outputs are returned, if requested.\nA maximum of 1000 content ids can be specified.",
        "operationId": "Content_GetOutputsMany",
        "requestBody": {
          "x-name": "request",
          "description": "Output resolve many request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OutputResolveManyRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Array of Result of output resolution.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OutputResolveResult"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "content_read"
            ]
          }
        ]
      }
    },
    "/v1/Contents/batches/fields/ids": {
      "put": {
        "tags": [
          "Content"
        ],
        "summary": "Batch update content fields - by IDs",
        "description": "Updates metadata layers' fields of multiple contents. For file-less contents, the content's fields themselves can be updated as well.\nA list of content IDs must be provided to limit the update to specific contents. The same set of changes is applied to all the contents.\nSee [ShouldUpdateMetadataMany](https://github.com/Picturepark/Picturepark.SDK.DotNet/blob/master/src/Picturepark.SDK.V1.Tests/Clients/ContentTests.cs) tests.\nThe operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.",
        "operationId": "Content_BatchUpdateFieldsByIds",
        "requestBody": {
          "x-name": "request",
          "description": "Content fields batch update request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentFieldsBatchUpdateRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Business process",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessProcess"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "content_write"
            ]
          }
        ]
      }
    },
    "/v1/Contents/batches/fields/filter": {
      "put": {
        "tags": [
          "Content"
        ],
        "summary": "Batch update fields - by filter",
        "description": "Updates metadata layers' fields of multiple contents. For file-less contents, the content's fields themselves can be updated as well.\nA filter must be provided to limit the update to specific contents. The same set of changes is applied to all the contents.\nThe operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.",
        "operationId": "Content_BatchUpdateFieldsByFilter",
        "requestBody": {
          "x-name": "request",
          "description": "Content fields batch update filter request. It contains the changes that need to be applied to the contents and the filter request to identify the contents.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentFieldsBatchUpdateFilterRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Business process",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessProcess"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "content_write"
            ]
          }
        ]
      }
    },
    "/v1/Contents/search": {
      "post": {
        "tags": [
          "Content"
        ],
        "summary": "Search contents",
        "description": "Searches contents as specified in the search request.",
        "operationId": "Content_Search",
        "requestBody": {
          "x-name": "request",
          "description": "Content search request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentSearchRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          },
          "200": {
            "description": "Result for content search operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentSearchResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "content_read"
            ]
          }
        ]
      }
    },
    "/v1/Contents/aggregateOnChannel": {
      "post": {
        "tags": [
          "Content"
        ],
        "summary": "Aggregate contents on channel",
        "description": "Aggregates content by content fields values as specified in the aggregators saved on a channel.",
        "operationId": "Content_AggregateOnChannel",
        "requestBody": {
          "x-name": "request",
          "description": "Content aggregation on channel request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentAggregationOnChannelRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Object aggregation result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectAggregationResult"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "content_read"
            ]
          }
        ]
      }
    },
    "/v1/Contents/aggregate": {
      "post": {
        "tags": [
          "Content"
        ],
        "summary": "Aggregate contents",
        "description": "Aggregates content by content fields values as specified in the aggregation request.",
        "operationId": "Content_Aggregate",
        "requestBody": {
          "x-name": "request",
          "description": "Content aggregation request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentAggregationRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Object aggregation result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectAggregationResult"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "content_read"
            ]
          }
        ]
      }
    },
    "/v1/DisplayValues/status": {
      "get": {
        "tags": [
          "DisplayValue"
        ],
        "summary": "Get status",
        "description": "Get the status of the display values compared to the schema model.",
        "operationId": "DisplayValue_GetStatus",
        "responses": {
          "200": {
            "description": "VersionInfo",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DisplayValueStatus"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "schema_read"
            ]
          }
        ]
      }
    },
    "/v1/DisplayValues/rerender": {
      "post": {
        "tags": [
          "DisplayValue"
        ],
        "summary": "Re-render the display values",
        "description": "The re-rendering only work on those display values that are out of date or not created yet. The process is therefore based on the information returned by the \"status\" endpoint: if the status is red, the display values of the data\ncorresponding to the ContentOrLayerSchemaIds and ListSchemaIds are recalculated.\nThe operation is executed asynchronously and it is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.",
        "operationId": "DisplayValue_Rerender",
        "responses": {
          "200": {
            "description": "VersionInfo",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessProcess"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "schema_write"
            ]
          }
        ]
      }
    },
    "/v1/history/{documentType}/{documentId}/current": {
      "get": {
        "tags": [
          "DocumentHistory"
        ],
        "summary": "Get current",
        "description": "Gets the current version of a document.",
        "operationId": "DocumentHistory_GetCurrent",
        "parameters": [
          {
            "name": "documentType",
            "in": "path",
            "required": true,
            "description": "The type of the document (e.g. Content).",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "documentId",
            "in": "path",
            "required": true,
            "description": "The ID of the document (e.g. contentId).",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Document history item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentHistory"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "documenthistory_read"
            ]
          }
        ]
      }
    },
    "/v1/history/{documentType}/{documentId}/{documentVersion}": {
      "get": {
        "tags": [
          "DocumentHistory"
        ],
        "summary": "Get version",
        "description": "Gets a specific version of a document.",
        "operationId": "DocumentHistory_GetVersion",
        "parameters": [
          {
            "name": "documentType",
            "in": "path",
            "required": true,
            "description": "The type of the document (e.g. Content).",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "documentId",
            "in": "path",
            "required": true,
            "description": "The ID of the document (e.g. contentId).",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "documentVersion",
            "in": "path",
            "required": true,
            "description": "The version of the document.",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "Document history item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentHistory"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "documenthistory_read"
            ]
          }
        ]
      }
    },
    "/v1/history/{documentType}/{documentId}/current/compare": {
      "get": {
        "tags": [
          "DocumentHistory"
        ],
        "summary": "Compare with current",
        "description": "Compare the current version of a document with the requested version and get the differences.",
        "operationId": "DocumentHistory_CompareWithCurrent",
        "parameters": [
          {
            "name": "documentType",
            "in": "path",
            "required": true,
            "description": "The type of the document (e.g. Content).",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "documentId",
            "in": "path",
            "required": true,
            "description": "The ID of the document (e.g. contentId).",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "version",
            "in": "query",
            "description": "The version of the document to compare with.",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "Document history difference.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentHistoryDifference"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "documenthistory_read"
            ]
          }
        ]
      }
    },
    "/v1/history/{documentType}/{documentId}/{documentVersion}/compare": {
      "get": {
        "tags": [
          "DocumentHistory"
        ],
        "summary": "Compare with version",
        "description": "Compare a specific version of a document with another version and get the differences.",
        "operationId": "DocumentHistory_CompareWithVersion",
        "parameters": [
          {
            "name": "documentType",
            "in": "path",
            "required": true,
            "description": "The type of the document (e.g. Content).",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "documentId",
            "in": "path",
            "required": true,
            "description": "The ID of the document (e.g. contentId).",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "documentVersion",
            "in": "path",
            "required": true,
            "description": "The version of the document to use for the comparison.",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "x-position": 3
          },
          {
            "name": "version",
            "in": "query",
            "description": "The version of the document to compare with.",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "Document history difference",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentHistoryDifference"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "documenthistory_read"
            ]
          }
        ]
      }
    },
    "/v1/history/search": {
      "post": {
        "tags": [
          "DocumentHistory"
        ],
        "summary": "Search",
        "description": "Search the document history as specified in the search request.",
        "operationId": "DocumentHistory_Search",
        "requestBody": {
          "x-name": "request",
          "description": "The document history search request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentHistorySearchRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Document history search result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentHistorySearchResult"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "documenthistory_read"
            ]
          }
        ]
      }
    },
    "/v1/IdentityProviders": {
      "get": {
        "tags": [
          "IdentityProviders"
        ],
        "summary": "Get all identity providers",
        "description": "Gets all identity providers configured",
        "operationId": "IdentityProvider_GetAll",
        "responses": {
          "200": {
            "description": "Array of identity providers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdentityProvider"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "identityprovider_read"
            ]
          }
        ]
      }
    },
    "/v1/IdentityProviders/basicInfo": {
      "get": {
        "tags": [
          "IdentityProviders"
        ],
        "summary": "Get basic info for all providers",
        "description": "Gets basic information for all identity providers configured",
        "operationId": "IdentityProvider_GetAllBasicInfos",
        "responses": {
          "200": {
            "description": "Array of identity provider basic information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdentityProviderBasicInfo"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "identityprovider_read"
            ]
          }
        ]
      }
    },
    "/v1/IdentityProviders/{id}": {
      "get": {
        "tags": [
          "IdentityProviders"
        ],
        "summary": "Get identity provider",
        "operationId": "IdentityProvider_Get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Identity provider ID.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Represents an identity provider defined in IdentityServer and its Picturepark configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityProvider"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "identityprovider_read"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "IdentityProviders"
        ],
        "summary": "Update identity provider",
        "description": "Identity provider has to be already created via UI",
        "operationId": "IdentityProvider_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Identity provider ID.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "provider",
          "description": "Update request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdentityProviderEditable"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Represents an identity provider defined in IdentityServer and its Picturepark configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityProvider"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "identityprovider_write"
            ]
          }
        ]
      }
    },
    "/v1/IdentityProviders/synchronizableAttributes": {
      "get": {
        "tags": [
          "IdentityProviders"
        ],
        "summary": "Get synchronizable attributes",
        "description": "Returns names of user attributes that can be synchronized from identity provider claims and therefore can be used in ClaimMapping.",
        "operationId": "IdentityProvider_GetSynchronizableAttributes",
        "responses": {
          "200": {
            "description": "Names of user attributes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "identityprovider_read"
            ]
          }
        ]
      }
    },
    "/v1/Info/version": {
      "get": {
        "tags": [
          "Info"
        ],
        "summary": "Get version",
        "description": "Get the version information of the deployed application.",
        "operationId": "Info_GetVersion",
        "responses": {
          "200": {
            "description": "VersionInfo",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionInfo"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Info/customer": {
      "get": {
        "tags": [
          "Info"
        ],
        "summary": "Get info",
        "description": "Get the customer specific configuration infos.",
        "operationId": "Info_GetInfo",
        "responses": {
          "200": {
            "description": "CustomerInfo",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerInfo"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Info/status": {
      "get": {
        "tags": [
          "Info"
        ],
        "summary": "Get status",
        "description": "Get the status of the system data compared to the schema model.",
        "operationId": "Info_GetStatus",
        "responses": {
          "200": {
            "description": "SystemStatus",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemStatus"
                }
              }
            }
          }
        }
      }
    },
    "/v1/JsonSchemas/{id}": {
      "get": {
        "tags": [
          "JsonSchema"
        ],
        "summary": "Get json schema",
        "description": "Gets the json schema for the specified schema.",
        "operationId": "JsonSchema_Get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the schema whose json schema to retrieve.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          },
          "200": {
            "description": null,
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "jsonschema_read"
            ]
          }
        ]
      }
    },
    "/v1/ListItems/{id}": {
      "get": {
        "tags": [
          "ListItem"
        ],
        "summary": "Get list item",
        "description": "Gets the list item detail by ID.",
        "operationId": "ListItem_Get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The list item ID.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "resolveBehaviors",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "List of enums that control which parts of the list item are resolved and returned.",
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "$ref": "#/components/schemas/ListItemResolveBehavior"
              }
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "List item detail",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListItemDetail"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "listitem_read"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "ListItem"
        ],
        "summary": "Update list item",
        "description": "Updates a single list item.",
        "operationId": "ListItem_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The list item ID.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "resolveBehaviors",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "List of enums that control which parts of the list item are resolved and returned.",
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "$ref": "#/components/schemas/ListItemResolveBehavior"
              }
            },
            "x-position": 3
          },
          {
            "name": "allowMissingDependencies",
            "in": "query",
            "description": "Allows creating list items that refer to list items or contents that don't exist in the system.",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 4
          },
          {
            "name": "timeout",
            "in": "query",
            "description": "Maximum time to wait for the operation to complete. If timeout is exceeded, the operation is not aborted but continues anyhow.\n            Only the waiting is aborted, and the calls returned.",
            "schema": {
              "type": "string",
              "format": "time-span",
              "nullable": true
            },
            "x-position": 5
          },
          {
            "name": "waitSearchDocCreation",
            "in": "query",
            "description": "Wait for the creation of the search document and the rendered display values.\n            By default the endpoint waits for the search document creation. Passing false, the endpoint will return when the main entity has been created and the creation of the search document has been enqueued but not yet performed.",
            "schema": {
              "type": "boolean",
              "default": true
            },
            "x-position": 6
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The list item update request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListItemUpdateRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "List item detail",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListItemDetail"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "listitem_write"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "ListItem"
        ],
        "summary": "Delete list item",
        "description": "Deletes a list item. The lifecycle is changed to Inactive. After a customer instance specified time (default 30 days), the list item and all related files will be deleted.",
        "operationId": "ListItem_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the list item to delete.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "forceReferenceRemoval",
            "in": "query",
            "description": "A value indicating whether references to the list item should be removed.",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 2
          },
          {
            "name": "timeout",
            "in": "query",
            "description": "Maximum time to wait for the operation to complete. If timeout is exceeded, the operation is not aborted but continues anyhow.\n            Only the waiting is aborted, and the calls returned.",
            "schema": {
              "type": "string",
              "format": "time-span",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "waitSearchDocCreation",
            "in": "query",
            "description": "Wait for the creation of the search document and the rendered display values.\n            By default the endpoint waits for the search document creation. Passing false, the endpoint will return when the main entity has been created and the creation of the search document has been enqueued but not yet performed.",
            "schema": {
              "type": "boolean",
              "default": true
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "Ok"
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "listitem_write"
            ]
          }
        ]
      }
    },
    "/v1/ListItems/{id}/restore": {
      "post": {
        "tags": [
          "ListItem"
        ],
        "summary": "Restore list item",
        "description": "Restores a previously deleted list item.",
        "operationId": "ListItem_Restore",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The list item ID.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "allowMissingDependencies",
            "in": "query",
            "description": "Allows restoring list items that refer to list items or contents that don't exist in the system.",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 2
          },
          {
            "name": "timeout",
            "in": "query",
            "description": "Maximum time to wait for the operation to complete. If timeout is exceeded, the operation is not aborted but continues anyhow.\n            Only the waiting is aborted, and the calls returned.",
            "schema": {
              "type": "string",
              "format": "time-span",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "waitSearchDocCreation",
            "in": "query",
            "description": "Wait for the creation of the search document and the rendered display values.\n            By default the endpoint waits for the search document creation. Passing false, the endpoint will return when the main entity has been created and the creation of the search document has been enqueued but not yet performed.",
            "schema": {
              "type": "boolean",
              "default": true
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "Ok"
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "listitem_write"
            ]
          }
        ]
      }
    },
    "/v1/ListItems/{id}/references/search": {
      "post": {
        "tags": [
          "ListItem"
        ],
        "summary": "Get list item references",
        "description": "Gets the references (list items, contents) to a single list item.",
        "operationId": "ListItem_GetReferences",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the list item.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "Request options to specify how many references to fetch.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListItemReferencesRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "List item references",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListItemReferencesResult"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "listitem_read"
            ]
          }
        ]
      }
    },
    "/v1/ListItems": {
      "post": {
        "tags": [
          "ListItem"
        ],
        "summary": "Create list item",
        "description": "Create a new list item.",
        "operationId": "ListItem_Create",
        "parameters": [
          {
            "name": "resolveBehaviors",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "List of enums that control which parts of the list item are resolved and returned.",
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "$ref": "#/components/schemas/ListItemResolveBehavior"
              }
            },
            "x-position": 2
          },
          {
            "name": "allowMissingDependencies",
            "in": "query",
            "description": "Allows creating list items that refer to list items or contents that don't exist in the system.",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 3
          },
          {
            "name": "timeout",
            "in": "query",
            "description": "Maximum time to wait for the operation to complete. If timeout is exceeded, the operation is not aborted but continues anyhow.\n            Only the waiting is aborted, and the calls returned.",
            "schema": {
              "type": "string",
              "format": "time-span",
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "waitSearchDocCreation",
            "in": "query",
            "description": "Wait for the creation of the search document and the rendered display values.\n            By default the endpoint waits for the search document creation. Passing false, the endpoint will return when the main entity has been created and the creation of the search document has been enqueued but not yet performed.",
            "schema": {
              "type": "boolean",
              "default": true
            },
            "x-position": 5
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "List item create request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListItemCreateRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "List item detail",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListItemDetail"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "listitem_write"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "ListItem"
        ],
        "summary": "Get multiple list items",
        "description": "Gets multiple list item details by IDs.\nCan fetch 100 list items at most.",
        "operationId": "ListItem_GetMany",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "List of list item IDs.",
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string"
              }
            },
            "x-position": 1
          },
          {
            "name": "resolveBehaviors",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "List of enums that control which parts of the list items are resolved and returned.",
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "$ref": "#/components/schemas/ListItemResolveBehavior"
              }
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "List of list item details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListItemDetail"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "listitem_read"
            ]
          }
        ]
      }
    },
    "/v1/ListItems/many": {
      "post": {
        "tags": [
          "ListItem"
        ],
        "summary": "Create multiple list items",
        "description": "The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.",
        "operationId": "ListItem_CreateMany",
        "requestBody": {
          "x-name": "request",
          "description": "List item create many request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListItemCreateManyRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Business process",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessProcess"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "listitem_write"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "ListItem"
        ],
        "summary": "Update multiple list items",
        "description": "The operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.",
        "operationId": "ListItem_UpdateMany",
        "requestBody": {
          "x-name": "request",
          "description": "List item update many request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListItemUpdateManyRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Business process",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessProcess"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "listitem_write"
            ]
          }
        ]
      }
    },
    "/v1/ListItems/many/delete": {
      "post": {
        "tags": [
          "ListItem"
        ],
        "summary": "Delete multiple list items",
        "description": "The lifecycle is changed to Inactive. After a customer instance specified time (default 30 days), the list item and all files will be deleted.\nThe operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.",
        "operationId": "ListItem_DeleteMany",
        "requestBody": {
          "x-name": "request",
          "description": "List item delete many request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListItemDeleteManyRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Business process",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessProcess"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "listitem_write"
            ]
          }
        ]
      }
    },
    "/v1/ListItems/many/delete/filter": {
      "post": {
        "tags": [
          "ListItem"
        ],
        "summary": "Delete multiple list items - by filter",
        "description": "Deletes multiple list items. A filter must be provided to limit the deletion to specific list items.\nThe lifecycle is changed to Inactive. After a customer instance specified time (default 30 days), the list item and all files will be hard deleted.\nThe operation is executed asynchronously and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.",
        "operationId": "ListItem_DeleteManyByFilter",
        "requestBody": {
          "x-name": "request",
          "description": "Delete many by filter request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListItemDeleteManyFilterRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Business process",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessProcess"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "listitem_write"
            ]
          }
        ]
      }
    },
    "/v1/ListItems/many/restore": {
      "post": {
        "tags": [
          "ListItem"
        ],
        "summary": "Restore multiple list items",
        "description": "Restores previously deleted list items.\nThe operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.",
        "operationId": "ListItem_RestoreMany",
        "requestBody": {
          "x-name": "request",
          "description": "List item restore many request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListItemRestoreManyRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Business process",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessProcess"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "listitem_write"
            ]
          }
        ]
      }
    },
    "/v1/ListItems/many/references/search": {
      "post": {
        "tags": [
          "ListItem"
        ],
        "summary": "Get multiple list items references",
        "description": "Gets the references (list items, contents) to multiple list items.",
        "operationId": "ListItem_GetReferencesMany",
        "requestBody": {
          "x-name": "request",
          "description": "ListItemManyReferencesRequest",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListItemManyReferencesRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "A list of references per list item.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListItemReferencesResult"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "listitem_read"
            ]
          }
        ]
      }
    },
    "/v1/ListItems/batches/fields/ids": {
      "put": {
        "tags": [
          "ListItem"
        ],
        "summary": "Batch update fields - by IDs",
        "description": "Updates fields of multiple list items. A list of list item IDs must be provided to limit the update to specific list items.\nThe same set of changes is applied to all the list items.\nThe operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.",
        "operationId": "ListItem_BatchUpdateFieldsByIds",
        "requestBody": {
          "x-name": "request",
          "description": "List item fields batch update request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListItemFieldsBatchUpdateRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Business process",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessProcess"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "listitem_write"
            ]
          }
        ]
      }
    },
    "/v1/ListItems/batches/fields/filter": {
      "put": {
        "tags": [
          "ListItem"
        ],
        "summary": "Batch update fields - by filter",
        "description": "Updates fields of multiple list items. A filter must be provided to limit the update to specific list items.\nThe same set of changes is applied to all the list items.\nThe operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.",
        "operationId": "ListItem_BatchUpdateFieldsByFilter",
        "requestBody": {
          "x-name": "request",
          "description": "List item fields batch update by filter request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListItemFieldsBatchUpdateFilterRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Business process",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessProcess"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "listitem_write"
            ]
          }
        ]
      }
    },
    "/v1/ListItems/search": {
      "post": {
        "tags": [
          "ListItem"
        ],
        "summary": "Search list items",
        "description": "Searches list items as specified in the search request.",
        "operationId": "ListItem_Search",
        "requestBody": {
          "x-name": "request",
          "description": "The list item search request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListItemSearchRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "List item search result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListItemSearchResult"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "listitem_read"
            ]
          }
        ]
      }
    },
    "/v1/ListItems/aggregate": {
      "post": {
        "tags": [
          "ListItem"
        ],
        "summary": "Aggregate list items",
        "description": "Aggregates list items as specified in the aggregation request.",
        "operationId": "ListItem_Aggregate",
        "requestBody": {
          "x-name": "request",
          "description": "The list item aggregation request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListItemAggregationRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Object aggregation result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectAggregationResult"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "listitem_read"
            ]
          }
        ]
      }
    },
    "/v1/LiveStream/search": {
      "post": {
        "tags": [
          "LiveStream"
        ],
        "summary": "Search",
        "description": "Search for live stream events with optional parameters to limit time, document type or use more complex filtering.",
        "operationId": "LiveStream_Search",
        "requestBody": {
          "x-name": "request",
          "description": "Parameters for the search",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LiveStreamSearchRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Resulting live stream events",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LiveStreamSearchResult"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "livestream_read"
            ]
          }
        ]
      }
    },
    "/v1/Metadata/status": {
      "get": {
        "tags": [
          "Metadata"
        ],
        "summary": "Get status",
        "description": "Get the status of the metadata items (contents and list items) compared to the schema model.",
        "operationId": "Metadata_GetStatus",
        "responses": {
          "200": {
            "description": "The overall status of the contents and list items in comparison to the actual schemas' structure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetadataStatus"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "schema_read"
            ]
          }
        ]
      }
    },
    "/v1/Metadata/many/updateOutdated": {
      "post": {
        "tags": [
          "Metadata"
        ],
        "summary": "Update outdated",
        "description": "Update outdated metadata items (contents and list items). The changes to the schemas are enforced: data related to removed fields are deleted; eventual references to removed fields are dropped; calculated values are recalculated;\nthe ids of the schemas' fields the could not be reused become available again.\nThe operation can take a long time and it is therefore executed asynchronously and not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish. The operation is executed asynchronously and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.",
        "operationId": "Metadata_UpdateOutdated",
        "responses": {
          "200": {
            "description": "Business process",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessProcess"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "schema_write"
            ]
          }
        ]
      }
    },
    "/v1/OutputFormats/{id}/downloadFileNamePatterns": {
      "put": {
        "tags": [
          "OutputFormat"
        ],
        "summary": "Sets the download file name patterns for an output format",
        "description": "This is allowed for both static and dynamic formats. The operation is executed asynchronously and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.",
        "operationId": "OutputFormat_SetDownloadFileNamePatterns",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the output format.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "patterns",
          "description": "Dictionary containing patterns per metadata language.\nIf this is set, at least the customer's default language is required.\nSet any other language to an empty string and a fallback to the default language will occur.\nSet parameter to null to clear any already set patterns.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TranslatedStringDictionary"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Business process",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessProcess"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "outputformat_write"
            ]
          }
        ]
      }
    },
    "/v1/OutputFormats/many/downloadFileNamePatterns": {
      "put": {
        "tags": [
          "OutputFormat"
        ],
        "summary": "Sets the download file name patterns for multiple output formats",
        "description": "This is allowed for both static and dynamic formats. The operation is executed asynchronously and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.",
        "operationId": "OutputFormat_SetDownloadFileNamePatternsMany",
        "requestBody": {
          "x-name": "request",
          "description": "The request containing the patterns for each output format.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OutputFormatDownloadFileNamePatternUpdateManyRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Business process",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessProcess"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "outputformat_write"
            ]
          }
        ]
      }
    },
    "/v1/OutputFormats/{id}/xmpWriteback": {
      "put": {
        "tags": [
          "OutputFormat"
        ],
        "summary": "Enables or disables XMP writeback for an output format",
        "description": "This is allowed for both static and dynamic formats.\nHowever, enabling XMP writeback for Thumbnail formats or temporary formats is not allowed. The operation is executed asynchronously and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.",
        "operationId": "OutputFormat_SetXmpWritebackState",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the output format.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The request containing the state to be set for the output format.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OutputFormatSetXmpWritebackStateRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Business process",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessProcess"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "outputformat_write"
            ]
          }
        ]
      }
    },
    "/v1/OutputFormats/many/xmpWriteback": {
      "put": {
        "tags": [
          "OutputFormat"
        ],
        "summary": "Enables or disables XMP writeback for multiple output formats",
        "description": "This is allowed for both static and dynamic formats.\nHowever, enabling XMP writeback for Thumbnail formats or temporary formats is not allowed. The operation is executed asynchronously and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.",
        "operationId": "OutputFormat_SetXmpWritebackState2",
        "requestBody": {
          "x-name": "request",
          "description": "The request containing the state to be set for the output format.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OutputFormatSetXmpWritebackStateManyRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Business process",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessProcess"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "outputformat_write"
            ]
          }
        ]
      }
    },
    "/v1/OutputFormats/preview": {
      "post": {
        "tags": [
          "OutputFormat"
        ],
        "summary": "Render output format preview",
        "description": "Request rendering of the given OutputFormat for a given content.",
        "operationId": "OutputFormat_RenderFormatPreview",
        "requestBody": {
          "x-name": "request",
          "description": "Information about the OutputFormat as well as which Content to use for the preview.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OutputFormatRenderPreviewRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Rendered file",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          },
          "206": {
            "description": null,
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "412": {
            "description": null
          }
        },
        "security": [
          {
            "Bearer": [
              "outputformat_write"
            ]
          }
        ]
      }
    },
    "/v1/OutputFormats": {
      "get": {
        "tags": [
          "OutputFormat"
        ],
        "summary": "Get multiple output formats",
        "description": "Gets multiple output format details by the output format IDs. Can fetch maximum of 100 output formats at once.",
        "operationId": "OutputFormat_GetMany",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "Output format IDs to get information about. If this is omitted, all output formats in the system will be returned.",
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string"
              }
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Array of Represents an output format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OutputFormatDetail"
                  }
                }
              }
            }
          },
          "400": {
            "description": "List of IDs exceeded maximum size",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestSizeLimitExceededException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "outputformat_read"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "OutputFormat"
        ],
        "summary": "Create output format",
        "description": "Creates new output format based on the supplied request. The operation is executed asynchronously and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.",
        "operationId": "OutputFormat_Create",
        "requestBody": {
          "x-name": "request",
          "description": "Request containing information needed to create new output format.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OutputFormat"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Business process",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessProcess"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "outputformat_write"
            ]
          }
        ]
      }
    },
    "/v1/OutputFormats/{id}": {
      "get": {
        "tags": [
          "OutputFormat"
        ],
        "summary": "Get output format",
        "description": "Gets the output format by the output format ID.",
        "operationId": "OutputFormat_Get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Output format ID.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Represents an output format.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OutputFormatDetail"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "outputformat_read"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "OutputFormat"
        ],
        "summary": "Update output format",
        "description": "Updates the output format specified by the ID and based on supplied request. The operation is executed asynchronously and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.",
        "operationId": "OutputFormat_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Output format ID.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "Request containing information needed to update the output format.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OutputFormatEditable"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Business process",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessProcess"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "outputformat_write"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "OutputFormat"
        ],
        "summary": "Delete output format",
        "description": "Deletes the output format specified by the ID. The operation is executed asynchronously and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.",
        "operationId": "OutputFormat_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Output format ID.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Business process",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessProcess"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "outputformat_write"
            ]
          }
        ]
      }
    },
    "/v1/OutputFormats/many": {
      "post": {
        "tags": [
          "OutputFormat"
        ],
        "summary": "Create multiple output formats",
        "description": "Creates new output formats based on supplied requests. The operation is executed asynchronously and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.",
        "operationId": "OutputFormat_CreateMany",
        "requestBody": {
          "x-name": "request",
          "description": "Request containing information needed to create new output format.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OutputFormatCreateManyRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Business process",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessProcess"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "outputformat_write"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "OutputFormat"
        ],
        "summary": "Update multiple output formats",
        "description": "Updates the output formats specified by the IDs and based on supplied requests. The operation is executed asynchronously and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.",
        "operationId": "OutputFormat_UpdateMany",
        "requestBody": {
          "x-name": "request",
          "description": "Request containing information needed to update the output format.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OutputFormatUpdateManyRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Business process",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessProcess"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "outputformat_write"
            ]
          }
        ]
      }
    },
    "/v1/OutputFormats/many/delete": {
      "post": {
        "tags": [
          "OutputFormat"
        ],
        "summary": "Delete multiple output formats",
        "description": "Deletes the output formats specified by the IDs. The operation is executed asynchronously and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.",
        "operationId": "OutputFormat_DeleteMany",
        "requestBody": {
          "x-name": "request",
          "description": "The request with output format IDs to delete.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OutputFormatDeleteManyRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Business process",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessProcess"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "outputformat_write"
            ]
          }
        ]
      }
    },
    "/v1/Outputs/{id}": {
      "get": {
        "tags": [
          "Output"
        ],
        "summary": "Get output",
        "description": "Gets a output document by id.",
        "operationId": "Output_Get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Output ID.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Output detail",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OutputDetail"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "output_read"
            ]
          }
        ]
      }
    },
    "/v1/Outputs/search": {
      "post": {
        "tags": [
          "Output"
        ],
        "summary": "Search output documents",
        "description": "ContentIds must be mandatory filled.",
        "operationId": "Output_Search",
        "requestBody": {
          "x-name": "request",
          "description": "The output search request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OutputSearchRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Output result set",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OutputSearchResult"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "output_read"
            ]
          }
        ]
      }
    },
    "/v1/Outputs/resetRetryAttempts": {
      "post": {
        "tags": [
          "Output"
        ],
        "summary": "Resets retry attempt counters.",
        "description": "Resets retry attempt counters on failed (optionally also completed) outputs and they will be subsequently picked up for re-rendering.\nThe number the counters are reset to is determined by a global configuration value. If OutputIds are specified, the rest of the fields are ignored.\nCan reset 100 outputs at most. The operation is executed asynchronously and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.",
        "operationId": "Output_ResetRetryAttempts",
        "requestBody": {
          "x-name": "request",
          "description": "Request containing options to filter which outputs should be reset.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OutputResetRetryAttemptsRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Business process tracking the resetting",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessProcess"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "output_write"
            ]
          }
        ]
      }
    },
    "/v1/Profile": {
      "get": {
        "tags": [
          "Profile"
        ],
        "summary": "Get",
        "description": "Get profile of currently logged in user.",
        "operationId": "Profile_Get",
        "responses": {
          "200": {
            "description": "User profile",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfile"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "profile_read"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Profile"
        ],
        "summary": "Update",
        "description": "Updates profile of currently logged in user.",
        "operationId": "Profile_Update",
        "requestBody": {
          "x-name": "request",
          "description": "Request to update a user profile..",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserProfileUpdateRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Updated user profile",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfile"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "profile_write"
            ]
          }
        ]
      }
    },
    "/v1/Profile/requestDeletion": {
      "post": {
        "tags": [
          "Profile"
        ],
        "summary": "Request deletion",
        "description": "Requests deletion of the current user profile.",
        "operationId": "Profile_RequestDeletion",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "profile_write"
            ]
          }
        ]
      }
    },
    "/v1/SchemaPermissionSets/{id}": {
      "get": {
        "tags": [
          "SchemaPermissionSet"
        ],
        "summary": "Get schema permission set",
        "description": "Gets the schema permission set detail information by the schema permission set ID.",
        "operationId": "SchemaPermissionSet_Get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Schema permission set ID.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Detail of a schema permission set",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaPermissionSetDetail"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "permission_read"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "SchemaPermissionSet"
        ],
        "summary": "Update schema permission set",
        "description": "Updates the schema permission set specified by the ID and based on supplied request.",
        "operationId": "SchemaPermissionSet_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Schema permission set ID.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "permissionSet",
          "description": "Permission set",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SchemaPermissionSetUpdateRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Detail of a schema permission set",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaPermissionSetDetail"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "permission_write"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "SchemaPermissionSet"
        ],
        "summary": "Delete schema permission set",
        "description": "Deletes the schema permission set specified by the ID.",
        "operationId": "SchemaPermissionSet_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Schema permission set ID.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": null
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "permission_write"
            ]
          }
        ]
      }
    },
    "/v1/SchemaPermissionSets": {
      "post": {
        "tags": [
          "SchemaPermissionSet"
        ],
        "summary": "Create schema permission set",
        "description": "Creates new schema permission set based on supplied request.",
        "operationId": "SchemaPermissionSet_Create",
        "requestBody": {
          "x-name": "permissionSet",
          "description": "Permission set",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SchemaPermissionSetCreateRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Detail of a schema permission set",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaPermissionSetDetail"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "permission_write"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "SchemaPermissionSet"
        ],
        "summary": "Get multiple schema permission sets",
        "description": "Gets multiple schema permission set details by the schema permission set IDs.",
        "operationId": "SchemaPermissionSet_GetMany",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "Ids",
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string"
              }
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Array of Detail of a schema permission set",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SchemaPermissionSetDetail"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "permission_read"
            ]
          }
        ]
      }
    },
    "/v1/SchemaPermissionSets/{id}/ownership": {
      "put": {
        "tags": [
          "SchemaPermissionSet"
        ],
        "summary": "Transfer ownership of schema permission set",
        "description": "Transfers ownership of schema permission set to supplied user.",
        "operationId": "SchemaPermissionSet_TransferOwnership",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Schema permission set ID.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "Request to transfer the ownership of a permission set.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PermissionSetOwnershipTransferRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": null
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "permission_write"
            ]
          }
        ]
      }
    },
    "/v1/SchemaPermissionSets/{id}/permissions": {
      "get": {
        "tags": [
          "SchemaPermissionSet"
        ],
        "summary": "Get permissions for schema permission set",
        "description": "Returns permissions for the schema permission set for the current user.",
        "operationId": "SchemaPermissionSet_GetPermissions",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Schema permission set ID.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Array of Permission set rights",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PermissionSetRight"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "permission_read"
            ]
          }
        ]
      }
    },
    "/v1/SchemaPermissionSets/many": {
      "post": {
        "tags": [
          "SchemaPermissionSet"
        ],
        "summary": "Create multiple schema permission sets",
        "description": "Creates new schema permission sets based on supplied requests.",
        "operationId": "SchemaPermissionSet_CreateMany",
        "requestBody": {
          "x-name": "request",
          "description": "Request to update multiple schema permission sets.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SchemaPermissionSetCreateManyRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Response to a bulk operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "permission_write"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "SchemaPermissionSet"
        ],
        "summary": "Update multiple schema permission sets",
        "description": "Updates the schema permission sets specified by the IDs and based on supplied request.",
        "operationId": "SchemaPermissionSet_UpdateMany",
        "requestBody": {
          "x-name": "request",
          "description": "Request to update multiple schema permissions sets.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SchemaPermissionSetUpdateManyRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Response to a bulk operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "permission_write"
            ]
          }
        ]
      }
    },
    "/v1/SchemaPermissionSets/many/delete": {
      "post": {
        "tags": [
          "SchemaPermissionSet"
        ],
        "summary": "Delete multiple schema permission sets",
        "description": "Deletes the schema permission sets specified by the IDs.",
        "operationId": "SchemaPermissionSet_DeleteMany",
        "requestBody": {
          "x-name": "request",
          "description": "Request to delete multiple permission sets.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PermissionSetDeleteManyRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Response to a bulk operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "permission_write"
            ]
          }
        ]
      }
    },
    "/v1/SchemaPermissionSets/many/ownership": {
      "put": {
        "tags": [
          "SchemaPermissionSet"
        ],
        "summary": "Transfer ownership of multiple schema permission sets",
        "description": "Transfers ownership of multiple schema permission sets to respective supplied users.",
        "operationId": "SchemaPermissionSet_TransferOwnershipMany",
        "requestBody": {
          "x-name": "request",
          "description": "Request to transfer the ownership of multiple permission sets.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PermissionSetOwnershipTransferManyRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": null
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "permission_write"
            ]
          }
        ]
      }
    },
    "/v1/SchemaPermissionSets/many/permissions": {
      "get": {
        "tags": [
          "SchemaPermissionSet"
        ],
        "summary": "Get permissions for multiple schema permission sets",
        "description": "Returns permissions for multiple schema permission sets for the current user.",
        "operationId": "SchemaPermissionSet_GetPermissionsMany",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "Ids",
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string"
              }
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Array of Rights that the current user has on a permission set",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PermissionSetUserPermissionRights"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "permission_read"
            ]
          }
        ]
      }
    },
    "/v1/SchemaPermissionSets/search": {
      "post": {
        "tags": [
          "SchemaPermissionSet"
        ],
        "summary": "Search schema permission set",
        "description": "Searches schema permission sets as specified in the search request.",
        "operationId": "SchemaPermissionSet_Search",
        "requestBody": {
          "x-name": "request",
          "description": "Request to search permission sets.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PermissionSetSearchRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Result of a permission set search operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionSetSearchResult"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "permission_read"
            ]
          }
        ]
      }
    },
    "/v1/Schemas/{id}": {
      "get": {
        "tags": [
          "Schema"
        ],
        "summary": "Get schema",
        "description": "Gets the schema detail by schema ID.",
        "operationId": "Schema_Get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The schema ID.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Schema detail",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaDetail"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "schema_read"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Schema"
        ],
        "summary": "Update schema",
        "description": "Updates an existing schema.\nDepending on how much the schema is referenced by existing data, the operation can take a lot of time.",
        "operationId": "Schema_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The schema ID.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "timeout",
            "in": "query",
            "description": "Maximum time to wait for the operation to complete. If timeout is exceeded, the operation is not aborted but continues anyhow.\n            Only the waiting is aborted, and the calls returned.",
            "schema": {
              "type": "string",
              "format": "time-span",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The schema update request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SchemaUpdateRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Schema update result, containing the updated schema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaUpdateResult"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "schema_write"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Schema"
        ],
        "summary": "Delete schema",
        "description": "Deletes an existing schema.\nDepending on how much the schema is referenced, the operation can take a lot of time.",
        "operationId": "Schema_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The schema ID.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "timeout",
            "in": "query",
            "description": "Maximum time to wait for the operation to complete. If timeout is exceeded, the operation is not aborted but continues anyhow.\n            Only the waiting is aborted, and the calls returned.",
            "schema": {
              "type": "string",
              "format": "time-span",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Schema delete result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaDeleteResult"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "schema_write"
            ]
          }
        ]
      }
    },
    "/v1/Schemas/{id}/exists": {
      "get": {
        "tags": [
          "Schema"
        ],
        "summary": "Exists schema",
        "description": "Checks if the schema already exists.",
        "operationId": "Schema_Exists",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The schema ID.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Schema Exists response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaExistsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "schema_read"
            ]
          }
        ]
      }
    },
    "/v1/Schemas/{schemaId}/{fieldId}/exists": {
      "get": {
        "tags": [
          "Schema"
        ],
        "summary": "Exists field in schema",
        "description": "Checks if the field in the specified schema already exists.\nAlso returns a flag indicating if the field was previously deleted and the ID can therefore not be reused.",
        "operationId": "Schema_FieldExists",
        "parameters": [
          {
            "name": "schemaId",
            "in": "path",
            "required": true,
            "description": "The schema ID.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "fieldId",
            "in": "path",
            "required": true,
            "description": "The field ID.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Field Exists response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FieldExistsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "schema_read"
            ]
          }
        ]
      }
    },
    "/v1/Schemas/{id}/referenced": {
      "get": {
        "tags": [
          "Schema"
        ],
        "summary": "Gets all schemas referenced by the schema specified in ",
        "description": "Can fetch referencing schemas for 100 schemas at most.",
        "operationId": "Schema_GetReferenced",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The schema ID.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Referenced schema details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SchemaDetail"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "schema_read"
            ]
          }
        ]
      }
    },
    "/v1/Schemas/{id}/ownership": {
      "put": {
        "tags": [
          "Schema"
        ],
        "summary": "Transfer ownership",
        "description": "Transfer ownership of the schema specified in ",
        "operationId": "Schema_TransferOwnership",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The schema ID.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "timeout",
            "in": "query",
            "description": "Maximum time to wait for the operation to complete. If timeout is exceeded, the operation is not aborted but continues anyhow.\n            Only the waiting is aborted, and the calls returned.",
            "schema": {
              "type": "string",
              "format": "time-span",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "Request detailing which user to transfer to.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SchemaOwnershipTransferRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "schema_write"
            ]
          }
        ]
      }
    },
    "/v1/Schemas": {
      "post": {
        "tags": [
          "Schema"
        ],
        "summary": "Create schema",
        "description": "Create a new schema.",
        "operationId": "Schema_Create",
        "parameters": [
          {
            "name": "timeout",
            "in": "query",
            "description": "Maximum time to wait for the operation to complete. If timeout is exceeded, the operation is not aborted but continues anyhow.\n            Only the waiting is aborted, and the calls returned.",
            "schema": {
              "type": "string",
              "format": "time-span",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The schema create request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SchemaCreateRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Schema create result, containing the created schema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaCreateResult"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "schema_write"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Schema"
        ],
        "summary": "Get multiple schemas",
        "description": "Gets multiple schema details by given schema IDs.\nCan fetch 100 schema details at most.",
        "operationId": "Schema_GetMany",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "Comma separated list of schema IDs.",
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string"
              }
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "List of schema details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SchemaDetail"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "schema_read"
            ]
          }
        ]
      }
    },
    "/v1/Schemas/many": {
      "post": {
        "tags": [
          "Schema"
        ],
        "summary": "Create multiple schemas",
        "description": "Creates new schemas. The operation is executed asynchronously and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.",
        "operationId": "Schema_CreateMany",
        "requestBody": {
          "x-name": "request",
          "description": "The schema create many request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SchemaCreateManyRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "BusinessProcess which can be awaited",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessProcess"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "schema_write"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Schema"
        ],
        "summary": "Update multiple schema",
        "description": "Updates multiple existing schemas.\nPrefer this whenever you have updates for multiple schemas. The operation is executed asynchronously and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.",
        "operationId": "Schema_UpdateMany",
        "requestBody": {
          "x-name": "request",
          "description": "Request to update multiple schemas.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SchemaUpdateManyRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "BusinessProcess which can be awaited",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessProcess"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "schema_write"
            ]
          }
        ]
      }
    },
    "/v1/Schemas/many/referenced": {
      "get": {
        "tags": [
          "Schema"
        ],
        "summary": "Gets all schemas referenced by the schemas specified in ",
        "operationId": "Schema_GetManyReferenced",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "The schema IDs.",
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string"
              }
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Referenced schema details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SchemaDetail"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "schema_read"
            ]
          }
        ]
      }
    },
    "/v1/Schemas/many/ownership": {
      "put": {
        "tags": [
          "Schema"
        ],
        "summary": "Transfer ownership of multiple schemas",
        "description": "Transfers ownership of multiple schemas to specified user. The target user must have the ManageSchemas user right.\nThe operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.",
        "operationId": "Schema_TransferOwnershipMany",
        "requestBody": {
          "x-name": "request",
          "description": "Schema ownership transfer many request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SchemaOwnershipTransferManyRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Business process",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessProcess"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "schema_write"
            ]
          }
        ]
      }
    },
    "/v1/Schemas/search": {
      "post": {
        "tags": [
          "Schema"
        ],
        "summary": "Search schemas",
        "description": "Searches schemas as specified in the search request.",
        "operationId": "Schema_Search",
        "requestBody": {
          "x-name": "request",
          "description": "The schema search request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SchemaSearchRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Schema search result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaSearchResult"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "schema_read"
            ]
          }
        ]
      }
    },
    "/v1/Schemas/indexFields/searchBySchemaIds": {
      "post": {
        "tags": [
          "Schema"
        ],
        "summary": "Search index fields",
        "description": "Search the indexed fields based on the search request.\nAn indexed field object is created for a schema field only if that field has one of the following properties set to true: Index,\nSimpleSearch or Sortable.\nAll indexed fields are aggregated and returned as a a single list.",
        "operationId": "Schema_GetIndexFields",
        "requestBody": {
          "x-name": "request",
          "description": "The search request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IndexFieldsSearchBySchemaIdsRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Indexed fields",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IndexField"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "schema_read"
            ]
          }
        ]
      }
    },
    "/v1/SchemaTransfers/import": {
      "post": {
        "tags": [
          "SchemaTransfer"
        ],
        "summary": "Import schemas",
        "description": "Imports schemas and list items. The file must already be uploaded before calling this endpoint. See [Transfer](#tag/Transfer).\nThe operation is executed asynchronous and it is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.",
        "operationId": "SchemaTransfer_Import",
        "requestBody": {
          "x-name": "request",
          "description": "The schema import request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SchemaImportRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Transfer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transfer"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "schema_write",
              "transfer_write"
            ]
          }
        ]
      }
    },
    "/v1/Shares/json/{token}": {
      "get": {
        "tags": [
          "Share"
        ],
        "summary": "Get share json",
        "operationId": "Share_GetShareJson",
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "required": true,
            "description": "Share token",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language code",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "resolveBehaviors",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "List of enums that control which parts of the share are resolved and returned.",
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "$ref": "#/components/schemas/ShareResolveBehavior"
              }
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "ShareDetail",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShareDetail"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Shares/d/{token}": {
      "get": {
        "tags": [
          "Share"
        ],
        "summary": "Download shared outputs",
        "operationId": "Share_Download",
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "required": true,
            "description": "Share token",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "width",
            "in": "query",
            "description": "Optional width in pixels to resize image",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "height",
            "in": "query",
            "description": "Optional height in pixels to resize image",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "range",
            "in": "header",
            "description": "The range of bytes to download (http range header): bytes={from}-{to} (e.g. bytes=0-100000)",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 4
          }
        ],
        "responses": {
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          },
          "200": {
            "description": null,
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "206": {
            "description": null,
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "412": {
            "description": null
          }
        }
      }
    },
    "/v1/Shares/d/{token}/{contentId}/{outputFormatId}": {
      "get": {
        "tags": [
          "Share"
        ],
        "summary": "Download shared output",
        "description": "Download single content in a specific output format (or automatically determined format if none is specified). To resize images on download specify target width &amp; height. To download only a portion of the file, specify the range parameter.",
        "operationId": "Share_DownloadSingleContent",
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "required": true,
            "description": "Share token",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "contentId",
            "in": "path",
            "required": true,
            "description": "The content id",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "outputFormatId",
            "in": "path",
            "required": true,
            "description": "The output format id",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "width",
            "in": "query",
            "description": "Optional width in pixels to resize image",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "height",
            "in": "query",
            "description": "Optional height in pixels to resize image",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "x-position": 5
          },
          {
            "name": "range",
            "in": "header",
            "description": "The range of bytes to download (http range header): bytes={from}-{to} (e.g. bytes=0-100000)",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 6
          }
        ],
        "responses": {
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          },
          "200": {
            "description": null,
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "206": {
            "description": null,
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "412": {
            "description": null
          }
        }
      }
    },
    "/v1/Shares/{id}": {
      "get": {
        "tags": [
          "Share"
        ],
        "summary": "Get",
        "description": "Get share by id (basic or embed).",
        "operationId": "Share_Get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Share Id (not token, use [GetShareJson](#operation/Share_GetShareJson) to get share by token)",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "resolveBehaviors",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "List of enums that control which parts of the share are resolved and returned.",
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "$ref": "#/components/schemas/ShareResolveBehavior"
              }
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Share detail",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShareDetail"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "share_read"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Share"
        ],
        "summary": "Update",
        "description": "Updates a single share. The operation is executed asynchronously and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.",
        "operationId": "Share_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The share id.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The share update request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShareBaseUpdateRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "BusinessProcess",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessProcess"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "share_write"
            ]
          }
        ]
      }
    },
    "/v1/Shares": {
      "post": {
        "tags": [
          "Share"
        ],
        "summary": "Create",
        "description": "Create a new share (basic or embed). The operation is executed asynchronously and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.",
        "operationId": "Share_Create",
        "requestBody": {
          "x-name": "request",
          "description": "Polymorphic create contract. Use either ShareBasicCreateRequest or ShareEmbedCreateRequest",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShareBaseCreateRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "BusinessProcess",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessProcess"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "share_write"
            ]
          }
        ]
      }
    },
    "/v1/Shares/many/delete": {
      "post": {
        "tags": [
          "Share"
        ],
        "summary": "Delete multiple shares",
        "description": "Deletes multiple shares. Returns a business process which will hold a batch response detail containing information about successful and failed rows. The operation is executed asynchronously and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.",
        "operationId": "Share_DeleteMany",
        "requestBody": {
          "x-name": "request",
          "description": "A delete many request containing the ids of the shares to delete.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShareDeleteManyRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "BusinessProcess",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessProcess"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "share_write"
            ]
          }
        ]
      }
    },
    "/v1/Shares/many/revoke": {
      "post": {
        "tags": [
          "Share"
        ],
        "summary": "Revokes multiple shares",
        "operationId": "Share_Revoke",
        "requestBody": {
          "x-name": "request",
          "description": "A revoke many request containing the ids of the shares to revoke.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShareRevokeManyRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "BusinessProcess",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessProcess"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "share_write"
            ]
          }
        ]
      }
    },
    "/v1/Shares/aggregate": {
      "post": {
        "tags": [
          "Share"
        ],
        "summary": "Aggregate",
        "description": "Aggregates shares either created by or sent to current user.",
        "operationId": "Share_Aggregate",
        "requestBody": {
          "x-name": "request",
          "description": "Aggregation request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShareAggregationRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Share aggregation result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectAggregationResult"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "share_read"
            ]
          }
        ]
      }
    },
    "/v1/Shares/search": {
      "post": {
        "tags": [
          "Share"
        ],
        "summary": "Search",
        "description": "Search shares either created by or sent to current user.",
        "operationId": "Share_Search",
        "requestBody": {
          "x-name": "request",
          "description": "Search request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShareSearchRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Share search result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShareSearchResult"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "share_read"
            ]
          }
        ]
      }
    },
    "/v1/Transfers": {
      "post": {
        "tags": [
          "Transfer"
        ],
        "summary": "Create transfer",
        "description": "For transfers of type FileUpload or FileUploadAutoImport, after creating the transfer, wait for the returned BusinessProcess to hit the \"Created\" state before attempting to upload files.",
        "operationId": "Transfer_Create",
        "requestBody": {
          "x-name": "request",
          "description": "The create transfer request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTransferRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Transfer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transfer"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "transfer_write"
            ]
          }
        ]
      }
    },
    "/v1/Transfers/{id}": {
      "get": {
        "tags": [
          "Transfer"
        ],
        "summary": "Get transfer details",
        "operationId": "Transfer_Get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of transfer.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "TransferDetail",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransferDetail"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "transfer_read"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Transfer"
        ],
        "summary": "Delete transfer",
        "description": "A transfer cannot be deleted if it's currently in the UploadInProgress or ImportInProgress state.",
        "operationId": "Transfer_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of transfer.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "transfer_write"
            ]
          }
        ]
      }
    },
    "/v1/Transfers/{id}/import": {
      "post": {
        "tags": [
          "Transfer"
        ],
        "summary": "Import transfer",
        "description": "This triggers the import of a Transfer, creating Contents. All items in the Transfer will be enqueued for rendering.\n            \nWait for completion on the Business process ID that is returned to wait for import completion.\nNote: Before attempting to import a Transfer, the transfer has to be in the TransferReady state.",
        "operationId": "Transfer_Import",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of transfer.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The ImportTransfer request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImportTransferRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Transfer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transfer"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "transfer_write"
            ]
          }
        ]
      }
    },
    "/v1/Transfers/{id}/partialImport": {
      "post": {
        "tags": [
          "Transfer"
        ],
        "summary": "Import transfer partially",
        "description": "This triggers the import of selected items in a Transfer, creating contents. All imported items will be enqueued for rendering.\n            \nWait for completion on the Business process ID that is returned to wait for import completion.\n            \nTransfer will transition to state ImportDone if no files of the transfer remain for import.\nTransfer will transition to state TransferReady if any files of the transfer remain for import.",
        "operationId": "Transfer_PartialImport",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of transfer.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The ImportTransferPartial request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImportTransferPartialRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Transfer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transfer"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "transfer_write"
            ]
          }
        ]
      }
    },
    "/v1/Transfers/{id}/cancel": {
      "post": {
        "tags": [
          "Transfer"
        ],
        "summary": "Cancel transfer",
        "description": "Requests cancellation of transfer.\nNote: Transfers can only be cancelled when state is UploadInProgress.",
        "operationId": "Transfer_Cancel",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of transfer.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "transfer_write"
            ]
          }
        ]
      }
    },
    "/v1/Transfers/search": {
      "post": {
        "tags": [
          "Transfer"
        ],
        "summary": "Search",
        "operationId": "Transfer_Search",
        "requestBody": {
          "x-name": "request",
          "description": "The transfer search request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransferSearchRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "TransferSearchResult",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransferSearchResult"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "transfer_read"
            ]
          }
        ]
      }
    },
    "/v1/Transfers/files/{id}": {
      "get": {
        "tags": [
          "Transfer"
        ],
        "summary": "Get file",
        "operationId": "Transfer_GetFile",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of file transfer.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "FileTransferDetail",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileTransferDetail"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "transfer_read"
            ]
          }
        ]
      }
    },
    "/v1/Transfers/files/search": {
      "post": {
        "tags": [
          "Transfer"
        ],
        "summary": "Search for files",
        "operationId": "Transfer_SearchFiles",
        "requestBody": {
          "x-name": "request",
          "description": "The file transfer search request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FileTransferSearchRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "FileTransferSearchResult",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileTransferSearchResult"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "transfer_read"
            ]
          }
        ]
      }
    },
    "/v1/Transfers/files/delete": {
      "post": {
        "tags": [
          "Transfer"
        ],
        "summary": "Delete files",
        "operationId": "Transfer_DeleteFiles",
        "requestBody": {
          "x-name": "request",
          "description": "The file transfer delete request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FileTransferDeleteRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": null
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "transfer_write"
            ]
          }
        ]
      }
    },
    "/v1/Transfers/files/blacklist": {
      "get": {
        "tags": [
          "Transfer"
        ],
        "summary": "Get blacklist",
        "description": "The blacklist is a list of patterns that a filename must not match.\nA filename matching an item on the blacklist will be skipped during uploading.\n            \nThe client is responsibly for matching uploaded files against the blacklist\nwhen creating the transfer. Otherwise, during transfer creation some items might get skipped\ncausing issues when uploading later on.",
        "operationId": "Transfer_GetBlacklist",
        "responses": {
          "200": {
            "description": "Blacklist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Blacklist"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "transfer_read"
            ]
          }
        ]
      }
    },
    "/v1/Transfers/{transferId}/files/{requestId}/upload": {
      "post": {
        "tags": [
          "Transfer"
        ],
        "summary": "Upload file",
        "description": "Uploads the specified chunk data.\n            \nUse `Content-Type: application/octet-stream` for uploading chunked data.\nThe chunk data should be contained in the body of your request.\n            \nTo upload a file, split it into chunks of reasonable size (accepted range is 1MB-100MB). The last chunk may be smaller than 1MB.",
        "operationId": "Transfer_UploadFile",
        "parameters": [
          {
            "name": "ChunkNumber",
            "in": "query",
            "required": true,
            "description": "Information about chunk.",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "x-position": 1
          },
          {
            "name": "CurrentChunkSize",
            "in": "query",
            "required": true,
            "description": "Information about chunk.",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "x-position": 2
          },
          {
            "name": "TotalSize",
            "in": "query",
            "required": true,
            "description": "Information about chunk.",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "x-position": 3
          },
          {
            "name": "TotalChunks",
            "in": "query",
            "required": true,
            "description": "Information about chunk.",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "x-position": 4
          },
          {
            "name": "transferId",
            "in": "path",
            "required": true,
            "description": "ID of transfer.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 5
          },
          {
            "name": "requestId",
            "in": "path",
            "required": true,
            "description": "Identifier of file.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 6
          }
        ],
        "requestBody": {
          "x-name": "body",
          "description": "Body",
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "file"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "transfer_write"
            ]
          }
        ]
      }
    },
    "/v1/UserRoles/search": {
      "post": {
        "tags": [
          "UserRole"
        ],
        "summary": "Search user roles",
        "operationId": "UserRole_Search",
        "requestBody": {
          "x-name": "request",
          "description": "User role search request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRoleSearchRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Result of the user role search",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRoleSearchResult"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "userrole_read"
            ]
          }
        ]
      }
    },
    "/v1/UserRoles": {
      "get": {
        "tags": [
          "UserRole"
        ],
        "summary": "Get multiple user roles",
        "description": "Gets multiple user role details by the user role IDs. Can fetch maximum of 100 user roles at once.",
        "operationId": "UserRole_GetMany",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "User role IDs to get information about.",
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string"
              }
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Array of Represents a user role, which associates users with user rights.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserRoleDetail"
                  }
                }
              }
            }
          },
          "400": {
            "description": "List of IDs exceeded maximum size",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestSizeLimitExceededException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "userrole_read"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "UserRole"
        ],
        "summary": "Create user role",
        "description": "Creates new user role based on the supplied request.",
        "operationId": "UserRole_Create",
        "requestBody": {
          "x-name": "request",
          "description": "Request containing information needed to create new user role.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRoleCreateRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Represents a user role, which associates users with user rights.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRoleDetail"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "userrole_write"
            ]
          }
        ]
      }
    },
    "/v1/UserRoles/many": {
      "post": {
        "tags": [
          "UserRole"
        ],
        "summary": "Create multiple user roles",
        "description": "Creates new user roles based on supplied requests.",
        "operationId": "UserRole_CreateMany",
        "requestBody": {
          "x-name": "request",
          "description": "Request containing information needed to create new user role.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRoleCreateManyRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Response to a bulk operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "userrole_write"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "UserRole"
        ],
        "summary": "Update multiple user roles",
        "description": "Updates the user roles specified by the IDs and based on supplied requests.",
        "operationId": "UserRole_UpdateMany",
        "requestBody": {
          "x-name": "request",
          "description": "Request containing information needed to update the user role.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRoleUpdateManyRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Response to a bulk operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "userrole_write"
            ]
          }
        ]
      }
    },
    "/v1/UserRoles/many/delete": {
      "post": {
        "tags": [
          "UserRole"
        ],
        "summary": "Delete multiple user roles",
        "description": "Deletes the user roles specified by the IDs.",
        "operationId": "UserRole_DeleteMany",
        "requestBody": {
          "x-name": "request",
          "description": "The request with user role IDs to delete.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRoleDeleteManyRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Response to a bulk operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "userrole_write"
            ]
          }
        ]
      }
    },
    "/v1/UserRoles/{id}": {
      "get": {
        "tags": [
          "UserRole"
        ],
        "summary": "Get user role",
        "description": "Gets the user role by the user role ID.",
        "operationId": "UserRole_Get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "User role ID.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Represents a user role, which associates users with user rights.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRoleDetail"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "userrole_read"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "UserRole"
        ],
        "summary": "Update user role",
        "description": "Updates the user role specified by the ID and based on supplied request.",
        "operationId": "UserRole_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "User role ID.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "Request containing information needed to update the user role.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRoleEditable"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Represents a user role, which associates users with user rights.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRoleDetail"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "userrole_write"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "UserRole"
        ],
        "summary": "Delete user role",
        "description": "Deletes the user role specified by the ID.",
        "operationId": "UserRole_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "User role ID.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": null
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "userrole_write"
            ]
          }
        ]
      }
    },
    "/v1/Users/{id}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get user",
        "operationId": "User_Get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "User ID to search for.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Requested user details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDetail"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "user_read"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Update user",
        "operationId": "User_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "User ID to action on.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "New user information.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdateRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "User details after the update of the user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDetail"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "user_write"
            ]
          }
        ]
      }
    },
    "/v1/Users/{id}/lock": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Lock / unlock user",
        "description": "Does not affect AuthorizationState of user.\nIf User is already in desired state, this will be returned as error.",
        "operationId": "User_Lock",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "User ID to action on.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "Request detailing if the user should be locked or unlocked.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserLockRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "user_write"
            ]
          }
        ]
      }
    },
    "/v1/Users/many/lock": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Change lock state of multiple users",
        "description": "Does not affect AuthorizationState of users\nUsers which are already in desired state will be returned as errors. The operation is executed asynchronously and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.",
        "operationId": "User_LockMany",
        "requestBody": {
          "x-name": "request",
          "description": "Information about users to update and the desired lock state",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserLockManyRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Business process",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessProcess"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "user_write"
            ]
          }
        ]
      }
    },
    "/v1/Users/{id}/review": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Change user's review state",
        "description": "Users with AuthorizationState != ToBeReviewed are considered reviewed.",
        "operationId": "User_Review",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "User ID to action on.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "Request detailing if the user should be set as _reviewed_ or _to be reviewed_.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserReviewRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "user_write"
            ]
          }
        ]
      }
    },
    "/v1/Users/many/review": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Change Review state of multiple users",
        "description": "Users with AuthorizationState != ToBeReviewed are considered reviewed. The operation is executed asynchronously and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.",
        "operationId": "User_ReviewMany",
        "requestBody": {
          "x-name": "request",
          "description": "Information about users to update and the desired review state",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserReviewManyRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Business process",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessProcess"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "user_write"
            ]
          }
        ]
      }
    },
    "/v1/Users/{id}/invite": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Invite user",
        "description": "Formally invites a user, e.g. sends an invitation email. Transitions AuthorizationState to Invited, implicitly reviews user.",
        "operationId": "User_Invite",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "User ID to action on.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "user_write"
            ]
          }
        ]
      }
    },
    "/v1/Users/many/invite": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Invite multiple users",
        "description": "Formally invites users, e.g. sends an invitation email. Transitions to Invited, implicitly reviews user. The operation is executed asynchronously and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.",
        "operationId": "User_InviteMany",
        "requestBody": {
          "x-name": "request",
          "description": "Information about users to invite",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserInviteManyRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Business process",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessProcess"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "user_write"
            ]
          }
        ]
      }
    },
    "/v1/Users/{id}/reinvite": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Reinvite user",
        "description": "Formally re-invites a user, e.g. sends an invitation email.",
        "operationId": "User_Reinvite",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "User ID to action on.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "user_write"
            ]
          }
        ]
      }
    },
    "/v1/Users/many/reinvite": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Reinvite users",
        "description": "Formally re-invites users, e.g. sends an invitation email. The operation is executed asynchronously and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.",
        "operationId": "User_ReInviteMany",
        "requestBody": {
          "x-name": "request",
          "description": "Information about users to reinvite",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserReinviteManyRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Business process",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessProcess"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "user_write"
            ]
          }
        ]
      }
    },
    "/v1/Users/many/assignUserRoles": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Assign or unassign userRoles",
        "operationId": "User_AssignUserRoles",
        "requestBody": {
          "x-name": "request",
          "description": "Information about users to modify and kind of operation",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRoleAssignManyRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Business process",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessProcess"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "user_write"
            ]
          }
        ]
      }
    },
    "/v1/Users/{id}/delete": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Delete user",
        "operationId": "User_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "User ID",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "Request with details about deletion",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserDeleteRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "user_write"
            ]
          }
        ]
      }
    },
    "/v1/Users/{id}/restore": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Restore user",
        "description": "Restores previously deleted user, who was not cleaned up yet.",
        "operationId": "User_Restore",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "User ID to action on.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "user_write"
            ]
          }
        ]
      }
    },
    "/v1/Users/{id}/cancelDeletionRequest": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Cancels a user triggered deletion request and returns user to _Reviewed_ state.",
        "operationId": "User_CancelDeletionRequest",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "User ID to action on.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "user_write"
            ]
          }
        ]
      }
    },
    "/v1/Users/owner/{tokenId}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get user by owner token",
        "operationId": "User_GetByOwnerToken",
        "parameters": [
          {
            "name": "tokenId",
            "in": "path",
            "required": true,
            "description": "ID of the owner token.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "User details of the user referenced by the owner token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDetail"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "user_read"
            ]
          }
        ]
      }
    },
    "/v1/Users": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Create user",
        "description": "User will not be invited.",
        "operationId": "User_Create",
        "requestBody": {
          "x-name": "request",
          "description": "Requested user information.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreateRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Newly created user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDetail"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "user_write"
            ]
          }
        ]
      }
    },
    "/v1/Users/many": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get multiple users",
        "description": "Can fetch 100 users at most.",
        "operationId": "User_GetMany",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "User IDs.",
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string"
              }
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Details of all the users who were found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserDetail"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "user_read"
            ]
          }
        ]
      }
    },
    "/v1/Users/search": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Search users",
        "operationId": "User_Search",
        "requestBody": {
          "x-name": "request",
          "description": "User search request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserSearchRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Result of the user search",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSearchResult"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "user_read"
            ]
          }
        ]
      }
    },
    "/v1/Users/aggregate": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Aggregate users",
        "operationId": "User_Aggregate",
        "requestBody": {
          "x-name": "request",
          "description": "User aggregation request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserAggregationRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Aggregation based on the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectAggregationResult"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "user_read"
            ]
          }
        ]
      }
    },
    "/v1/Users/many/updateIdentityProvider": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Update identity provider on multiple users",
        "operationId": "User_UpdateIdentityProviderMany",
        "requestBody": {
          "x-name": "request",
          "description": "User update identity provider request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdateIdentityProviderManyRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Business process",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessProcess"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "user_write"
            ]
          }
        ]
      }
    },
    "/v1/XmpMappings/targets": {
      "get": {
        "tags": [
          "XmpMapping"
        ],
        "summary": "Gets fields available for XMP mapping.",
        "operationId": "XmpMapping_GetAvailableTargets",
        "responses": {
          "200": {
            "description": "XmpMappingTargets containing both XMP fields and metadata fields that are available for mapping.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/XmpMappingTargets"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "xmpmapping_read"
            ]
          }
        ]
      }
    },
    "/v1/XmpMappings/search": {
      "post": {
        "tags": [
          "XmpMapping"
        ],
        "summary": "Searches for XMP mappings",
        "operationId": "XmpMapping_Search",
        "requestBody": {
          "x-name": "request",
          "description": "Search request for getting configured XMP mappings.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/XmpMappingEntrySearchRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Holds results of search for XMP mappings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/XmpMappingEntrySearchResult"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "xmpmapping_read"
            ]
          }
        ]
      }
    },
    "/v1/XmpMappings/{id}": {
      "get": {
        "tags": [
          "XmpMapping"
        ],
        "summary": "Get xmp mapping",
        "description": "Gets the xmp mapping by the xmp mapping ID.",
        "operationId": "XmpMapping_Get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Xmp mapping ID.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "XMP mapping entry",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/XmpMappingEntry"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "xmpmapping_read"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "XmpMapping"
        ],
        "summary": "Update xmp mapping",
        "description": "Updates the xmp mapping specified by the ID and based on supplied request. The operation is executed asynchronously and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.",
        "operationId": "XmpMapping_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Xmp mapping ID.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "Request containing information needed to update the xmp mapping.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/XmpMappingEntry"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Business process",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessProcess"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "xmpmapping_write"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "XmpMapping"
        ],
        "summary": "Delete xmp mapping",
        "description": "Deletes the xmp mapping specified by the ID. The operation is executed asynchronously and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.",
        "operationId": "XmpMapping_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Xmp mapping ID.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Business process",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessProcess"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "xmpmapping_write"
            ]
          }
        ]
      }
    },
    "/v1/XmpMappings": {
      "post": {
        "tags": [
          "XmpMapping"
        ],
        "summary": "Create xmp mapping",
        "description": "Creates new xmp mapping based on the supplied request. The operation is executed asynchronously and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.",
        "operationId": "XmpMapping_Create",
        "requestBody": {
          "x-name": "request",
          "description": "Request containing information needed to create new xmp mapping.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/XmpMappingEntryCreateRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Business process",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessProcess"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "xmpmapping_write"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "XmpMapping"
        ],
        "summary": "Get multiple xmp mappings",
        "description": "Gets multiple xmp mapping details by the xmp mapping IDs. Can fetch maximum of 100 xmp mappings at once.",
        "operationId": "XmpMapping_GetMany",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "Xmp mapping IDs to get information about.",
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string"
              }
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Array of XMP mapping entry",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/XmpMappingEntry"
                  }
                }
              }
            }
          },
          "400": {
            "description": "List of IDs exceeded maximum size",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestSizeLimitExceededException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "xmpmapping_read"
            ]
          }
        ]
      }
    },
    "/v1/XmpMappings/many": {
      "post": {
        "tags": [
          "XmpMapping"
        ],
        "summary": "Create multiple xmp mappings",
        "description": "Creates new xmp mappings based on supplied requests. The operation is executed asynchronously and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.",
        "operationId": "XmpMapping_CreateMany",
        "requestBody": {
          "x-name": "request",
          "description": "Request containing information needed to create new xmp mapping.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/XmpMappingEntryCreateManyRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Business process",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessProcess"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "xmpmapping_write"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "XmpMapping"
        ],
        "summary": "Update multiple xmp mappings",
        "description": "Updates the xmp mappings specified by the IDs and based on supplied requests. The operation is executed asynchronously and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.",
        "operationId": "XmpMapping_UpdateMany",
        "requestBody": {
          "x-name": "request",
          "description": "Request containing information needed to update the xmp mapping.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/XmpMappingEntryUpdateManyRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Business process",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessProcess"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "xmpmapping_write"
            ]
          }
        ]
      }
    },
    "/v1/XmpMappings/many/delete": {
      "post": {
        "tags": [
          "XmpMapping"
        ],
        "summary": "Delete multiple xmp mappings",
        "description": "Deletes the xmp mappings specified by the IDs. The operation is executed asynchronously and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.",
        "operationId": "XmpMapping_DeleteMany",
        "requestBody": {
          "x-name": "request",
          "description": "The request with xmp mapping IDs to delete.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/XmpMappingEntryDeleteManyRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Business process",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessProcess"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkNotFoundException"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Version conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkConflictException"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "xmpmapping_write"
            ]
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "BusinessProcess": {
        "type": "object",
        "discriminator": {
          "propertyName": "kind",
          "mapping": {
            "BusinessProcessDetails": "#/components/schemas/BusinessProcessDetails"
          }
        },
        "description": "Business process",
        "additionalProperties": false,
        "required": [
          "id",
          "processDefinitionId",
          "kind",
          "supportsCancellation",
          "businessProcessScope",
          "lifeCycle",
          "startDate",
          "endDate",
          "finished"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the business process.",
            "minLength": 1
          },
          "processDefinitionId": {
            "type": "string",
            "description": "ID of the business process definition associated to the business process.",
            "minLength": 1
          },
          "referenceId": {
            "type": "string",
            "description": "ID of the document that is modified by the running of the business process. Used during the cancellation of the business process.",
            "nullable": true
          },
          "referenceDocType": {
            "type": "string",
            "description": "Type of the document that is modified by the running of the business process. Used during the cancellation of the business process.",
            "nullable": true
          },
          "supportsCancellation": {
            "type": "boolean",
            "description": "True if the business process execution can be cancelled. False otherwise."
          },
          "businessProcessScope": {
            "description": "Scope of the business process.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/BusinessProcessScope"
              }
            ]
          },
          "lifeCycle": {
            "description": "Current life cycle of the business process.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/BusinessProcessLifeCycle"
              }
            ]
          },
          "startDate": {
            "type": "string",
            "description": "When the business process started.",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "description": "When the business process finished.",
            "format": "date-time"
          },
          "finished": {
            "type": "boolean",
            "description": "Is the business process finished."
          },
          "stateHistory": {
            "type": "array",
            "description": "List containing the history of all the state transitions of the business process.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/BusinessProcessState"
            }
          },
          "currentState": {
            "type": "string",
            "description": "Current state of the business process.",
            "nullable": true
          },
          "lastReportedProgress": {
            "type": "string",
            "description": "Timestamp when the business process last reported progress.",
            "format": "date-time",
            "nullable": true
          },
          "continuationBusinessProcessId": {
            "type": "string",
            "description": "Id of the business process that will be automatically started after the completion of the current one, if any.",
            "nullable": true
          },
          "kind": {
            "type": "string"
          }
        }
      },
      "BusinessProcessScope": {
        "type": "string",
        "description": "Scope of the business process",
        "x-enumNames": [
          "System",
          "User"
        ],
        "enum": [
          "System",
          "User"
        ]
      },
      "BusinessProcessLifeCycle": {
        "type": "string",
        "description": "Life cycle of the business process",
        "x-enumNames": [
          "Draft",
          "InProgress",
          "Succeeded",
          "Cancelled",
          "CancellationInProgress",
          "Failed",
          "SucceededWithErrors"
        ],
        "enum": [
          "Draft",
          "InProgress",
          "Succeeded",
          "Cancelled",
          "CancellationInProgress",
          "Failed",
          "SucceededWithErrors"
        ]
      },
      "BusinessProcessState": {
        "type": "object",
        "description": "State transition information of a business process",
        "additionalProperties": false,
        "required": [
          "state",
          "timestamp"
        ],
        "properties": {
          "state": {
            "type": "string",
            "description": "State of the business process",
            "minLength": 1
          },
          "timestamp": {
            "type": "string",
            "description": "Date and time of when the state transition was performed.",
            "format": "date-time"
          },
          "error": {
            "description": "Eventual error associated to the state transition.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ErrorResponse"
              }
            ]
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "description": "Error information with serialized exception",
        "additionalProperties": false,
        "properties": {
          "exception": {
            "type": "string",
            "description": "Serialized PictureparkBusinessException.",
            "nullable": true
          },
          "traceId": {
            "type": "string",
            "description": "Trace ID.",
            "nullable": true
          },
          "traceJobId": {
            "type": "string",
            "description": "Trace job ID.",
            "nullable": true
          }
        }
      },
      "PictureparkValidationException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkBusinessException"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "PictureparkBusinessException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "customerId": {
                "type": "string",
                "nullable": true
              },
              "customerAlias": {
                "type": "string",
                "nullable": true
              },
              "userId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "PictureparkException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Exception"
          },
          {
            "type": "object",
            "discriminator": {
              "propertyName": "kind",
              "mapping": {
                "ServiceProviderDeleteException": "#/components/schemas/ServiceProviderDeleteException",
                "ServiceProviderCreateException": "#/components/schemas/ServiceProviderCreateException",
                "ServiceProviderNotFoundException": "#/components/schemas/ServiceProviderNotFoundException",
                "ElasticVersionUpdateException": "#/components/schemas/ElasticVersionUpdateException",
                "InvalidVersionException": "#/components/schemas/InvalidVersionException",
                "EnvironmentNotDeactivatedException": "#/components/schemas/EnvironmentNotDeactivatedException",
                "EnvironmentNotFoundException": "#/components/schemas/EnvironmentNotFoundException",
                "EnvironmentDeactivationException": "#/components/schemas/EnvironmentDeactivationException",
                "CustomerViolationException": "#/components/schemas/CustomerViolationException",
                "CustomerAliasNotFoundException": "#/components/schemas/CustomerAliasNotFoundException",
                "CustomerNotDeactivatedException": "#/components/schemas/CustomerNotDeactivatedException",
                "CustomerDeactivationException": "#/components/schemas/CustomerDeactivationException",
                "CustomerHostNotFoundException": "#/components/schemas/CustomerHostNotFoundException",
                "CustomerNotFoundException": "#/components/schemas/CustomerNotFoundException",
                "CustomerNotActiveException": "#/components/schemas/CustomerNotActiveException",
                "ConfigurationIndexNotFoundException": "#/components/schemas/ConfigurationIndexNotFoundException",
                "DuplicateAliasException": "#/components/schemas/DuplicateAliasException",
                "RedisDatabaseExceededException": "#/components/schemas/RedisDatabaseExceededException",
                "MaximumTransferSizeException": "#/components/schemas/MaximumTransferSizeException",
                "EnvironmentNotAvailableException": "#/components/schemas/EnvironmentNotAvailableException",
                "CustomerNotAvailableException": "#/components/schemas/CustomerNotAvailableException",
                "PictureparkBusinessException": "#/components/schemas/PictureparkBusinessException",
                "PictureparkValidationException": "#/components/schemas/PictureparkValidationException"
              }
            },
            "additionalProperties": false,
            "required": [
              "kind"
            ],
            "properties": {
              "traceLevel": {
                "$ref": "#/components/schemas/TraceLevel"
              },
              "traceId": {
                "type": "string",
                "nullable": true
              },
              "traceJobId": {
                "type": "string",
                "nullable": true
              },
              "httpStatusCode": {
                "type": "integer",
                "format": "int32"
              },
              "exceptionMessage": {
                "type": "string",
                "nullable": true
              },
              "kind": {
                "type": "string"
              }
            }
          }
        ]
      },
      "TraceLevel": {
        "type": "string",
        "description": "",
        "x-enumFlags": true,
        "x-enumNames": [
          "Critical",
          "Error",
          "Warning",
          "Information",
          "Verbose"
        ],
        "enum": [
          "Critical",
          "Error",
          "Warning",
          "Information",
          "Verbose"
        ]
      },
      "Exception": {
        "type": "object",
        "additionalProperties": false
      },
      "PictureparkConflictException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkBusinessException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "reference": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "PictureparkTimeoutException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "PictureparkForbiddenException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkBusinessException"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "UserEmailAlreadyExistsException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "email": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "UserRoleAssignedException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/UnableToDeleteUserRoleException"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "UnableToDeleteUserRoleException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "userRoleId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "UserNotFoundException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkBusinessException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "missingUserId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "UserInactiveOrDeletedException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "affectedUserId": {
                "type": "string",
                "description": "The ID of the inactive or deleted user in question.",
                "nullable": true
              }
            }
          }
        ]
      },
      "InactiveOrDeletedUserRefusedAccessException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkForbiddenException"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "TermsOfServiceNotNewestException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkBusinessException"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "IllegalAuthorizationStateTransitionException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "requestedUserId": {
                "type": "string",
                "nullable": true
              },
              "authorizationState": {
                "$ref": "#/components/schemas/AuthorizationState"
              },
              "transition": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "AuthorizationState": {
        "type": "string",
        "description": "User authorization state",
        "x-enumNames": [
          "Reviewed",
          "ToBeReviewed",
          "Invited",
          "UserTriggeredDeactivation"
        ],
        "enum": [
          "Reviewed",
          "ToBeReviewed",
          "Invited",
          "UserTriggeredDeactivation"
        ]
      },
      "TermsOfServiceConsentRequiredException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkForbiddenException"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "UserRolesNotFoundException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkNotFoundException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "userRoleIds": {
                "type": "array",
                "nullable": true,
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "PictureparkNotFoundException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkBusinessException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "reference": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "UnauthorizedException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkBusinessException"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "UserUnlockDisallowedException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "requestedUserId": {
                "type": "string",
                "nullable": true
              },
              "authorizationState": {
                "$ref": "#/components/schemas/AuthorizationState"
              }
            }
          }
        ]
      },
      "UserAlreadyInRequestedLockStateException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkBusinessException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "affectedUserId": {
                "type": "string",
                "nullable": true
              },
              "userIsLocked": {
                "type": "boolean"
              }
            }
          }
        ]
      },
      "LoginUsingIncorrectIdentityProviderException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkForbiddenException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "affectedUserId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "IdentityProviderNotFoundException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "missingIdentityProviderId": {
                "type": "string",
                "nullable": true
              },
              "external": {
                "type": "boolean"
              }
            }
          }
        ]
      },
      "UserDoesNotSupportLocalLoginException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "affectedUserId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "UserAttributeNotSynchronizableException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "attributePath": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "UnableToMapMultipleClaimTypesIntoSameAttributeException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "attributePath": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "UnableToChangeMappedUserRolesForFederatedUserException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "affectedUserId": {
                "type": "string",
                "nullable": true
              },
              "userRoleIds": {
                "type": "array",
                "nullable": true,
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "UnableToDeleteDefaultUserRoleException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/UnableToDeleteUserRoleException"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "UnableToDeleteUserRoleReferencedInIdentityProviderGroupMappingException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/UnableToDeleteUserRoleException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "identityProviderIds": {
                "type": "array",
                "nullable": true,
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "UserPropertyChangeNotSupportedException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "propertyPath": {
                "type": "string",
                "nullable": true
              },
              "affectedUserId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "RenderingException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkBusinessException"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "FormatNotApplicableForRenderingException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RenderingException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "contentRenderingType": {
                "$ref": "#/components/schemas/RenderingCategory"
              },
              "outputFormatId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "RenderingCategory": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unknown",
          "Image",
          "Document",
          "Video",
          "Audio",
          "Vector"
        ],
        "enum": [
          "Unknown",
          "Image",
          "Document",
          "Video",
          "Audio",
          "Vector"
        ]
      },
      "ServiceProviderDeleteException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "serviceProviderId": {
                "type": "string",
                "nullable": true
              },
              "detailedErrorMessage": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "ServiceProviderCreateException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "externalId": {
                "type": "string",
                "nullable": true
              },
              "detailErrorMessage": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "ServiceProviderNotFoundException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "missingServiceProviderId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "DocumentVersionNotFoundException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkNotFoundException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "documentType": {
                "type": "string",
                "nullable": true
              },
              "documentId": {
                "type": "string",
                "nullable": true
              },
              "documentVersion": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "DefaultChannelDeleteException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "ChannelsNotFoundException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkNotFoundException"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "SuperAdminRolesNotAssignableToChannelException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "ElasticVersionUpdateException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "expectedVersion": {
                "type": "string",
                "nullable": true
              },
              "actualVersion": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "InvalidVersionException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "component": {
                "type": "string",
                "nullable": true
              },
              "version": {
                "type": "string",
                "nullable": true
              },
              "expectedVersion": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "EnvironmentNotDeactivatedException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkException"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "EnvironmentNotFoundException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkException"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "EnvironmentDeactivationException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "deactivationMessage": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "CustomerClonesNotAcceptedException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "ShareNotFoundException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkNotFoundException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "shareId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "ShareByTokenNotFoundException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkNotFoundException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "token": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "TokenGenerationException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkBusinessException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "retries": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ]
      },
      "ShareExpiredException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkBusinessException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "token": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "ShareSizeLimitExceededException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "shareId": {
                "type": "string",
                "nullable": true
              },
              "limit": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ]
      },
      "OutputIdNotFoundException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkNotFoundException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "outputId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "OutputNotFoundException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkBusinessException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "contentId": {
                "type": "string",
                "nullable": true
              },
              "outputFormatId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "UnableToCreateOrModifyStaticOutputFormatException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "NotSupportedFileMappingException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "inputExtension": {
                "type": "string",
                "nullable": true
              },
              "targetFormatKind": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "NotSupportedFileMappingForDynamicFormatException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NotSupportedFileMappingException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "formatId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "NotSupportedFileExtensionException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "extension": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "DuplicateOutputFormatIdException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "OutputFormatResizingNotSupportedException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "contentId": {
                "type": "string",
                "nullable": true
              },
              "outputFormatId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "OutputBackupNotRequestedException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "DownloadLinkExpiredException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkBusinessException"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "RenderingNotAwaitedException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkBusinessException"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "LeaseNotAcquiredException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkBusinessException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "resourceId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "OperationInProgressException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkBusinessException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "leaseResourceType": {
                "$ref": "#/components/schemas/LeaseResourceType"
              }
            }
          }
        ]
      },
      "LeaseResourceType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "SchemaEditing"
        ],
        "enum": [
          "SchemaEditing"
        ]
      },
      "RetryException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkBusinessException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "retries": {
                "type": "integer",
                "format": "int32"
              },
              "innerExceptionDetail": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "OwnerTokenNotFoundException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkNotFoundException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "ownerTokenUserIds": {
                "type": "array",
                "nullable": true,
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "InvalidStateException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "resourceId": {
                "type": "string",
                "nullable": true
              },
              "state": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "PictureparkArgumentNullException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "argumentName": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "ObjectTypeMismatchException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkBusinessException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "type": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "InvalidStateTransitionException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/InvalidStateException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "transition": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "FailedToLockException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkBusinessException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "resourceId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "PictureparkOperationCanceledException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkBusinessException"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "PictureparkApplicationException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkBusinessException"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "MissingCustomerDefaultLanguageException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "customerDefaultLanguage": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "PartialOperationNotSupportedException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "ContractMismatchException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "InvalidArgumentException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "argumentName": {
                "type": "string",
                "nullable": true
              },
              "argumentValue": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "ArgumentRangeException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/InvalidArgumentException"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false,
            "properties": {
              "minAcceptableValue": {
                "type": "string",
                "nullable": true
              },
              "maxAcceptableValue": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "UnknownException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkBusinessException"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "OwnerTokenInUseException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "ownerTokenUserId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "InvalidValueFormatException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "ItemIdDuplicatedException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "RequestSizeLimitExceededException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "argumentName": {
                "type": "string",
                "nullable": true
              },
              "limit": {
                "type": "integer",
                "format": "int32"
              },
              "requestedAmount": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ]
      },
      "CustomerViolationException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "expectedCustomerId": {
                "type": "string",
                "nullable": true
              },
              "currentCustomerId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "CustomerAliasNotFoundException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "customerAlias": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "CustomerAliasInUseException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "existingCustomerId": {
                "type": "string",
                "nullable": true
              },
              "alias": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "CustomerNotDeactivatedException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "customerId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "CustomerDeactivationException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "customerId": {
                "type": "string",
                "nullable": true
              },
              "deactivationMessage": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "CustomerHostNotFoundException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "hostName": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "CustomerNotFoundException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "customerId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "CustomerNotActiveException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "customerId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "CustomerBoostValuesInvalidException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "SnapshotRetentionTimeTooShortException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "snapshotRetentionTime": {
                "type": "string",
                "format": "time-span"
              },
              "minimumRetentionTime": {
                "type": "string",
                "format": "time-span"
              }
            }
          }
        ]
      },
      "ReshardIndexNotAllowedException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "ReshardNumberOfShardsInvalidException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "ReshardNumberOfRoutingShardsInvalidException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ReshardNumberOfShardsInvalidException"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "ReshardNumberOfShardsInvalidForExistingRoutingShardsException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ReshardNumberOfShardsInvalidException"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "ConfigurationIndexNotFoundException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "configurationIndex": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "DuplicateSearchIndexDocException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkBusinessException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "searchIndexDocId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "SearchIndexDocNotFoundException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkBusinessException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "searchIndexDocId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "IndexDocumentNotFoundException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkBusinessException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "indexId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "DuplicateAliasException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "indexAlias": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "SearchIndexNotFoundException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkBusinessException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "searchIndexId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "DefaultSearchIndexDeleteException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkBusinessException"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "SearchIndexInUseException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkBusinessException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "searchIndex": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "IndexException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkBusinessException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "indexName": {
                "type": "string",
                "nullable": true
              },
              "debugInformation": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "IndexMappingException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkBusinessException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "indexName": {
                "type": "string",
                "nullable": true
              },
              "debugInformation": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "DuplicatedSearchBehaviorException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "duplicatedSearchBehaviors": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "SearchStringLeadingWildcardException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "DuplicateAggregatorException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "aggregatorName": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "InvalidDateTimeFormatException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "value": {
                "type": "string",
                "nullable": true
              },
              "expectedFormat": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "InvalidSortFieldException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "fieldName": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "DocumentVersionConflictException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkConflictException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "documentId": {
                "type": "string",
                "nullable": true
              },
              "documentType": {
                "type": "string",
                "nullable": true
              },
              "documentVersion": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ]
      },
      "RedisDatabaseExceededException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "customerId": {
                "type": "string",
                "nullable": true
              },
              "customerCount": {
                "type": "integer",
                "format": "int32"
              },
              "maxCount": {
                "type": "integer",
                "format": "int32"
              },
              "startIndex": {
                "type": "integer",
                "format": "int32"
              },
              "redisDatabaseCount": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ]
      },
      "DuplicateDocumentException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "documentId": {
                "type": "string",
                "nullable": true
              },
              "documentType": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "ObjectStoreResponseException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkBusinessException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "rowErrorMessages": {
                "type": "string",
                "nullable": true
              },
              "message": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "ObjectStoreException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkBusinessException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "rowErrorMessages": {
                "type": "string",
                "nullable": true
              },
              "errorMessage": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "QueryException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkBusinessException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "debugInformation": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "PermissionOwnershipTransferException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "transferUserId": {
                "type": "string",
                "nullable": true
              },
              "missingUserRight": {
                "$ref": "#/components/schemas/UserRight"
              }
            }
          }
        ]
      },
      "UserRight": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "ManageContent",
          "ManageSharings",
          "ManageTransfer",
          "ManageChannels",
          "ManageSchemas",
          "ManageUsers",
          "ManageUserRoles",
          "ManagePermissions",
          "ManageSearchIndexes",
          "ManageCollections",
          "ManageListItems",
          "ManageServiceProviders",
          "ManageEmbeds",
          "ManageTemplates",
          "ManageTermsOfService",
          "ManageLiveStream",
          "ManageDocumentHistory",
          "ManageAllShares",
          "ManageOutputFormats",
          "ManageBusinessProcesses",
          "ManageIdentityProviders",
          "ManageXmpMappings"
        ],
        "enum": [
          "ManageContent",
          "ManageSharings",
          "ManageTransfer",
          "ManageChannels",
          "ManageSchemas",
          "ManageUsers",
          "ManageUserRoles",
          "ManagePermissions",
          "ManageSearchIndexes",
          "ManageCollections",
          "ManageListItems",
          "ManageServiceProviders",
          "ManageEmbeds",
          "ManageTemplates",
          "ManageTermsOfService",
          "ManageLiveStream",
          "ManageDocumentHistory",
          "ManageAllShares",
          "ManageOutputFormats",
          "ManageBusinessProcesses",
          "ManageIdentityProviders",
          "ManageXmpMappings"
        ]
      },
      "PermissionSetNotFoundException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkNotFoundException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "permissionSetIds": {
                "type": "array",
                "nullable": true,
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "PermissionSetAggregateException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "exceptions": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        ]
      },
      "DuplicateRightException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "permissionSetId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "PermissionValidationException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "permission": {
                "type": "string",
                "nullable": true
              },
              "operation": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "PermissionSetInUseException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "reference": {
                "type": "string",
                "nullable": true
              },
              "referenceCount": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ]
      },
      "ContentPermissionException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "contentId": {
                "type": "string",
                "nullable": true
              },
              "contentRights": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/ContentRight"
                }
              }
            }
          }
        ]
      },
      "ContentRight": {
        "type": "string",
        "description": "Content rights",
        "x-enumNames": [
          "View",
          "AccessOriginal",
          "EditMetadata",
          "EditContent",
          "ManagePermissions",
          "Delete"
        ],
        "enum": [
          "View",
          "AccessOriginal",
          "EditMetadata",
          "EditContent",
          "ManagePermissions",
          "Delete"
        ]
      },
      "ListItemPermissionException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "listItemId": {
                "type": "string",
                "nullable": true
              },
              "metadataRight": {
                "$ref": "#/components/schemas/MetadataRight"
              }
            }
          }
        ]
      },
      "MetadataRight": {
        "type": "string",
        "description": "Metadata rights",
        "x-enumNames": [
          "View",
          "ManageItems",
          "ManageSchema"
        ],
        "enum": [
          "View",
          "ManageItems",
          "ManageSchema"
        ]
      },
      "SchemaPermissionException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "schemaId": {
                "type": "string",
                "nullable": true
              },
              "metadataRight": {
                "$ref": "#/components/schemas/MetadataRight"
              }
            }
          }
        ]
      },
      "PermissionSetInvalidRightCombinationException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PermissionSetValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "PermissionSetValidationException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "description": "This exception is an abstract base for permission set validation.",
            "additionalProperties": false,
            "properties": {
              "permissionSetId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "AmbiguousUserRoleRightsException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PermissionSetValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "UnsupportedListItemChangeCommandException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "commandType": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "ListItemLayerException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "listItemId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "ListItemNotFoundException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkNotFoundException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "listItemIds": {
                "type": "array",
                "nullable": true,
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "ListItemCyclicDependencyException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkBusinessException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "listItemIds": {
                "type": "array",
                "nullable": true,
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "DeleteListItemsWithReferencesException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "numberOfReferences": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ]
      },
      "ListItemUpdateManyException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkBusinessException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "failedItemsCount": {
                "type": "integer",
                "format": "int32"
              },
              "totalItemsCount": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ]
      },
      "ListItemSchemaMismatchException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "listItemId": {
                "type": "string",
                "nullable": true
              },
              "listItemSchemaId": {
                "type": "string",
                "nullable": true
              },
              "fieldSchemaId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "TransferInfoNotFoundException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkNotFoundException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "transferInfoId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "FileTransferNotFoundException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkNotFoundException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "fileTransferId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "InvalidTransferTypeException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkBusinessException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "transferType": {
                "$ref": "#/components/schemas/TransferType"
              }
            }
          }
        ]
      },
      "TransferType": {
        "type": "string",
        "description": "Type of the transfer",
        "x-enumNames": [
          "FileUpload",
          "FileUploadAutoImport",
          "WebDownload",
          "SchemaImport"
        ],
        "enum": [
          "FileUpload",
          "FileUploadAutoImport",
          "WebDownload",
          "SchemaImport"
        ]
      },
      "TransferNotFoundException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkNotFoundException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "transferId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "WrongChunkSizeException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "actual": {
                "type": "integer",
                "format": "int64"
              },
              "expected": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ]
      },
      "ChunkSizeOutOfRangeException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "actual": {
                "type": "integer",
                "format": "int64"
              },
              "minimum": {
                "type": "integer",
                "format": "int64"
              },
              "maximum": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ]
      },
      "MaximumTransferSizeException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "transferSize": {
                "type": "integer",
                "format": "int32"
              },
              "maximumTransferSize": {
                "type": "integer",
                "format": "int32"
              },
              "transferId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "FileIdDuplicatedException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "fileId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "MissingDependenciesException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "itemIds": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "RelationSelfReferencingException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "itemId": {
                "type": "string",
                "nullable": true
              },
              "itemType": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "InvalidChangeCommandFieldTypeInvalidException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "commandType": {
                "type": "string",
                "nullable": true
              },
              "fieldId": {
                "type": "string",
                "nullable": true
              },
              "schemaId": {
                "type": "string",
                "nullable": true
              },
              "fieldActualType": {
                "type": "string",
                "nullable": true
              },
              "fieldExpectedType": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "InvalidChangeCommandFieldNotFoundException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "commandTypeName": {
                "type": "string",
                "nullable": true
              },
              "fieldId": {
                "type": "string",
                "nullable": true
              },
              "schemaId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "InvalidChangeCommandSchemaChangeInvalidException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "commandTypeName": {
                "type": "string",
                "nullable": true
              },
              "schemaId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "InvalidMetadataException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "metadataErrors": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/MetadataError"
                }
              },
              "validationErrors": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/PictureparkBusinessException"
                }
              }
            }
          }
        ]
      },
      "MetadataError": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "lineNumber",
          "linePosition"
        ],
        "properties": {
          "errorType": {
            "type": "string",
            "nullable": true
          },
          "lineNumber": {
            "type": "integer",
            "format": "int32"
          },
          "linePosition": {
            "type": "integer",
            "format": "int32"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "schemaId": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "RelationNotFoundException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkBusinessException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "relationId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "RelationTypeNotFoundException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkBusinessException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "relationType": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "RelationTypeTargetDocTypeMismatchException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkBusinessException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "relationType": {
                "type": "string",
                "nullable": true
              },
              "targetDocType": {
                "type": "string",
                "nullable": true
              },
              "expectedTargetDocType": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "AggregationNameInvalidException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "aggregationName": {
                "type": "string",
                "nullable": true
              },
              "aggregationPrefix": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "AggregationSizeInvalidException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "description": "Size of the aggregation is invalid.",
            "additionalProperties": false,
            "properties": {
              "aggregationName": {
                "type": "string",
                "description": "The name identifying the aggregation.",
                "nullable": true
              },
              "aggregationSize": {
                "type": "integer",
                "description": "The invalid size of the aggregation: size must be equal or greater than 1.",
                "format": "int32"
              }
            }
          }
        ]
      },
      "AggregationFilterNotSupportedException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "aggregationName": {
                "type": "string",
                "nullable": true
              },
              "notSupportedFilterType": {
                "type": "string",
                "nullable": true
              },
              "supportedFilterTypes": {
                "type": "array",
                "nullable": true,
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "RelationTypeMissingException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkBusinessException"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "ReferencesUpdateException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkBusinessException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "exceptions": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/ReferenceUpdateException"
                }
              }
            }
          }
        ]
      },
      "ReferenceUpdateException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkBusinessException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "referenceItemId": {
                "type": "string",
                "description": "This is the source of the reference.",
                "nullable": true
              },
              "referenceType": {
                "type": "string",
                "description": "This is the DocType of the source of the reference.",
                "nullable": true
              },
              "exceptions": {
                "type": "array",
                "description": "These exceptions describe why the source metadata item could not be updated.",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/PictureparkException"
                }
              }
            }
          }
        ]
      },
      "DuplicatedItemAssignedException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "itemId": {
                "type": "string",
                "nullable": true
              },
              "itemPath": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "InvalidDataTypeException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "value": {
                "nullable": true
              }
            }
          }
        ]
      },
      "LayerAssignmentInvalidException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "layerId": {
                "type": "string",
                "nullable": true
              },
              "value": {
                "nullable": true
              }
            }
          }
        ]
      },
      "OutdatedMetadataUpdateInProgressException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "SchemaFieldOverwriteTypeMismatchException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "schemaId": {
                "type": "string",
                "nullable": true
              },
              "fieldId": {
                "type": "string",
                "nullable": true
              },
              "fieldOverwriteType": {
                "type": "string",
                "nullable": true
              },
              "fieldType": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "SchemaFieldOverwriteIdException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "schemaId": {
                "type": "string",
                "nullable": true
              },
              "fieldId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "SchemaFieldIdDuplicatedException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "schemaId": {
                "type": "string",
                "nullable": true
              },
              "fieldId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "SchemaFieldIdPreviouslyUsedException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "schemaId": {
                "type": "string",
                "nullable": true
              },
              "fieldId": {
                "type": "string",
                "nullable": true
              },
              "usedInSchemaId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "SchemaFieldIdAlreadyExistsInSchemaHierarchyException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "schemaId": {
                "type": "string",
                "nullable": true
              },
              "fieldId": {
                "type": "string",
                "nullable": true
              },
              "existingInSchemaId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "SchemaFieldSchemaIndexInfoSimpleSearchNestingException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "schemaId": {
                "type": "string",
                "nullable": true
              },
              "fieldId": {
                "type": "string",
                "nullable": true
              },
              "relatedFieldId": {
                "type": "string",
                "nullable": true
              },
              "relatedOuterFieldId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "SchemaFieldSchemaIndexInfoNestingException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "schemaId": {
                "type": "string",
                "nullable": true
              },
              "fieldId": {
                "type": "string",
                "nullable": true
              },
              "relatedFieldId": {
                "type": "string",
                "nullable": true
              },
              "relatedOuterFieldId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "SchemaFieldIdUppercaseException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "schemaId": {
                "type": "string",
                "nullable": true
              },
              "fieldId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "SchemaIdLowercaseException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "schemaId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "SchemaInfoNotFoundException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkNotFoundException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "schemaId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "IndexedFieldThresholdExceededException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "schemaIds": {
                "type": "array",
                "nullable": true,
                "items": {
                  "type": "string"
                }
              },
              "indexedFieldCount": {
                "type": "number",
                "format": "double"
              },
              "indexedFieldThreshold": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ]
      },
      "SortableFieldThresholdExceededException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "schemaIds": {
                "type": "array",
                "nullable": true,
                "items": {
                  "type": "string"
                }
              },
              "sortableFieldCount": {
                "type": "number",
                "format": "double"
              },
              "sortableFieldThreshold": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ]
      },
      "DuplicateSchemaInfoException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkBusinessException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "schemaId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "SchemaFieldNumberRangeException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "fieldId": {
                "type": "string",
                "nullable": true
              },
              "propertyName": {
                "type": "string",
                "nullable": true
              },
              "minValue": {
                "type": "number",
                "format": "decimal"
              },
              "maxValue": {
                "type": "number",
                "format": "decimal"
              }
            }
          }
        ]
      },
      "SchemaInUseContentSchemaException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "schemaId": {
                "type": "string",
                "nullable": true
              },
              "contentSchemaIds": {
                "type": "array",
                "nullable": true,
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "LayerAssignmentInUseWithContentsException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "schemaId": {
                "type": "string",
                "nullable": true
              },
              "usedAssignmentSchemaIds": {
                "type": "array",
                "nullable": true,
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "SchemaInUseListItemException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "schemaId": {
                "type": "string",
                "nullable": true
              },
              "listItemCount": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ]
      },
      "SchemaInUseContentException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "schemaId": {
                "type": "string",
                "nullable": true
              },
              "contentCount": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ]
      },
      "SchemaInUseFieldException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "schemaId": {
                "type": "string",
                "nullable": true
              },
              "fieldNamespaces": {
                "type": "array",
                "nullable": true,
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "DuplicateMetadataDisplayPatternException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "schemaId": {
                "type": "string",
                "nullable": true
              },
              "displayPatternId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "DuplicateSchemaException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "schemaId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "SchemaImportEmptyException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "SchemaImportVersionMismatchException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "providedVersion": {
                "type": "string",
                "nullable": true
              },
              "expectedVersion": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "SchemaInheritanceFieldIndexDeviationException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "schemaId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "SchemaInheritanceTypeDeviationException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "schemaId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "SchemaValidationException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "schemaId": {
                "type": "string",
                "nullable": true
              },
              "exceptions": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/PictureparkBusinessException"
                }
              }
            }
          }
        ]
      },
      "SchemaSortFieldException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "schemaId": {
                "type": "string",
                "nullable": true
              },
              "fieldId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "SchemaFieldIdException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "schemaId": {
                "type": "string",
                "nullable": true
              },
              "fieldId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "SchemaFieldTypeChangeException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "schemaId": {
                "type": "string",
                "nullable": true
              },
              "fieldId": {
                "type": "string",
                "nullable": true
              },
              "oldTypeName": {
                "type": "string",
                "nullable": true
              },
              "newTypeName": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "SchemaFieldIndexException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "schemaId": {
                "type": "string",
                "nullable": true
              },
              "fieldId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "SchemaFieldNotSortableException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "fieldId": {
                "type": "string",
                "nullable": true
              },
              "schemaId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "SchemaFieldNotSearchableException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "fieldId": {
                "type": "string",
                "nullable": true
              },
              "schemaId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "SchemaFieldInvalidBoostException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "fieldId": {
                "type": "string",
                "nullable": true
              },
              "schemaId": {
                "type": "string",
                "nullable": true
              },
              "boost": {
                "type": "number",
                "format": "double"
              },
              "allowedBoostValues": {
                "type": "array",
                "nullable": true,
                "items": {
                  "type": "number",
                  "format": "double"
                }
              }
            }
          }
        ]
      },
      "SchemaFieldSortableInUseException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "fieldId": {
                "type": "string",
                "nullable": true
              },
              "schemaId": {
                "type": "string",
                "nullable": true
              },
              "channelIds": {
                "type": "array",
                "nullable": true,
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "SchemaNoContentException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "schemaId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "SchemaParentChangeException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "schemaId": {
                "type": "string",
                "nullable": true
              },
              "oldSchemaParentId": {
                "type": "string",
                "nullable": true
              },
              "newSchemaParentId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "SchemaMissingTypeException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "schemaId": {
                "type": "string",
                "nullable": true
              },
              "expectedSchemaTypes": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/SchemaType"
                }
              }
            }
          }
        ]
      },
      "SchemaType": {
        "type": "string",
        "description": "Type of the schema",
        "x-enumNames": [
          "Content",
          "Layer",
          "List",
          "Struct"
        ],
        "enum": [
          "Content",
          "Layer",
          "List",
          "Struct"
        ]
      },
      "SchemaPermissionConfigurationException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "schemaId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "SchemaNoLayerException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "schemaId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "SchemaIdException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "schemaId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "SchemaInUseException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "schemaId": {
                "type": "string",
                "nullable": true
              },
              "exceptions": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/PictureparkBusinessException"
                }
              }
            }
          }
        ]
      },
      "SchemaNotFoundException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkNotFoundException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "schemaId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "SchemaCountLimitReachedException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkBusinessException"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "SystemSchemaInvalidModificationException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "schemaId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "SchemaFieldRelationSchemaSystemSchemaException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "schemaId": {
                "type": "string",
                "nullable": true
              },
              "fieldId": {
                "type": "string",
                "nullable": true
              },
              "relationSchemaId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "SchemaFieldRelationSchemaTypeUnsupportedException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "schemaId": {
                "type": "string",
                "nullable": true
              },
              "fieldId": {
                "type": "string",
                "nullable": true
              },
              "relationSchemaId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "SchemaMultipleTypesException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "schemaId": {
                "type": "string",
                "nullable": true
              },
              "schemaTypes": {
                "type": "array",
                "nullable": true,
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "MissingDisplayPatternForCustomerDefaultLanguageException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "schemaId": {
                "type": "string",
                "nullable": true
              },
              "missingTypes": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/DisplayPatternType"
                }
              }
            }
          }
        ]
      },
      "DisplayPatternType": {
        "type": "string",
        "description": "The display pattern type",
        "x-enumNames": [
          "Thumbnail",
          "List",
          "Detail",
          "Name",
          "DownloadFileName"
        ],
        "enum": [
          "Thumbnail",
          "List",
          "Detail",
          "Name",
          "DownloadFileName"
        ]
      },
      "SchemaViewForAllException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "schemaId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "SystemLayerReferenceInvalidModificationException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "schemaId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "SchemaFieldAnalyzerInvalidException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "fieldId": {
                "type": "string",
                "nullable": true
              },
              "schemaId": {
                "type": "string",
                "nullable": true
              },
              "analyzers": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/Analyzer"
                }
              },
              "allowedAnalyzers": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/Analyzer"
                }
              }
            }
          }
        ]
      },
      "Analyzer": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "None",
          "Simple",
          "Language",
          "PathHierarchy",
          "EdgeNGram",
          "NGram"
        ],
        "enum": [
          "None",
          "Simple",
          "Language",
          "PathHierarchy",
          "EdgeNGram",
          "NGram"
        ]
      },
      "SchemaFieldRelationMultipleTypesException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "schemaId": {
                "type": "string",
                "nullable": true
              },
              "fieldId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "SchemaFieldNotRequirableException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "fieldId": {
                "type": "string",
                "nullable": true
              },
              "schemaId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "DisplayPatternTypeNotSupportedException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "schemaId": {
                "type": "string",
                "nullable": true
              },
              "displayPatternId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "SchemaFieldActivityInUseException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "fieldId": {
                "type": "string",
                "nullable": true
              },
              "schemaId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "SchemaFieldReferencedSchemaChangeNotAllowedException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "schemaId": {
                "type": "string",
                "nullable": true
              },
              "fieldId": {
                "type": "string",
                "nullable": true
              },
              "oldReferencedSchemaId": {
                "type": "string",
                "nullable": true
              },
              "newReferencedSchemaId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "SchemaFieldReferencedSchemaSystemSchemaException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "schemaId": {
                "type": "string",
                "nullable": true
              },
              "fieldId": {
                "type": "string",
                "nullable": true
              },
              "referencedSchemaId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "SchemaFieldRelationRelationTypeIdModificationNotAllowedException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "schemaId": {
                "type": "string",
                "nullable": true
              },
              "fieldId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "SchemaFieldRelationTargetDocTypeModificationNotAllowedException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "schemaId": {
                "type": "string",
                "nullable": true
              },
              "fieldId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "DeleteContentsWithReferencesException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "numberOfReferences": {
                "type": "integer",
                "format": "int64"
              },
              "numberOfShares": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ]
      },
      "ContentMetadataUpdateManyException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkBusinessException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "failedItemsCount": {
                "type": "integer",
                "format": "int32"
              },
              "totalItemsCount": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ]
      },
      "ContentNotFoundException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkNotFoundException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "contentIds": {
                "type": "array",
                "nullable": true,
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "ContentLayerInvalidException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "contentId": {
                "type": "string",
                "nullable": true
              },
              "layerIds": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "ContentFileReplaceTypeMismatchException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "contentId": {
                "type": "string",
                "nullable": true
              },
              "originalContentType": {
                "$ref": "#/components/schemas/ContentType"
              },
              "newContentType": {
                "$ref": "#/components/schemas/ContentType"
              }
            }
          }
        ]
      },
      "ContentType": {
        "type": "string",
        "description": "Content types",
        "x-enumNames": [
          "Unknown",
          "Bitmap",
          "VectorGraphic",
          "RawImage",
          "InterchangeDocument",
          "WordProcessingDocument",
          "TextDocument",
          "DesktopPublishingDocument",
          "Presentation",
          "Spreadsheet",
          "Archive",
          "Audio",
          "Video",
          "Font",
          "Multimedia",
          "Application",
          "SourceCode",
          "Database",
          "Cad",
          "Model3d",
          "Virtual"
        ],
        "enum": [
          "Unknown",
          "Bitmap",
          "VectorGraphic",
          "RawImage",
          "InterchangeDocument",
          "WordProcessingDocument",
          "TextDocument",
          "DesktopPublishingDocument",
          "Presentation",
          "Spreadsheet",
          "Archive",
          "Audio",
          "Video",
          "Font",
          "Multimedia",
          "Application",
          "SourceCode",
          "Database",
          "Cad",
          "Model3d",
          "Virtual"
        ]
      },
      "ContentBackupFailedException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkBusinessException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "contentId": {
                "type": "string",
                "nullable": true
              },
              "outputFormatId": {
                "type": "string",
                "nullable": true
              },
              "outputId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "ContentLayerSameRootException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "contentId": {
                "type": "string",
                "nullable": true
              },
              "layerIdsByRootSchema": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/LayerIdsByRootSchema"
                }
              }
            }
          }
        ]
      },
      "LayerIdsByRootSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "rootSchemaId": {
            "type": "string",
            "nullable": true
          },
          "layerSchemaIds": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "BusinessProcessEngineRequestException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkBusinessException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "businessProcessId": {
                "type": "string",
                "nullable": true
              },
              "engineError": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "BusinessProcessNotFoundException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkNotFoundException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "businessProcessId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "BusinessProcessDefinitionNotFoundException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkNotFoundException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "processDefinitionId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "BusinessProcessDefinitionCreateException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkBusinessException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "processDefinitionIds": {
                "type": "array",
                "nullable": true,
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "BusinessProcessNotExternalException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkForbiddenException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "businessProcessId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "BusinessProcessCancellationNotSupportedException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "businessProcessId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "BusinessProcessContinuationException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkBusinessException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "continuationBusinessProcessId": {
                "type": "string",
                "nullable": true
              },
              "precedingBusinessProcessId": {
                "type": "string",
                "nullable": true
              },
              "precedingBusinessProcessException": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/PictureparkException"
                  }
                ]
              }
            }
          }
        ]
      },
      "SchemaFieldImportMismatchException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "schemaId": {
                "type": "string",
                "nullable": true
              },
              "importingFieldIds": {
                "type": "string",
                "nullable": true
              },
              "existingFieldIds": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "SchemaFieldImportRelatedSchemaMismatchException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "schemaId": {
                "type": "string",
                "nullable": true
              },
              "fieldId": {
                "type": "string",
                "nullable": true
              },
              "importingRelatedSchemaId": {
                "type": "string",
                "nullable": true
              },
              "existingRelatedSchemaId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "SchemaFieldImportTypeMismatchException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "schemaId": {
                "type": "string",
                "nullable": true
              },
              "fieldId": {
                "type": "string",
                "nullable": true
              },
              "importingFieldType": {
                "type": "string",
                "nullable": true
              },
              "existingFieldType": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "SchemaFieldNotSupportedException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "fieldId": {
                "type": "string",
                "nullable": true
              },
              "schemaId": {
                "type": "string",
                "nullable": true
              },
              "fieldType": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "SchemaFieldDisplayPatternTypeNotSupportedException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "fieldId": {
                "type": "string",
                "nullable": true
              },
              "displayPatternType": {
                "$ref": "#/components/schemas/DisplayPatternType"
              },
              "supportedDisplayPatternTypes": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/DisplayPatternType"
                }
              }
            }
          }
        ]
      },
      "SnapshotTimeoutException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkTimeoutException"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "SnapshotFailedException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkBusinessException"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "SnapshotSkippedException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkBusinessException"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "AddMetadataLanguageTimeoutException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkTimeoutException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "environmentProcessId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "EnvironmentProcessAlreadyRunningException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "environmentProcessType": {
                "$ref": "#/components/schemas/EnvironmentProcessType"
              }
            }
          }
        ]
      },
      "EnvironmentProcessType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "AddMetadataLanguage",
          "CustomerUpdate",
          "EnvironmentUpdate",
          "CustomerBoostValuesUpdate",
          "CustomerReshard"
        ],
        "enum": [
          "AddMetadataLanguage",
          "CustomerUpdate",
          "EnvironmentUpdate",
          "CustomerBoostValuesUpdate",
          "CustomerReshard"
        ]
      },
      "EnvironmentProcessNotFoundException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkNotFoundException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "environmentProcessId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "EnvironmentProcessWaitTimeoutException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkTimeoutException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "environmentProcessId": {
                "type": "string",
                "nullable": true
              },
              "waitedLifecycles": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "CustomerBoostValuesUpdateTimeoutException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkTimeoutException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "environmentProcessId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "NoTermsOfServiceDefinedException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkBusinessException"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "AtLeastOneActiveTermsOfServiceMustExistException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "ForbiddenHtmlElementsUsedException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "BusinessProcessStateNotHitException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkTimeoutException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "businessProcessId": {
                "type": "string",
                "nullable": true
              },
              "expected": {
                "type": "array",
                "nullable": true,
                "items": {
                  "type": "string"
                }
              },
              "actual": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "BusinessProcessLifeCycleNotHitException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkTimeoutException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "businessProcessId": {
                "type": "string",
                "nullable": true
              },
              "expected": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/BusinessProcessLifeCycle"
                }
              },
              "actual": {
                "$ref": "#/components/schemas/BusinessProcessLifeCycle"
              }
            }
          }
        ]
      },
      "OnlyAccessibleToRecipientException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "EnvironmentNotAvailableException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkException"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "CustomerNotAvailableException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "customerId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "CustomerAliasHeaderMissingException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "BusinessRuleActionInvalidDocumentTypeException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "allowedDocumentTypes": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/BusinessRuleTriggerDocType"
                }
              }
            }
          }
        ]
      },
      "BusinessRuleTriggerDocType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Content"
        ],
        "enum": [
          "Content"
        ]
      },
      "BusinessRuleActionInvalidExecutionScopeException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "allowedScopes": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/BusinessRuleExecutionScope"
                }
              }
            }
          }
        ]
      },
      "BusinessRuleExecutionScope": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "MainDoc",
          "SearchDoc"
        ],
        "enum": [
          "MainDoc",
          "SearchDoc"
        ]
      },
      "BusinessRuleActionsMissingException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "BusinessRuleConditionMissingException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "BusinessRuleConditionsMissingException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "BusinessRuleConfigurationValidationException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "innerExceptions": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          }
        ]
      },
      "BusinessRuleSchemaIdInvalidException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "schemaId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "BusinessRulePermissionSetIdInvalidException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "permissionSetId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "BusinessRuleRuleIdDuplicationException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "BusinessRuleRuleIdMissingException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "BusinessRuleTriggerPointMissingException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "BusinessRuleValidationException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "ruleId": {
                "type": "string",
                "nullable": true
              },
              "innerExceptions": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          }
        ]
      },
      "BusinessRuleConditionInvalidTriggerPointDocumentTypeException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "allowedDocumentTypes": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/BusinessRuleTriggerDocType"
                }
              }
            }
          }
        ]
      },
      "BusinessRuleRegularExpressionInvalidException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "regex": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "BusinessRuleConditionInvalidTriggerPointActionException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "allowedActions": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/BusinessRuleTriggerAction"
                }
              }
            }
          }
        ]
      },
      "BusinessRuleTriggerAction": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Create",
          "Update",
          "FileReplacement"
        ],
        "enum": [
          "Create",
          "Update",
          "FileReplacement"
        ]
      },
      "BusinessRuleRefIdsMissingException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "BusinessRulePathInvalidException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "path": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "BusinessRuleFieldIdInvalidException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "fieldId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "BusinessRuleContentPermissionSetIdsMissingException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "BusinessRuleFieldPathInvalidException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "fieldPath": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "BusinessRulePolygonInvalidException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "BusinessRuleArrayIndexInvalidException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "index": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "BusinessRuleDictionaryKeyInvalidException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "key": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "BusinessRuleProjectionTransformationsMissingException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "BusinessRuleInvalidVariableNameException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "name": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "BusinessRuleTransformationGroupTransformationsMissingException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "BusinessRuleTransformationGroupInputsMissingException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "BusinessRuleNamedCacheNameInvalidException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "cacheName": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "BusinessRuleNGramTransformationSizeInvalidException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "size": {
                "type": "integer",
                "format": "int32"
              },
              "minSize": {
                "type": "integer",
                "format": "int32"
              },
              "maxSize": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ]
      },
      "BusinessRuleNGramTransformationMinWordLengthInvalidException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "minWordLength": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ]
      },
      "BusinessRuleNGramTransformationMaxWordLengthInvalidException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "maxWordLength": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ]
      },
      "NamedCacheConfigurationException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "innerExceptions": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/PictureparkValidationException"
                }
              }
            }
          }
        ]
      },
      "NamedCacheNameMissingException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "NamedCacheNameDuplicationException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "name": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "ListItemNamedCacheSchemaIdInvalidException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "schemaId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "ListItemNamedCacheKeyFieldsInvalidException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "SchemaTagboxFilterLookupNamedCacheSchemaIdInvalidException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "schemaId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "NoTagsFoundException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkBusinessException"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "OutputNotAvailableException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkBusinessException"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "ModelNotFoundException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkNotFoundException"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "DisplayValueRerenderingInProgressException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "OutputFormatNotFoundException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkNotFoundException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "outputFormatId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "OutputFormatSourceNotDefinedException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "outputFormatId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "OutputFormatRetentionTimeOutOfRangeException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ArgumentRangeException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "outputFormatId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "NotSupportedFileExtensionForFormatException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NotSupportedFileExtensionException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "formatKind": {
                "type": "string",
                "nullable": true
              },
              "outputFormatId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "OutputFormatXmpWritebackNotSupportedException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "outputFormatId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "CollectionSizeLimitExceededException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "collectionId": {
                "type": "string",
                "nullable": true
              },
              "limit": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ]
      },
      "XmpMappingFieldNotSupported": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "fieldPath": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "XmpMappingFieldNotFoundException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "fieldPath": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "XmpMappingSchemaNotAvailableForFileContentSchemaException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "schemaId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "XmpMappingFieldToLayerWithRequiredFieldsNotAllowedException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "layerId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "XmpMappingFieldInUseException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "schemaId": {
                "type": "string",
                "nullable": true
              },
              "fieldId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "XmpMappingConfigurationInvalidException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "fieldPath": {
                "type": "string",
                "nullable": true
              },
              "expectedConfiguration": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "ActivityMappingInvalidException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PictureparkValidationException"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "activityMapping": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "ProblemDetails": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          },
          "extensions": {
            "type": "object",
            "nullable": true,
            "additionalProperties": {}
          }
        }
      },
      "BusinessProcessCreateRequest": {
        "type": "object",
        "description": "Create request to create a BusinessProcess.",
        "additionalProperties": false,
        "required": [
          "initialState",
          "supportsCancellation"
        ],
        "properties": {
          "supportsCancellation": {
            "type": "boolean",
            "description": "Indicates if the system starting the business process supports cancellation."
          },
          "notification": {
            "description": "Notification data to send to the user when creating the business process.\nSet to null to not create a notification.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/BusinessProcessNotificationUpdate"
              }
            ]
          },
          "initialState": {
            "type": "string",
            "description": "Initial state of the business process.",
            "minLength": 1
          }
        }
      },
      "BusinessProcessNotificationUpdate": {
        "type": "object",
        "description": "Notification update for a business process.",
        "additionalProperties": false,
        "required": [
          "title",
          "message",
          "eventType"
        ],
        "properties": {
          "title": {
            "description": "The title the message that is shown to the user should have.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/TranslatedStringDictionary"
              }
            ]
          },
          "message": {
            "description": "The message shown to the user.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/TranslatedStringDictionary"
              }
            ]
          },
          "navigationLink": {
            "type": "string",
            "description": "An optional navigation link that allows the user to jump to a page giving more information\nabout the process.",
            "nullable": true
          },
          "eventType": {
            "description": "The event type of the notification.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/NotificationEventType"
              }
            ]
          }
        }
      },
      "TranslatedStringDictionary": {
        "type": "object",
        "description": "A custom dictionary type to distinguish language specific class properties.",
        "additionalProperties": {
          "type": "string"
        }
      },
      "NotificationEventType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Pending",
          "InProgress",
          "Success",
          "Error",
          "Warning",
          "Information"
        ],
        "enum": [
          "Pending",
          "InProgress",
          "Success",
          "Error",
          "Warning",
          "Information"
        ]
      },
      "BusinessProcessStateChangeRequest": {
        "type": "object",
        "description": "Transitions the business process to a new state and/or life cycle.",
        "additionalProperties": false,
        "required": [
          "state",
          "lifeCycle"
        ],
        "properties": {
          "state": {
            "type": "string",
            "description": "The new state of the business process.",
            "minLength": 1
          },
          "lifeCycle": {
            "description": "The new life cycle of the business process.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/BusinessProcessLifeCycle"
              }
            ]
          },
          "notification": {
            "description": "An optional notification update to be posted together with the transition.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/BusinessProcessNotificationUpdate"
              }
            ]
          }
        }
      },
      "BusinessProcessNotificationUpdateRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessProcessNotificationUpdate"
          },
          {
            "type": "object",
            "description": "Updates the notification of a business process without changing the state or the life cycle.",
            "additionalProperties": false
          }
        ]
      },
      "BusinessProcessWaitForStateResult": {
        "type": "object",
        "description": "Result from waiting for state(s) on a business process",
        "additionalProperties": false,
        "required": [
          "businessProcess"
        ],
        "properties": {
          "stateHit": {
            "type": "string",
            "description": "The state that was hit.",
            "nullable": true
          },
          "businessProcess": {
            "description": "The business process.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/BusinessProcess"
              }
            ]
          }
        }
      },
      "BusinessProcessWaitForLifeCycleResult": {
        "type": "object",
        "description": "Result from waiting for life cycle(s) on a business process",
        "additionalProperties": false,
        "required": [
          "businessProcess"
        ],
        "properties": {
          "lifeCycleHit": {
            "description": "The life cycle that was hit.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/BusinessProcessLifeCycle"
              }
            ]
          },
          "businessProcess": {
            "description": "The business process.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/BusinessProcess"
              }
            ]
          }
        }
      },
      "BusinessProcessDetails": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessProcess"
          },
          {
            "type": "object",
            "description": "Detailed representation of a business process",
            "additionalProperties": false,
            "properties": {
              "details": {
                "description": "Details for the business process.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/BusinessProcessDetailsDataBase"
                  }
                ]
              }
            }
          }
        ]
      },
      "BusinessProcessDetailsDataBase": {
        "type": "object",
        "discriminator": {
          "propertyName": "kind",
          "mapping": {
            "BusinessProcessDetailsDataBatchResponse": "#/components/schemas/BusinessProcessDetailsDataBatchResponse",
            "BusinessProcessDetailsDataSchemaImport": "#/components/schemas/BusinessProcessDetailsDataSchemaImport",
            "BusinessProcessDetailsDataCdnPurge": "#/components/schemas/BusinessProcessDetailsDataCdnPurge",
            "BusinessProcessDetailsDataContentImport": "#/components/schemas/BusinessProcessDetailsDataContentImport"
          }
        },
        "description": "Base class for the details of a business process",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "kind"
        ],
        "properties": {
          "kind": {
            "type": "string"
          }
        }
      },
      "BusinessProcessDetailsDataBatchResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessProcessDetailsDataBase"
          },
          {
            "type": "object",
            "description": "Business process detailed information regarding a batch operation",
            "additionalProperties": false,
            "required": [
              "docType",
              "response"
            ],
            "properties": {
              "docType": {
                "type": "string",
                "description": "The DocType on which the operation was performed.",
                "minLength": 1
              },
              "response": {
                "description": "The response of the batch operation.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/BatchResponse"
                  }
                ]
              }
            }
          }
        ]
      },
      "BatchResponse": {
        "type": "object",
        "description": "Response from a batch operation",
        "additionalProperties": false,
        "required": [
          "rows"
        ],
        "properties": {
          "rows": {
            "type": "array",
            "description": "Rows in the response.",
            "items": {
              "$ref": "#/components/schemas/BatchResponseRow"
            }
          }
        }
      },
      "BatchResponseRow": {
        "type": "object",
        "description": "Row in a batch operation response",
        "additionalProperties": false,
        "required": [
          "id",
          "succeeded",
          "status",
          "version"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the item.",
            "minLength": 1
          },
          "succeeded": {
            "type": "boolean",
            "description": "Indicates if the operation succeeded."
          },
          "status": {
            "type": "integer",
            "description": "Status code of the operation.",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "description": "New version of the item.",
            "format": "int64"
          },
          "error": {
            "description": "If the operation did not succeed, this contains error information.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ErrorResponse"
              }
            ]
          },
          "requestId": {
            "type": "string",
            "description": "The identifier provided by user in the corresponding request (or null if none was provided). Used only in bulk creation.",
            "nullable": true
          }
        }
      },
      "BusinessProcessDetailsDataSchemaImport": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessProcessDetailsDataBase"
          },
          {
            "type": "object",
            "description": "Business process detailed information regarding Schema / ListItems import operation",
            "additionalProperties": false,
            "properties": {
              "schemaImportResult": {
                "description": "Result information of a schema import operation",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/SchemaImportResult"
                  }
                ]
              },
              "listItemImportResult": {
                "description": "Result information of a list item import operation",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ListItemImportResult"
                  }
                ]
              }
            }
          }
        ]
      },
      "SchemaImportResult": {
        "type": "object",
        "description": "Result information of a schema import operation",
        "additionalProperties": false,
        "required": [
          "importedSchemaCount",
          "skippedSchemaCount",
          "totalSchemaCount"
        ],
        "properties": {
          "importedSchemaCount": {
            "type": "integer",
            "description": "Number of schemas imported",
            "format": "int32"
          },
          "skippedSchemaCount": {
            "type": "integer",
            "description": "Number of schema skipped during import phase because they were already found in the system",
            "format": "int32"
          },
          "totalSchemaCount": {
            "type": "integer",
            "description": "Total number of schemas requested to be imported",
            "format": "int32"
          },
          "skippedSchemaIds": {
            "type": "array",
            "description": "Ids of the schemas that were not imported because already found in the system",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "importedSchemaIds": {
            "type": "array",
            "description": "Ids of the schemas that were successfully imported",
            "nullable": true,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ListItemImportResult": {
        "type": "object",
        "description": "Result information of a list item import operation",
        "additionalProperties": false,
        "required": [
          "importedListItemCount",
          "skippedListItemCount",
          "totalListItemCount"
        ],
        "properties": {
          "importedListItemCount": {
            "type": "integer",
            "description": "Number of list items imported",
            "format": "int32"
          },
          "skippedListItemCount": {
            "type": "integer",
            "description": "Number of list items skipped during import phase because they were already found in the system",
            "format": "int32"
          },
          "totalListItemCount": {
            "type": "integer",
            "description": "Total number of list items requested to be imported",
            "format": "int32"
          },
          "skippedListItemIds": {
            "type": "array",
            "description": "Ids of the list items that were not imported because already found in the system",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "importedListItemIds": {
            "type": "array",
            "description": "Ids of the list items that were successfully imported",
            "nullable": true,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "BusinessProcessDetailsDataCdnPurge": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessProcessDetailsDataBase"
          },
          {
            "type": "object",
            "description": "Business process detailed information regarding a CDN purge operation",
            "additionalProperties": false,
            "required": [
              "serializedCdnConfiguration",
              "jobs"
            ],
            "properties": {
              "serializedCdnConfiguration": {
                "type": "string",
                "description": "Serialized CDN configuration.",
                "minLength": 1
              },
              "jobs": {
                "type": "array",
                "description": "Jobs that were processed in the operation.",
                "items": {
                  "$ref": "#/components/schemas/CdnPurgeJobBase"
                }
              }
            }
          }
        ]
      },
      "CdnPurgeJobBase": {
        "type": "object",
        "discriminator": {
          "propertyName": "kind",
          "mapping": {
            "CdnPurgeJobByTag": "#/components/schemas/CdnPurgeJobByTag",
            "CdnPurgeJobByUri": "#/components/schemas/CdnPurgeJobByUri"
          }
        },
        "description": "Base class for a CDN purge job",
        "additionalProperties": false,
        "required": [
          "kind",
          "success",
          "retriesLeft"
        ],
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Indicates if the operation was performed successfully."
          },
          "retriesLeft": {
            "type": "integer",
            "description": "Number of retries left until the operation is considered as failed.",
            "format": "int32"
          },
          "kind": {
            "type": "string"
          }
        }
      },
      "CdnPurgeJobByTag": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CdnPurgeJobBase"
          },
          {
            "type": "object",
            "description": "Represents a CDN purge by tag (e.g. share ID)",
            "additionalProperties": false,
            "required": [
              "tag"
            ],
            "properties": {
              "tag": {
                "type": "string",
                "description": "The tag that should be purged.",
                "minLength": 1
              }
            }
          }
        ]
      },
      "CdnPurgeJobByUri": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CdnPurgeJobBase"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "uri": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "BusinessProcessDetailsDataContentImport": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessProcessDetailsDataBase"
          },
          {
            "type": "object",
            "description": "Business process detailed information regarding Content import",
            "additionalProperties": false,
            "properties": {
              "items": {
                "type": "array",
                "description": "Items that were imported.",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/ContentImportResult"
                }
              }
            }
          }
        ]
      },
      "ContentImportResult": {
        "type": "object",
        "description": "Represents an item imported during a content import",
        "additionalProperties": false,
        "required": [
          "fileTransferId",
          "succeeded"
        ],
        "properties": {
          "fileTransferId": {
            "type": "string",
            "description": "ID of the file transfer.",
            "minLength": 1
          },
          "contentId": {
            "type": "string",
            "description": "ID of the resulting content.",
            "nullable": true
          },
          "state": {
            "type": "string",
            "description": "State of the item.",
            "nullable": true
          },
          "succeeded": {
            "type": "boolean",
            "description": "Indicates if the operation succeeded."
          },
          "error": {
            "description": "If the operation did not succeeded, this contains error related information.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ErrorResponse"
              }
            ]
          }
        }
      },
      "BusinessProcessSearchResult": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SearchBehaviorBaseResultOfBusinessProcess"
          },
          {
            "type": "object",
            "description": "Search result from a search for business processes",
            "additionalProperties": false
          }
        ]
      },
      "SearchBehaviorBaseResultOfBusinessProcess": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResultOfBusinessProcess"
          },
          {
            "type": "object",
            "description": "Base class for search result queries that support SearchBehaviors",
            "additionalProperties": false,
            "properties": {
              "searchString": {
                "type": "string",
                "description": "The search string used to query the data.",
                "nullable": true
              },
              "isSearchStringRewritten": {
                "type": "boolean",
                "description": "Flag to notify if the SearchString was modified compared to the original requested one."
              },
              "queryDebugInformation": {
                "type": "array",
                "description": "Additional information regarding the query execution and reason of the matched documents. Multiple items are returned if multiple queries were performed.",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/QueryDebugInformation"
                }
              }
            }
          }
        ]
      },
      "QueryDebugInformation": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "general": {
            "type": "string",
            "nullable": true
          },
          "auditTrail": {
            "type": "string",
            "nullable": true
          },
          "request": {
            "nullable": true
          },
          "response": {
            "nullable": true
          }
        }
      },
      "BaseResultOfBusinessProcess": {
        "type": "object",
        "description": "Base class for search results",
        "additionalProperties": false,
        "required": [
          "results",
          "totalResults",
          "elapsedMilliseconds"
        ],
        "properties": {
          "totalResults": {
            "type": "integer",
            "description": "The total number of matching documents.",
            "format": "int64"
          },
          "results": {
            "type": "array",
            "description": "The matched documents.",
            "items": {
              "$ref": "#/components/schemas/BusinessProcess"
            }
          },
          "elapsedMilliseconds": {
            "type": "integer",
            "description": "The search execution time in milliseconds.",
            "format": "int64"
          },
          "pageToken": {
            "type": "string",
            "description": "An optional token to access the next page of results for those endpoints that support backend scrolling logic.",
            "nullable": true
          }
        }
      },
      "BusinessProcessSearchRequest": {
        "type": "object",
        "description": "Search request to search for business processes",
        "additionalProperties": false,
        "required": [
          "limit",
          "debugMode"
        ],
        "properties": {
          "limit": {
            "type": "integer",
            "description": "Limits the document count of the result set.",
            "format": "int32",
            "default": 30
          },
          "pageToken": {
            "type": "string",
            "description": "The token used to retrieve the next page of results. It must be null on first request and only filled with the returned pageToken to request next page of results.",
            "nullable": true
          },
          "filter": {
            "description": "An optional search filter. Limits the document result set.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/FilterBase"
              }
            ]
          },
          "searchString": {
            "type": "string",
            "description": "Limits the search by using a query string filter. The Lucene query string syntax is supported.",
            "nullable": true
          },
          "searchBehaviors": {
            "type": "array",
            "description": "An optional list of search behaviors. All the passed behaviors will be applied.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/SearchBehavior"
            }
          },
          "debugMode": {
            "type": "boolean",
            "description": "Enable debug mode: additional debug information regarding the query execution and reason of the matched documents are returned in the BusinessProcessSearchResult.\nWarning! It severely affects performance.",
            "default": false
          }
        }
      },
      "FilterBase": {
        "type": "object",
        "discriminator": {
          "propertyName": "kind",
          "mapping": {
            "AndFilter": "#/components/schemas/AndFilter",
            "OrFilter": "#/components/schemas/OrFilter",
            "NotFilter": "#/components/schemas/NotFilter",
            "DateRangeFilter": "#/components/schemas/DateRangeFilter",
            "ExistsFilter": "#/components/schemas/ExistsFilter",
            "GeoBoundingBoxFilter": "#/components/schemas/GeoBoundingBoxFilter",
            "GeoDistanceFilter": "#/components/schemas/GeoDistanceFilter",
            "NestedFilter": "#/components/schemas/NestedFilter",
            "NumericRangeFilter": "#/components/schemas/NumericRangeFilter",
            "PrefixFilter": "#/components/schemas/PrefixFilter",
            "TermFilter": "#/components/schemas/TermFilter",
            "TermsFilter": "#/components/schemas/TermsFilter",
            "AggregationFilter": "#/components/schemas/AggregationFilter",
            "ChildFilter": "#/components/schemas/ChildFilter",
            "ParentFilter": "#/components/schemas/ParentFilter"
          }
        },
        "description": "The filters' base class",
        "additionalProperties": false,
        "required": [
          "kind"
        ],
        "properties": {
          "kind": {
            "type": "string"
          }
        }
      },
      "AndFilter": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FilterBase"
          },
          {
            "type": "object",
            "description": "Used to put filters in \"and\"",
            "additionalProperties": false,
            "properties": {
              "filters": {
                "type": "array",
                "description": "The filters to put in \"and\". All kinds of filters are accepted.",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/FilterBase"
                }
              }
            }
          }
        ]
      },
      "OrFilter": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FilterBase"
          },
          {
            "type": "object",
            "description": "Put filters in \"or\"",
            "additionalProperties": false,
            "properties": {
              "filters": {
                "type": "array",
                "description": "The filters to put in \"or\". All kinds of filters are accepted.",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/FilterBase"
                }
              }
            }
          }
        ]
      },
      "NotFilter": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FilterBase"
          },
          {
            "type": "object",
            "description": "Negates the specified filter",
            "additionalProperties": false,
            "required": [
              "filter"
            ],
            "properties": {
              "filter": {
                "description": "The filter to be negated.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/FilterBase"
                  }
                ]
              }
            }
          }
        ]
      },
      "DateRangeFilter": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FilterBase"
          },
          {
            "type": "object",
            "description": "Filters over a range of date time values",
            "additionalProperties": false,
            "required": [
              "field",
              "range"
            ],
            "properties": {
              "field": {
                "type": "string",
                "description": "The field's name to execute the filter on. It is composed by the field ids of the hierarchy joined with \".\"\n(i.e. personLayer.address.street).",
                "minLength": 1
              },
              "range": {
                "description": "The date time range.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/DateRange"
                  }
                ]
              }
            }
          }
        ]
      },
      "DateRange": {
        "type": "object",
        "description": "The date time range class used in filters",
        "additionalProperties": false,
        "properties": {
          "names": {
            "description": "Language specific range names.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/TranslatedStringDictionary"
              }
            ]
          },
          "from": {
            "type": "string",
            "description": "The from value: it can be a datetime string or a pattern now(+-)(int)(YMDHm).",
            "nullable": true
          },
          "to": {
            "type": "string",
            "description": "The to value: it can be a datetime string or a pattern now(+-)(int)(YMDHm).",
            "nullable": true
          }
        }
      },
      "ExistsFilter": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FilterBase"
          },
          {
            "type": "object",
            "description": "Filters over the existence of a field's value",
            "additionalProperties": false,
            "required": [
              "field"
            ],
            "properties": {
              "field": {
                "type": "string",
                "description": "The field's name to execute the filter on. It is composed by the field ids of the hierarchy joined with \".\"\n(i.e. personLayer.address.street).",
                "minLength": 1
              }
            }
          }
        ]
      },
      "GeoBoundingBoxFilter": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FilterBase"
          },
          {
            "type": "object",
            "description": "Filters geo point values based on a bounding box",
            "additionalProperties": false,
            "required": [
              "field",
              "topLeft",
              "bottomRight"
            ],
            "properties": {
              "field": {
                "type": "string",
                "description": "The field's name to execute the filter on. It is composed by the field ids of the hierarchy joined with \".\"\n(i.e. personLayer.address.street).",
                "minLength": 1
              },
              "topLeft": {
                "description": "The top left corner of the bounding box's geo location (latitude and longitude).",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/GeoLocation"
                  }
                ]
              },
              "bottomRight": {
                "description": "The bottom right corner of the bounding box's geo location (latitude and longitude).",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/GeoLocation"
                  }
                ]
              }
            }
          }
        ]
      },
      "GeoLocation": {
        "type": "object",
        "description": "It stores geo location information (latitude and longitude)",
        "additionalProperties": false,
        "properties": {
          "lat": {
            "type": "number",
            "description": "The latitude",
            "format": "double"
          },
          "lon": {
            "type": "number",
            "description": "The longitude",
            "format": "double"
          }
        }
      },
      "GeoDistanceFilter": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FilterBase"
          },
          {
            "type": "object",
            "description": "Filters within the radius of the distance from a location",
            "additionalProperties": false,
            "required": [
              "field",
              "location"
            ],
            "properties": {
              "field": {
                "type": "string",
                "description": "The field's name to execute the filter on. It is composed by the field ids of the hierarchy joined with \".\"\n(i.e. personLayer.address.street).",
                "minLength": 1
              },
              "location": {
                "description": "The point of origin to calculate the distance from (latitude/longitude).",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/GeoLocation"
                  }
                ]
              },
              "distance": {
                "type": "number",
                "description": "The distance in meters from the point of origin.",
                "format": "double"
              }
            }
          }
        ]
      },
      "NestedFilter": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FilterBase"
          },
          {
            "type": "object",
            "description": "Filters on nested documents",
            "additionalProperties": false,
            "required": [
              "path",
              "filter"
            ],
            "properties": {
              "path": {
                "type": "string",
                "description": "The path pointing to the nested document (i.e. personLayer.nestedAddress).",
                "minLength": 1
              },
              "filter": {
                "description": "The filter to be applied on the nested documents.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/FilterBase"
                  }
                ]
              }
            }
          }
        ]
      },
      "NumericRangeFilter": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FilterBase"
          },
          {
            "type": "object",
            "description": "Filters over a range of numeric values",
            "additionalProperties": false,
            "required": [
              "field",
              "range"
            ],
            "properties": {
              "field": {
                "type": "string",
                "description": "The field's name to execute the filter on. It is composed by the field ids of the hierarchy joined with \".\"\n(i.e. personLayer.address.street).",
                "minLength": 1
              },
              "range": {
                "description": "The numeric range on which filtering.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/NumericRange"
                  }
                ]
              }
            }
          }
        ]
      },
      "NumericRange": {
        "type": "object",
        "description": "The numeric range class",
        "additionalProperties": false,
        "properties": {
          "names": {
            "description": "Language specific range names.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/TranslatedStringDictionary"
              }
            ]
          },
          "from": {
            "type": "number",
            "description": "The from value.",
            "format": "double",
            "nullable": true
          },
          "to": {
            "type": "number",
            "description": "The to value.",
            "format": "double",
            "nullable": true
          }
        }
      },
      "PrefixFilter": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FilterBase"
          },
          {
            "type": "object",
            "description": "Filters field's values based on a prefix",
            "additionalProperties": false,
            "required": [
              "field",
              "prefix"
            ],
            "properties": {
              "field": {
                "type": "string",
                "description": "The field's name to execute the filter on. It is composed by the field ids of the hierarchy joined with \".\"\n(i.e. personLayer.address.street).",
                "minLength": 1
              },
              "prefix": {
                "type": "string",
                "description": "The value to be used as prefix.",
                "minLength": 1
              }
            }
          }
        ]
      },
      "TermFilter": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FilterBase"
          },
          {
            "type": "object",
            "description": "Filters values exactly containing a term",
            "additionalProperties": false,
            "required": [
              "field",
              "term"
            ],
            "properties": {
              "field": {
                "type": "string",
                "description": "The field's name to execute the filter on. It is composed by the field ids of the hierarchy joined with \".\"\n(i.e. personLayer.address.street).",
                "minLength": 1
              },
              "term": {
                "type": "string",
                "description": "The value to use to filter on.",
                "minLength": 1
              }
            }
          }
        ]
      },
      "TermsFilter": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FilterBase"
          },
          {
            "type": "object",
            "description": "Filters values containing at least one of the terms",
            "additionalProperties": false,
            "required": [
              "field",
              "terms"
            ],
            "properties": {
              "field": {
                "type": "string",
                "description": "The field's name to execute the filter on. It is composed by the field ids of the hierarchy joined with \".\"\n(i.e. personLayer.address.street).",
                "minLength": 1
              },
              "terms": {
                "type": "array",
                "description": "The list of values to be filtered on. At least one must match to return results.",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "AggregationFilter": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FilterBase"
          },
          {
            "type": "object",
            "description": "Filters aggregations",
            "additionalProperties": false,
            "properties": {
              "aggregationName": {
                "type": "string",
                "description": "The name of the aggregation this filter is connected to.",
                "nullable": true
              },
              "filter": {
                "description": "The filter to be applied.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/FilterBase"
                  }
                ]
              },
              "temporaryAggregatorRequestId": {
                "type": "string",
                "description": "Autogenerated Guid at request time, for precise aggregation result mapping.",
                "nullable": true
              }
            }
          }
        ]
      },
      "ChildFilter": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FilterBase"
          },
          {
            "type": "object",
            "description": "Filters on child documents",
            "additionalProperties": false,
            "required": [
              "childType",
              "filter"
            ],
            "properties": {
              "childType": {
                "type": "string",
                "description": "The type of the child document.",
                "minLength": 1
              },
              "filter": {
                "description": "The filter to be applied on the child document. All kinds of filters are accepted.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/FilterBase"
                  }
                ]
              }
            }
          }
        ]
      },
      "ParentFilter": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FilterBase"
          },
          {
            "type": "object",
            "description": "Filters on parent documents",
            "additionalProperties": false,
            "required": [
              "parentType",
              "filter"
            ],
            "properties": {
              "parentType": {
                "type": "string",
                "description": "The type of the parent document.",
                "minLength": 1
              },
              "filter": {
                "description": "The filter to be applied on the child document. All kinds of filters are accepted.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/FilterBase"
                  }
                ]
              }
            }
          }
        ]
      },
      "SearchBehavior": {
        "type": "string",
        "description": "Search behaviors",
        "x-enumNames": [
          "DropInvalidCharactersOnFailure",
          "WildcardOnSingleTerm",
          "SimplifiedSearch",
          "WildcardOnEveryTerm",
          "SimplifiedSearchOr"
        ],
        "enum": [
          "DropInvalidCharactersOnFailure",
          "WildcardOnSingleTerm",
          "SimplifiedSearch",
          "WildcardOnEveryTerm",
          "SimplifiedSearchOr"
        ]
      },
      "BusinessRuleConfiguration": {
        "type": "object",
        "description": "Represents the business rule configuration.",
        "additionalProperties": false,
        "required": [
          "disableRuleEngine"
        ],
        "properties": {
          "disableRuleEngine": {
            "type": "boolean",
            "description": "Disables the rule completely."
          },
          "rules": {
            "type": "array",
            "description": "Rules",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/BusinessRule"
            }
          },
          "caches": {
            "type": "array",
            "description": "Named caches.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/NamedCacheConfigurationBase"
            }
          }
        }
      },
      "BusinessRule": {
        "type": "object",
        "discriminator": {
          "propertyName": "kind",
          "mapping": {
            "BusinessRuleConfigurable": "#/components/schemas/BusinessRuleConfigurable",
            "BusinessRuleScript": "#/components/schemas/BusinessRuleScript"
          }
        },
        "description": "A business rule",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "kind",
          "isEnabled",
          "enableTracing"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "User defined ID of the rule.",
            "nullable": true
          },
          "triggerPoint": {
            "description": "Trigger point.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/BusinessRuleTriggerPoint"
              }
            ]
          },
          "isEnabled": {
            "type": "boolean",
            "description": "Enable."
          },
          "names": {
            "description": "Language specific rule names.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/TranslatedStringDictionary"
              }
            ]
          },
          "description": {
            "description": "Language specific rule description.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/TranslatedStringDictionary"
              }
            ]
          },
          "enableTracing": {
            "type": "boolean",
            "description": "Enable trace logs for this rule."
          },
          "kind": {
            "type": "string"
          }
        }
      },
      "BusinessRuleTriggerPoint": {
        "type": "object",
        "description": "Represents a trigger point for a business rule",
        "additionalProperties": false,
        "required": [
          "executionScope",
          "documentType",
          "action"
        ],
        "properties": {
          "executionScope": {
            "description": "Execution scope.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/BusinessRuleExecutionScope"
              }
            ]
          },
          "documentType": {
            "description": "Document type.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/BusinessRuleTriggerDocType"
              }
            ]
          },
          "action": {
            "description": "Action performed.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/BusinessRuleTriggerAction"
              }
            ]
          }
        }
      },
      "BusinessRuleConfigurable": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessRule"
          },
          {
            "type": "object",
            "description": "A business rule configurable by specific actions and conditions",
            "additionalProperties": false,
            "properties": {
              "condition": {
                "description": "The condition that makes this rule trigger.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/BusinessRuleCondition"
                  }
                ]
              },
              "transformationGroups": {
                "type": "array",
                "description": "Optional transformations to apply.",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/BusinessRuleTransformationGroup"
                }
              },
              "actions": {
                "type": "array",
                "description": "The actions that are performed when this rule triggers.",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/BusinessRuleAction"
                }
              }
            }
          }
        ]
      },
      "BusinessRuleCondition": {
        "type": "object",
        "discriminator": {
          "propertyName": "kind",
          "mapping": {
            "BooleanCondition": "#/components/schemas/BooleanCondition",
            "AndCondition": "#/components/schemas/AndCondition",
            "OrCondition": "#/components/schemas/OrCondition",
            "LayerAssignedCondition": "#/components/schemas/LayerAssignedCondition",
            "LayerUnassignedCondition": "#/components/schemas/LayerUnassignedCondition",
            "ContentPermissionSetAssignedCondition": "#/components/schemas/ContentPermissionSetAssignedCondition",
            "ContentPermissionSetUnassignedCondition": "#/components/schemas/ContentPermissionSetUnassignedCondition",
            "FieldValueChangedCondition": "#/components/schemas/FieldValueChangedCondition",
            "MatchRegexCondition": "#/components/schemas/MatchRegexCondition",
            "TagboxItemAssignedCondition": "#/components/schemas/TagboxItemAssignedCondition",
            "TagboxItemUnassignedCondition": "#/components/schemas/TagboxItemUnassignedCondition",
            "ContentSchemaCondition": "#/components/schemas/ContentSchemaCondition",
            "NumberCompareCondition": "#/components/schemas/NumberCompareCondition",
            "ContentRelationItemAssignedCondition": "#/components/schemas/ContentRelationItemAssignedCondition",
            "ContentRelationItemUnassignedCondition": "#/components/schemas/ContentRelationItemUnassignedCondition",
            "GeoPointWithinPolygonCondition": "#/components/schemas/GeoPointWithinPolygonCondition",
            "ContentPermissionSetsChangedCondition": "#/components/schemas/ContentPermissionSetsChangedCondition",
            "ContentRelationItemsChangedCondition": "#/components/schemas/ContentRelationItemsChangedCondition",
            "LayersChangedCondition": "#/components/schemas/LayersChangedCondition",
            "TagboxItemsChangedCondition": "#/components/schemas/TagboxItemsChangedCondition",
            "FieldEmptyCondition": "#/components/schemas/FieldEmptyCondition",
            "NotCondition": "#/components/schemas/NotCondition"
          }
        },
        "description": "Conditions on which a business rule is executed",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "kind"
        ],
        "properties": {
          "traceRefId": {
            "type": "string",
            "description": "Optional trace log reference ID set by the system when EnableTracing is set to true on the associated rule.",
            "nullable": true
          },
          "kind": {
            "type": "string"
          }
        }
      },
      "AndCondition": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BooleanCondition"
          },
          {
            "type": "object",
            "description": "Links conditions with AND",
            "additionalProperties": false
          }
        ]
      },
      "BooleanCondition": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessRuleCondition"
          },
          {
            "type": "object",
            "description": "Links multiple conditions with a boolean operator",
            "x-abstract": true,
            "additionalProperties": false,
            "properties": {
              "conditions": {
                "type": "array",
                "description": "The conditions.",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/BusinessRuleCondition"
                }
              }
            }
          }
        ]
      },
      "OrCondition": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BooleanCondition"
          },
          {
            "type": "object",
            "description": "Links conditions with OR",
            "additionalProperties": false
          }
        ]
      },
      "LayerAssignedCondition": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessRuleCondition"
          },
          {
            "type": "object",
            "description": "Matches when a layer was assigned",
            "additionalProperties": false,
            "properties": {
              "layerId": {
                "type": "string",
                "description": "Layer id to match on.",
                "nullable": true
              }
            }
          }
        ]
      },
      "LayerUnassignedCondition": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessRuleCondition"
          },
          {
            "type": "object",
            "description": "Matches when a layer was unassigned",
            "additionalProperties": false,
            "properties": {
              "layerId": {
                "type": "string",
                "description": "Layer id to match on.",
                "nullable": true
              }
            }
          }
        ]
      },
      "ContentPermissionSetAssignedCondition": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessRuleCondition"
          },
          {
            "type": "object",
            "description": "Matches when a permission set was assigned",
            "additionalProperties": false,
            "properties": {
              "permissionSetId": {
                "type": "string",
                "description": "Permission set id to match on.",
                "nullable": true
              }
            }
          }
        ]
      },
      "ContentPermissionSetUnassignedCondition": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessRuleCondition"
          },
          {
            "type": "object",
            "description": "Matches when a permission set was unassigned",
            "additionalProperties": false,
            "properties": {
              "permissionSetId": {
                "type": "string",
                "description": "Permission set id to match on.",
                "nullable": true
              }
            }
          }
        ]
      },
      "FieldValueChangedCondition": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessRuleCondition"
          },
          {
            "type": "object",
            "description": "Matches when a field matching the field path string (JSON path) changes to the expected value.",
            "additionalProperties": false,
            "properties": {
              "fieldPath": {
                "type": "string",
                "description": "JSON path to the field",
                "nullable": true
              },
              "expectedValue": {
                "description": "Expected value for the field to have to satisfy the condition",
                "nullable": true
              }
            }
          }
        ]
      },
      "MatchRegexCondition": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessRuleCondition"
          },
          {
            "type": "object",
            "description": "Matches when a field matching the field path string (JSON Path) changes and matches the given regular expression.",
            "additionalProperties": false,
            "properties": {
              "fieldPath": {
                "type": "string",
                "description": "JSON path to the field",
                "nullable": true
              },
              "regex": {
                "type": "string",
                "description": "Regular expression",
                "nullable": true
              },
              "storeIn": {
                "type": "string",
                "description": "Optional variable name to store the matched regex groups in",
                "nullable": true
              }
            }
          }
        ]
      },
      "TagboxItemAssignedCondition": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessRuleCondition"
          },
          {
            "type": "object",
            "description": "Matches when a tag in a tagbox matching the field path string (JSON path) is newly assigned.",
            "additionalProperties": false,
            "properties": {
              "fieldPath": {
                "type": "string",
                "description": "JSON path to the field",
                "nullable": true
              },
              "refId": {
                "type": "string",
                "description": "Ref Id of the list item that was assigned in the tagbox",
                "nullable": true
              }
            }
          }
        ]
      },
      "TagboxItemUnassignedCondition": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessRuleCondition"
          },
          {
            "type": "object",
            "description": "Matches when a tag in a tagbox matching the field path string (JSON path) is removed.",
            "additionalProperties": false,
            "properties": {
              "fieldPath": {
                "type": "string",
                "description": "JSON path to the field",
                "nullable": true
              },
              "refId": {
                "type": "string",
                "description": "Ref Id of the list item that was unassigned from the tagbox",
                "nullable": true
              }
            }
          }
        ]
      },
      "ContentSchemaCondition": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessRuleCondition"
          },
          {
            "type": "object",
            "description": "Matches when the content schema of a metadata item equals the one set in the condition.",
            "additionalProperties": false,
            "properties": {
              "schemaId": {
                "type": "string",
                "description": "Content schema id to match on.",
                "nullable": true
              }
            }
          }
        ]
      },
      "NumberCompareCondition": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessRuleCondition"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "fieldPath": {
                "type": "string",
                "description": "JSON path to the field.",
                "nullable": true
              },
              "mode": {
                "description": "Mode to use for comparison.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/BusinessRuleNumberCompareConditionMode"
                  }
                ]
              },
              "value": {
                "type": "number",
                "description": "Value to compare to.",
                "format": "double"
              }
            }
          }
        ]
      },
      "BusinessRuleNumberCompareConditionMode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "LessThan",
          "LessThanEqual",
          "Equal",
          "GreaterThanEqual",
          "GreaterThan"
        ],
        "enum": [
          "LessThan",
          "LessThanEqual",
          "Equal",
          "GreaterThanEqual",
          "GreaterThan"
        ]
      },
      "ContentRelationItemAssignedCondition": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessRuleCondition"
          },
          {
            "type": "object",
            "description": "Matches when a relationship entry in a relationship field matching the field path string (JSON path) is newly assigned.",
            "additionalProperties": false,
            "properties": {
              "contentId": {
                "type": "string",
                "description": "Content id that should be matched against.",
                "nullable": true
              },
              "fieldPath": {
                "type": "string",
                "description": "JSON path to the field",
                "nullable": true
              }
            }
          }
        ]
      },
      "ContentRelationItemUnassignedCondition": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessRuleCondition"
          },
          {
            "type": "object",
            "description": "Matches when a relationship entry in a relationship field matching the field path string (JSON path) is removed.",
            "additionalProperties": false,
            "properties": {
              "contentId": {
                "type": "string",
                "description": "Content id that should be matched against.",
                "nullable": true
              },
              "fieldPath": {
                "type": "string",
                "description": "JSON path to the field",
                "nullable": true
              }
            }
          }
        ]
      },
      "GeoPointWithinPolygonCondition": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessRuleCondition"
          },
          {
            "type": "object",
            "description": "Matches when the geo point from the field specified by the field path is inside the specified polygon.",
            "additionalProperties": false,
            "properties": {
              "fieldPath": {
                "type": "string",
                "description": "JSON path to the field",
                "nullable": true
              },
              "polygon": {
                "type": "array",
                "description": "List of points that form the polygon for the geo fence.\nMust include at least 3 points.",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/LatLon"
                }
              }
            }
          }
        ]
      },
      "LatLon": {
        "type": "object",
        "description": "Stores a coordinate",
        "additionalProperties": false,
        "required": [
          "lat",
          "lon"
        ],
        "properties": {
          "lat": {
            "type": "number",
            "description": "Latitude",
            "format": "double"
          },
          "lon": {
            "type": "number",
            "description": "Longitude",
            "format": "double"
          }
        }
      },
      "ContentPermissionSetsChangedCondition": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessRuleCondition"
          },
          {
            "type": "object",
            "description": "Matches whenever the assigned content permission sets changed.",
            "additionalProperties": false
          }
        ]
      },
      "ContentRelationItemsChangedCondition": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessRuleCondition"
          },
          {
            "type": "object",
            "description": "Matches whenever the assigned content(s) in a relationship field changed.",
            "additionalProperties": false,
            "properties": {
              "fieldPath": {
                "type": "string",
                "description": "JSON path to the field",
                "nullable": true
              }
            }
          }
        ]
      },
      "LayersChangedCondition": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessRuleCondition"
          },
          {
            "type": "object",
            "description": "Matches whenever the assigned layers of a content changed.",
            "additionalProperties": false
          }
        ]
      },
      "TagboxItemsChangedCondition": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessRuleCondition"
          },
          {
            "type": "object",
            "description": "Matches whenever the assigned item(s) in a tagbox changed.",
            "additionalProperties": false,
            "properties": {
              "fieldPath": {
                "type": "string",
                "description": "JSON path to the field",
                "nullable": true
              }
            }
          }
        ]
      },
      "FieldEmptyCondition": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessRuleCondition"
          },
          {
            "type": "object",
            "description": "Matches when a field matching the field path string (JSON path) is empty.",
            "additionalProperties": false,
            "properties": {
              "fieldPath": {
                "type": "string",
                "description": "JSON path to the field",
                "nullable": true
              }
            }
          }
        ]
      },
      "NotCondition": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessRuleCondition"
          },
          {
            "type": "object",
            "description": "Matches when the inner condition is not matching.",
            "additionalProperties": false,
            "properties": {
              "condition": {
                "description": "Inner condition.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/BusinessRuleCondition"
                  }
                ]
              }
            }
          }
        ]
      },
      "BusinessRuleTransformationGroup": {
        "type": "object",
        "description": "Business rule transformation group:\nA group of transformations to run for the specified inputs",
        "additionalProperties": false,
        "properties": {
          "inputs": {
            "type": "array",
            "description": "The inputs of the transformation group.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "transformations": {
            "type": "array",
            "description": "A list of transformations to apply.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/BusinessRuleTransformation"
            }
          },
          "storeIn": {
            "type": "string",
            "description": "Variable name where the final result should be stored in.",
            "nullable": true
          },
          "traceRefId": {
            "type": "string",
            "description": "Optional trace log reference ID set by the system when EnableTracing is set to true on the associated rule.",
            "nullable": true
          }
        }
      },
      "BusinessRuleTransformation": {
        "type": "object",
        "discriminator": {
          "propertyName": "kind",
          "mapping": {
            "TakeDictionaryValueTransformation": "#/components/schemas/TakeDictionaryValueTransformation",
            "TakeArrayValueTransformation": "#/components/schemas/TakeArrayValueTransformation",
            "JoinByTransformation": "#/components/schemas/JoinByTransformation",
            "LookupCacheTransformation": "#/components/schemas/LookupCacheTransformation",
            "NGramTransformation": "#/components/schemas/NGramTransformation",
            "ProjectionTransformation": "#/components/schemas/ProjectionTransformation",
            "SplitTransformation": "#/components/schemas/SplitTransformation"
          }
        },
        "description": "Business rule transformation",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "kind"
        ],
        "properties": {
          "traceRefId": {
            "type": "string",
            "description": "Optional trace log reference ID set by the system when EnableTracing is set to true on the associated rule.",
            "nullable": true
          },
          "kind": {
            "type": "string"
          }
        }
      },
      "TakeDictionaryValueTransformation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessRuleTransformation"
          },
          {
            "type": "object",
            "description": "Takes an item from a dictionary by its key.",
            "additionalProperties": false,
            "properties": {
              "key": {
                "type": "string",
                "description": "Key of the item.",
                "nullable": true
              }
            }
          }
        ]
      },
      "TakeArrayValueTransformation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessRuleTransformation"
          },
          {
            "type": "object",
            "description": "Takes an item from an array by its index.",
            "additionalProperties": false,
            "properties": {
              "index": {
                "type": "string",
                "description": "Index of the item.",
                "nullable": true
              }
            }
          }
        ]
      },
      "JoinByTransformation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessRuleTransformation"
          },
          {
            "type": "object",
            "description": "Joins the input by a configurable separator",
            "additionalProperties": false,
            "properties": {
              "separator": {
                "type": "string",
                "description": "Separator to use.",
                "nullable": true
              }
            }
          }
        ]
      },
      "LookupCacheTransformation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessRuleTransformation"
          },
          {
            "type": "object",
            "description": "Uses a named cache to lookup a value.",
            "additionalProperties": false,
            "properties": {
              "namedCache": {
                "type": "string",
                "description": "Name of the cache to use.",
                "nullable": true
              }
            }
          }
        ]
      },
      "NGramTransformation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessRuleTransformation"
          },
          {
            "type": "object",
            "description": "Produces N-grams based on splitting a text on whitespace characters.\nRemoves punctuation as well.",
            "additionalProperties": false,
            "properties": {
              "size": {
                "type": "integer",
                "description": "Maximum size of n-grams to produce.\nSettings this to 3 will produce unigrams, bigrams, trigrams.",
                "format": "int32"
              },
              "minWordLength": {
                "type": "integer",
                "description": "Minimum length of a word to be considered.",
                "format": "int32"
              },
              "maxWordLength": {
                "type": "integer",
                "description": "Maximum length of a word to be considered.",
                "format": "int32",
                "nullable": true
              }
            }
          }
        ]
      },
      "ProjectionTransformation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessRuleTransformation"
          },
          {
            "type": "object",
            "description": "Transforms a list by applying a set of transformation for each item in the list.",
            "additionalProperties": false,
            "properties": {
              "transformations": {
                "type": "array",
                "description": "Transformations to apply.",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/BusinessRuleTransformation"
                }
              }
            }
          }
        ]
      },
      "SplitTransformation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessRuleTransformation"
          },
          {
            "type": "object",
            "description": "Splits the input by separators, optionally trimming the entries afterwards.",
            "additionalProperties": false,
            "properties": {
              "separators": {
                "description": "Separators to use, supports variables, an array of strings including escape sequences or null to split on any white space character.",
                "nullable": true
              },
              "keepEmpty": {
                "type": "boolean",
                "description": "Keeps empty items. Empty items will be returned as empty strings."
              },
              "trim": {
                "type": "boolean",
                "description": "Trims each entry for punctuation and white space."
              }
            }
          }
        ]
      },
      "BusinessRuleAction": {
        "type": "object",
        "discriminator": {
          "propertyName": "kind",
          "mapping": {
            "AssignLayerAction": "#/components/schemas/AssignLayerAction",
            "UnassignLayerAction": "#/components/schemas/UnassignLayerAction",
            "AssignValueAction": "#/components/schemas/AssignValueAction",
            "AssignTagboxItemsAction": "#/components/schemas/AssignTagboxItemsAction",
            "UnassignTagboxItemsAction": "#/components/schemas/UnassignTagboxItemsAction",
            "AssignContentPermissionSetsAction": "#/components/schemas/AssignContentPermissionSetsAction",
            "UnassignContentPermissionSetsAction": "#/components/schemas/UnassignContentPermissionSetsAction",
            "ProduceMessageAction": "#/components/schemas/ProduceMessageAction",
            "AssignTagboxItemsInLayerAction": "#/components/schemas/AssignTagboxItemsInLayerAction",
            "EnqueueTaggingAction": "#/components/schemas/EnqueueTaggingAction"
          }
        },
        "description": "Action to be performed by a business rule",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "kind"
        ],
        "properties": {
          "traceRefId": {
            "type": "string",
            "description": "Optional trace log reference ID set by the system when EnableTracing is set to true on the associated rule.",
            "nullable": true
          },
          "kind": {
            "type": "string"
          }
        }
      },
      "AssignLayerAction": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessRuleAction"
          },
          {
            "type": "object",
            "description": "Assigns a layer, adding the default values to the data dictionary",
            "additionalProperties": false,
            "properties": {
              "layerId": {
                "type": "string",
                "description": "The ID of the layer.",
                "nullable": true
              },
              "defaultValues": {
                "type": "object",
                "description": "An object containing default values (used for example to populate required fields).",
                "nullable": true
              }
            }
          }
        ]
      },
      "UnassignLayerAction": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessRuleAction"
          },
          {
            "type": "object",
            "description": "Removes a layer",
            "additionalProperties": false,
            "properties": {
              "layerId": {
                "type": "string",
                "description": "The ID of the layer.",
                "nullable": true
              }
            }
          }
        ]
      },
      "AssignValueAction": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessRuleAction"
          },
          {
            "type": "object",
            "description": "Assign a value to all fields matching the FieldPath (JSON path).",
            "additionalProperties": false,
            "properties": {
              "path": {
                "type": "string",
                "description": "Path to the object the value should be inserted in.",
                "nullable": true
              },
              "fieldId": {
                "type": "string",
                "description": "ID of the field, the value should be inserted in.",
                "nullable": true
              },
              "value": {
                "description": "Value to assign.",
                "nullable": true
              },
              "replace": {
                "type": "boolean",
                "description": "Indicates whether existing values should be replaced.\nNote: for multi fieldsets and relations, this setting controls, if the value is added\nto the already existing values or if the existing values shall be overwritten."
              }
            }
          }
        ]
      },
      "AssignTagboxItemsAction": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessRuleAction"
          },
          {
            "type": "object",
            "description": "Assigns one or multiple tag box items to the multi tagbox identified by the path (JSON path).",
            "additionalProperties": false,
            "properties": {
              "path": {
                "type": "string",
                "description": "Path to the object the tagbox is contained in.",
                "nullable": true
              },
              "fieldId": {
                "type": "string",
                "description": "ID of the tagbox field.",
                "nullable": true
              },
              "refIds": {
                "description": "List of refIds of the items that should be assigned.",
                "nullable": true
              },
              "replace": {
                "type": "boolean",
                "description": "Indicates whether all the already assigned tags get replaced by the set specified in the action.\nIf false, the not already assigned tags get added, the rest is left as is."
              }
            }
          }
        ]
      },
      "UnassignTagboxItemsAction": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessRuleAction"
          },
          {
            "type": "object",
            "description": "Removes one or multiple tag box items from the multi tagbox identified by the path (JSON path).",
            "additionalProperties": false,
            "properties": {
              "path": {
                "type": "string",
                "description": "Path to the object the tagbox is contained in.",
                "nullable": true
              },
              "fieldId": {
                "type": "string",
                "description": "ID of the tagbox field.",
                "nullable": true
              },
              "refIds": {
                "description": "List of refIds of the items that should be removed.",
                "nullable": true
              }
            }
          }
        ]
      },
      "AssignContentPermissionSetsAction": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessRuleAction"
          },
          {
            "type": "object",
            "description": "Assigns one or more permission sets to a content.",
            "additionalProperties": false,
            "properties": {
              "permissionSetIds": {
                "description": "IDs of the permission sets to assign.",
                "nullable": true
              },
              "replace": {
                "type": "boolean",
                "description": "Indicates whether the already assigned permissions should be replaced or merged."
              }
            }
          }
        ]
      },
      "UnassignContentPermissionSetsAction": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessRuleAction"
          },
          {
            "type": "object",
            "description": "Removes one or more permission sets from a content.",
            "additionalProperties": false,
            "properties": {
              "permissionSetIds": {
                "description": "IDs of the permission sets to unassign.",
                "nullable": true
              }
            }
          }
        ]
      },
      "ProduceMessageAction": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessRuleAction"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "AssignTagboxItemsInLayerAction": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessRuleAction"
          },
          {
            "type": "object",
            "description": "Assigns a set of list item ids to all multi tag boxes in a layer where the\nfilter defined on the tagbox does allow assignment of the ID.",
            "additionalProperties": false,
            "properties": {
              "namedCache": {
                "type": "string",
                "description": "Named cache to use for lookup, should be of type SchemaTagboxFilterLookupNamedCacheConfiguration",
                "nullable": true
              },
              "refIds": {
                "description": "List of refIds of the items that should be assigned.",
                "nullable": true
              },
              "replace": {
                "type": "boolean",
                "description": "Indicates where the assignment should be additive to the already assigned tags\nor if existing tags should be replaced."
              }
            }
          }
        ]
      },
      "EnqueueTaggingAction": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessRuleAction"
          },
          {
            "type": "object",
            "description": "Enqueue content for tagging",
            "additionalProperties": false,
            "properties": {
              "options": {
                "description": "Options to use while tagging.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/TaggingOptionsBase"
                  }
                ]
              }
            }
          }
        ]
      },
      "TaggingOptionsBase": {
        "type": "object",
        "discriminator": {
          "propertyName": "kind",
          "mapping": {
            "ClarifaiTaggingOptions": "#/components/schemas/ClarifaiTaggingOptions",
            "SimulatedTaggingOptions": "#/components/schemas/SimulatedTaggingOptions"
          }
        },
        "description": "Options for tagging",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "kind"
        ],
        "properties": {
          "tagOutputFormatId": {
            "type": "string",
            "description": "Override for the output format ID to tag.",
            "nullable": true
          },
          "keywordLookupCacheName": {
            "type": "string",
            "description": "Override for the cache to use.",
            "nullable": true
          },
          "taggingLayerId": {
            "type": "string",
            "description": "Override for the layer to assign.",
            "nullable": true
          },
          "foundTagsFieldId": {
            "type": "string",
            "description": "Override for the field id where found tags are stored.",
            "nullable": true
          },
          "missingKeywordsFieldId": {
            "type": "string",
            "description": "Override for the field id where not found tags are stored.",
            "nullable": true
          },
          "kind": {
            "type": "string"
          }
        }
      },
      "ClarifaiTaggingOptions": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TaggingOptionsBase"
          },
          {
            "type": "object",
            "description": "Options for clarifai tagging",
            "additionalProperties": false,
            "properties": {
              "model": {
                "type": "string",
                "description": "Override for the model to use",
                "nullable": true
              },
              "language": {
                "type": "string",
                "description": "Override for the language to use",
                "nullable": true
              },
              "minimumValue": {
                "type": "string",
                "description": "Minimum value a concept must have to be considered",
                "nullable": true
              }
            }
          }
        ]
      },
      "SimulatedTaggingOptions": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TaggingOptionsBase"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "numberOfKeywords": {
                "type": "string",
                "description": "Number of keywords to assign.",
                "nullable": true
              }
            }
          }
        ]
      },
      "BusinessRuleScript": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessRule"
          },
          {
            "type": "object",
            "description": "A business rule expressed as a script",
            "additionalProperties": false,
            "properties": {
              "script": {
                "type": "string",
                "description": "Script",
                "nullable": true
              }
            }
          }
        ]
      },
      "NamedCacheConfigurationBase": {
        "type": "object",
        "discriminator": {
          "propertyName": "kind",
          "mapping": {
            "ListItemNamedCacheConfiguration": "#/components/schemas/ListItemNamedCacheConfiguration",
            "SchemaTagboxFilterLookupNamedCacheConfiguration": "#/components/schemas/SchemaTagboxFilterLookupNamedCacheConfiguration",
            "InverseListItemNamedCacheConfiguration": "#/components/schemas/InverseListItemNamedCacheConfiguration"
          }
        },
        "description": "Named cache configuration",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "kind",
          "caseSensitive"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of named cache.",
            "nullable": true
          },
          "caseSensitive": {
            "type": "boolean",
            "description": "Indicates if the lookup should be case sensitive."
          },
          "kind": {
            "type": "string"
          }
        }
      },
      "ListItemNamedCacheConfiguration": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NamedCacheConfigurationBase"
          },
          {
            "type": "object",
            "description": "List item named cache",
            "additionalProperties": false,
            "properties": {
              "schemaId": {
                "type": "string",
                "description": "ID of the schema to cache (should have SchemaType = List)",
                "nullable": true
              },
              "keyFields": {
                "type": "array",
                "description": "List of IDs of fields to use as a composite key",
                "nullable": true,
                "items": {
                  "type": "string"
                }
              },
              "filter": {
                "description": "An optional filter to narrow down the cached list items",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/FilterBase"
                  }
                ]
              },
              "includeAllSchemaChildren": {
                "type": "boolean",
                "description": "Include child schemas when caching list items"
              }
            }
          }
        ]
      },
      "SchemaTagboxFilterLookupNamedCacheConfiguration": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NamedCacheConfigurationBase"
          },
          {
            "type": "object",
            "description": "Creates a cache for all multi tag boxes in a schema\nLookup key is then in the format [ fieldId, refId ], returns the refId if matched by the filter",
            "additionalProperties": false,
            "properties": {
              "schemaId": {
                "type": "string",
                "description": "The layer id.",
                "nullable": true
              }
            }
          }
        ]
      },
      "InverseListItemNamedCacheConfiguration": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NamedCacheConfigurationBase"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "schemaId": {
                "type": "string",
                "description": "ID of the schema to cache (should have SchemaType = List)",
                "nullable": true
              },
              "valueField": {
                "type": "string",
                "description": "ID of the field that yields the value",
                "nullable": true
              },
              "filter": {
                "description": "An optional filter to narrow down the cached list items",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/FilterBase"
                  }
                ]
              },
              "includeAllSchemaChildren": {
                "type": "boolean",
                "description": "Include child schemas when caching list items"
              }
            }
          }
        ]
      },
      "BusinessRuleConfigurationUpdateRequest": {
        "type": "object",
        "description": "Update request for changing business rule configuration",
        "additionalProperties": false,
        "required": [
          "disableRuleEngine"
        ],
        "properties": {
          "disableRuleEngine": {
            "type": "boolean",
            "description": "Disables the rule engine completely."
          },
          "rules": {
            "type": "array",
            "description": "Rules.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/BusinessRule"
            }
          },
          "caches": {
            "type": "array",
            "description": "Named caches.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/NamedCacheConfigurationBase"
            }
          }
        }
      },
      "BusinessRuleTraceLogSearchResult": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SearchBehaviorWithAggregationBaseResultOfBusinessRuleTraceLog"
          },
          {
            "type": "object",
            "description": "Holds results of trace log search.",
            "additionalProperties": false
          }
        ]
      },
      "SearchBehaviorWithAggregationBaseResultOfBusinessRuleTraceLog": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SearchBehaviorBaseResultOfBusinessRuleTraceLog"
          },
          {
            "type": "object",
            "description": "Base class for search result queries that support SearchBehaviors",
            "additionalProperties": false,
            "properties": {
              "aggregationResults": {
                "type": "array",
                "description": "Results of the aggregation, if any aggregators was passed in the request.",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/AggregationResult"
                }
              }
            }
          }
        ]
      },
      "AggregationResult": {
        "type": "object",
        "description": "Result of an aggregation",
        "additionalProperties": false,
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the aggregation.",
            "minLength": 1
          },
          "sumOtherDocCount": {
            "type": "integer",
            "description": "When there are lots of unique terms, Elastic Search only returns the top terms; this number is the sum of the document counts for all buckets that are not part of the response.",
            "format": "int64",
            "nullable": true
          },
          "aggregationResultItems": {
            "type": "array",
            "description": "Items returned for the aggregation. Each item consists of a bucket with the matched value and the number of matches.\nOptionally inner aggregations for further drill down can be available.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/AggregationResultItem"
            }
          }
        }
      },
      "AggregationResultItem": {
        "type": "object",
        "description": "Aggregation result item",
        "additionalProperties": false,
        "required": [
          "name",
          "count",
          "active"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Value matched.",
            "minLength": 1
          },
          "count": {
            "type": "integer",
            "description": "Number of items matched.",
            "format": "int64"
          },
          "filter": {
            "description": "Ready to use filter to filter the data based on the aggregation result values.\nIt can be passed as one of the aggregation filters of an aggregation query: it returns documents meeting the aggregation condition.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/AggregationFilter"
              }
            ]
          },
          "active": {
            "type": "boolean",
            "description": "True if the current result item matches on of the aggregation filters sent in the query."
          },
          "aggregationResults": {
            "type": "array",
            "description": "Inner aggregation results, if inner aggregations were provided in the query.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/AggregationResult"
            }
          }
        }
      },
      "SearchBehaviorBaseResultOfBusinessRuleTraceLog": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResultOfBusinessRuleTraceLog"
          },
          {
            "type": "object",
            "description": "Base class for search result queries that support SearchBehaviors",
            "additionalProperties": false,
            "properties": {
              "searchString": {
                "type": "string",
                "description": "The search string used to query the data.",
                "nullable": true
              },
              "isSearchStringRewritten": {
                "type": "boolean",
                "description": "Flag to notify if the SearchString was modified compared to the original requested one."
              },
              "queryDebugInformation": {
                "type": "array",
                "description": "Additional information regarding the query execution and reason of the matched documents. Multiple items are returned if multiple queries were performed.",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/QueryDebugInformation"
                }
              }
            }
          }
        ]
      },
      "BaseResultOfBusinessRuleTraceLog": {
        "type": "object",
        "description": "Base class for search results",
        "additionalProperties": false,
        "required": [
          "results",
          "totalResults",
          "elapsedMilliseconds"
        ],
        "properties": {
          "totalResults": {
            "type": "integer",
            "description": "The total number of matching documents.",
            "format": "int64"
          },
          "results": {
            "type": "array",
            "description": "The matched documents.",
            "items": {
              "$ref": "#/components/schemas/BusinessRuleTraceLog"
            }
          },
          "elapsedMilliseconds": {
            "type": "integer",
            "description": "The search execution time in milliseconds.",
            "format": "int64"
          },
          "pageToken": {
            "type": "string",
            "description": "An optional token to access the next page of results for those endpoints that support backend scrolling logic.",
            "nullable": true
          }
        }
      },
      "BusinessRuleTraceLog": {
        "type": "object",
        "description": "Contains a trace for a single document affected by potentially multiple business rules being evaluated and executed.",
        "additionalProperties": false,
        "required": [
          "documentType"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the trace.",
            "nullable": true
          },
          "documentId": {
            "type": "string",
            "description": "ID of the document.",
            "nullable": true
          },
          "documentType": {
            "description": "Type of the document.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/BusinessRuleTriggerDocType"
              }
            ]
          },
          "ruleIds": {
            "type": "array",
            "description": "IDs of rules that were traced for this document.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "rules": {
            "type": "array",
            "description": "Detailed information about rules traced.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/BusinessRuleTracedRule"
            }
          },
          "validationErrors": {
            "type": "array",
            "description": "Validation errors occuring after all rules have ran.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "generalErrors": {
            "type": "array",
            "description": "General errors occuring when saving the document.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "audit": {
            "description": "Audit information.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserAudit"
              }
            ]
          }
        }
      },
      "BusinessRuleTracedRule": {
        "type": "object",
        "description": "Traced Business rule",
        "additionalProperties": false,
        "properties": {
          "configuration": {
            "description": "Configuration of the rule as it was running. Enriched with trace ref IDs.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/BusinessRule"
              }
            ]
          },
          "evaluations": {
            "type": "array",
            "description": "Evaluations performed for this rule.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/BusinessRuleTracedEvaluation"
            }
          }
        }
      },
      "BusinessRuleTracedEvaluation": {
        "type": "object",
        "description": "Evaluation trace of a business rule",
        "additionalProperties": false,
        "required": [
          "conditionSatisfied"
        ],
        "properties": {
          "conditionSatisfied": {
            "type": "boolean",
            "description": "Indicates if the rule was found to be executable."
          },
          "conditions": {
            "type": "array",
            "description": "Detailed evaluation results for each condition.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/BusinessRuleTracedEvaluationCondition"
            }
          },
          "transformationGroups": {
            "type": "array",
            "description": "Detailed results for transformation groups.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/BusinessRuleTracedTransformationGroup"
            }
          },
          "actions": {
            "type": "array",
            "description": "Detailed steps performed by actions.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/BusinessRuleTracedAction"
            }
          },
          "variables": {
            "type": "object",
            "description": "State of variables after all transformation groups were ran.",
            "nullable": true,
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "BusinessRuleTracedEvaluationCondition": {
        "type": "object",
        "description": "Detail trace for business rule condition",
        "additionalProperties": false,
        "required": [
          "satisfied"
        ],
        "properties": {
          "traceRefId": {
            "type": "string",
            "description": "Trace reference ID of condition.",
            "nullable": true
          },
          "satisfied": {
            "type": "boolean",
            "description": "Indicates if this condition evaluated to true."
          },
          "reason": {
            "type": "string",
            "description": "Additional reason why condition evaluated to given result.",
            "nullable": true
          }
        }
      },
      "BusinessRuleTracedTransformationGroup": {
        "type": "object",
        "description": "Trace of transformation group",
        "additionalProperties": false,
        "properties": {
          "traceRefId": {
            "type": "string",
            "description": "Trace reference ID of transformation group.",
            "nullable": true
          },
          "input": {
            "type": "string",
            "description": "Serialized JSON of input for group",
            "nullable": true
          },
          "output": {
            "type": "string",
            "description": "Serialized JSON of output for group",
            "nullable": true
          },
          "transformations": {
            "type": "array",
            "description": "Detailed traces for each step performed by transformations in group.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/BusinessRuleTracedTransformation"
            }
          }
        }
      },
      "BusinessRuleTracedTransformation": {
        "type": "object",
        "description": "Trace of single transformation step",
        "additionalProperties": false,
        "properties": {
          "traceRefId": {
            "type": "string",
            "description": "Trace reference ID of transformation.",
            "nullable": true
          },
          "input": {
            "type": "string",
            "description": "Serialized JSON of input of transformation",
            "nullable": true
          },
          "output": {
            "type": "string",
            "description": "Serialized JSON of output of transformation",
            "nullable": true
          }
        }
      },
      "BusinessRuleTracedAction": {
        "type": "object",
        "description": "Detailed trace for business rule action",
        "additionalProperties": false,
        "required": [
          "documentModified"
        ],
        "properties": {
          "traceRefId": {
            "type": "string",
            "description": "Trace reference ID of action",
            "nullable": true
          },
          "documentModified": {
            "type": "boolean",
            "description": "Indicates if the action modified the document"
          },
          "text": {
            "type": "string",
            "description": "Additional information provided by the trace",
            "nullable": true
          }
        }
      },
      "UserAudit": {
        "type": "object",
        "description": "Audit information",
        "additionalProperties": false,
        "required": [
          "creationDate",
          "modificationDate"
        ],
        "properties": {
          "creationDate": {
            "type": "string",
            "description": "The date on which the document was created.",
            "format": "date-time"
          },
          "modificationDate": {
            "type": "string",
            "description": "The last date on which the document was modified.",
            "format": "date-time"
          },
          "createdByUser": {
            "type": "string",
            "description": "ID of the user who created the document.",
            "nullable": true
          },
          "modifiedByUser": {
            "type": "string",
            "description": "ID of the last user who modified the document.",
            "nullable": true
          }
        }
      },
      "BusinessRuleTraceLogSearchRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "debugMode",
          "limit"
        ],
        "properties": {
          "debugMode": {
            "type": "boolean",
            "description": "Enable debug mode to get as result of the Searched additional debug information. Warning! Severely affects performance.",
            "default": false
          },
          "aggregationFilters": {
            "type": "array",
            "description": "Special filters used to filter down independently the aggregations' values and the search results on specific conditions.\nFor the search results, the aggregation filters are used to create a Filter that is put in AND with the eventual existing Filter of the search request to nail down the search results. The filters generated\nby the aggregation filters are put in OR each other if they have the same AggregationName, and then such groups are put in AND.\nFor the aggregation values, only the original Filter of the search request is used to nail down the data to be considered for the aggregations. Then, on top of that, for each aggregator in the search request, a Filter is created to filter down the\naggregation results of that aggregation: depending if the AggregationName of the AggregationFilter matches the AggregationName of the Aggregator, the filter is put in OR (if it matches) or in AND (if it does not match it).\nMoreover, an AggregationFilter ensures that the related value is returned in the AggregationResults also if the top aggregation values returned by default do not contain it.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/AggregationFilter"
            }
          },
          "aggregators": {
            "type": "array",
            "description": "List of aggregators that defines how the items should be aggregated.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/AggregatorBase"
            }
          },
          "filter": {
            "description": "An optional search filter. Limits the document result set.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/FilterBase"
              }
            ]
          },
          "limit": {
            "type": "integer",
            "description": "Limits the document count of the result set.",
            "format": "int32",
            "default": 30
          },
          "pageToken": {
            "type": "string",
            "description": "The token used to retrieve the next page of results. It must be null on first request and only filled with the returned pageToken to request next page of results.",
            "nullable": true
          },
          "searchString": {
            "type": "string",
            "description": "Limits the search by using a query string filter. The Lucene query string syntax is supported.",
            "nullable": true
          },
          "searchBehaviors": {
            "type": "array",
            "description": "An optional list of search behaviors. All the passed behaviors will be applied.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/SearchBehavior"
            }
          },
          "sort": {
            "type": "array",
            "description": "Fields and respective directions requested to sort the search results. Sorting on a not indexed field will throw an exception.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/SortInfo"
            }
          }
        }
      },
      "AggregatorBase": {
        "type": "object",
        "discriminator": {
          "propertyName": "kind",
          "mapping": {
            "DateRangeAggregator": "#/components/schemas/DateRangeAggregator",
            "GeoDistanceAggregator": "#/components/schemas/GeoDistanceAggregator",
            "NestedAggregator": "#/components/schemas/NestedAggregator",
            "NumericRangeAggregator": "#/components/schemas/NumericRangeAggregator",
            "TermsAggregator": "#/components/schemas/TermsAggregator",
            "TermsRelationAggregator": "#/components/schemas/TermsRelationAggregator",
            "TermsEnumAggregator": "#/components/schemas/TermsEnumAggregator"
          }
        },
        "description": "It is the base class for all aggregators.",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "name",
          "kind"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The slug name of the aggregation. It must be unique per aggregation request.",
            "minLength": 1
          },
          "names": {
            "description": "Language specific field names.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/TranslatedStringDictionary"
              }
            ]
          },
          "aggregators": {
            "type": "array",
            "description": "An optional aggregator list for nested aggregations.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/AggregatorBase"
            }
          },
          "filter": {
            "description": "An optional filter to limit the data set the aggregation is operation on.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/FilterBase"
              }
            ]
          },
          "kind": {
            "type": "string"
          }
        }
      },
      "DateRangeAggregator": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AggregatorBase"
          },
          {
            "type": "object",
            "description": "A multi-bucket range aggregator dedicated for date values.",
            "additionalProperties": false,
            "required": [
              "field",
              "ranges"
            ],
            "properties": {
              "field": {
                "type": "string",
                "description": "The field's ID to execute the aggregation on.",
                "minLength": 1
              },
              "ranges": {
                "type": "array",
                "description": "A list of date time ranges.",
                "items": {
                  "$ref": "#/components/schemas/DateRangeForAggregator"
                }
              }
            }
          }
        ]
      },
      "DateRangeForAggregator": {
        "type": "object",
        "description": "The date range class used in aggregators.",
        "additionalProperties": false,
        "properties": {
          "names": {
            "description": "Language specific range names.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/TranslatedStringDictionary"
              }
            ]
          },
          "from": {
            "type": "string",
            "description": "The from value: it can be a datetime string or a pattern now(+-)(int)(YMDHm).",
            "nullable": true
          },
          "to": {
            "type": "string",
            "description": "The to value: it can be a datetime string or a pattern now(+-)(int)(YMDHm).",
            "nullable": true
          }
        }
      },
      "GeoDistanceAggregator": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AggregatorBase"
          },
          {
            "type": "object",
            "description": "A multi-bucket range aggregator that works on geo_point fields",
            "additionalProperties": false,
            "required": [
              "field",
              "location",
              "ranges"
            ],
            "properties": {
              "field": {
                "type": "string",
                "description": "The field's ID to execute the aggregation on.",
                "minLength": 1
              },
              "location": {
                "description": "The point of origin to calculate the distance from (latitude/longitude).",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/GeoLocation"
                  }
                ]
              },
              "ranges": {
                "type": "array",
                "description": "A list of distance ranges.",
                "items": {
                  "$ref": "#/components/schemas/GeoDistance"
                }
              }
            }
          }
        ]
      },
      "GeoDistance": {
        "type": "object",
        "description": "Stores geo distance information for gei distance aggregation",
        "additionalProperties": false,
        "required": [
          "distance"
        ],
        "properties": {
          "names": {
            "description": "Language specific geo distance names.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/TranslatedStringDictionary"
              }
            ]
          },
          "distance": {
            "type": "number",
            "description": "The distance in meters.",
            "format": "double"
          }
        }
      },
      "NestedAggregator": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AggregatorBase"
          },
          {
            "type": "object",
            "description": "A special single bucket aggregation that enables aggregating on nested documents",
            "additionalProperties": false,
            "required": [
              "path"
            ],
            "properties": {
              "path": {
                "type": "string",
                "description": "The path pointing to the nested object.",
                "minLength": 1
              }
            }
          }
        ]
      },
      "NumericRangeAggregator": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AggregatorBase"
          },
          {
            "type": "object",
            "description": "A multi-bucket range aggregator.",
            "additionalProperties": false,
            "required": [
              "ranges"
            ],
            "properties": {
              "field": {
                "type": "string",
                "description": "The field's ID to execute the aggregation on.",
                "nullable": true
              },
              "ranges": {
                "type": "array",
                "description": "A list of numeric ranges on which aggregate.",
                "items": {
                  "$ref": "#/components/schemas/NumericRangeForAggregator"
                }
              }
            }
          }
        ]
      },
      "NumericRangeForAggregator": {
        "type": "object",
        "description": "The numeric range for aggregator class",
        "additionalProperties": false,
        "properties": {
          "names": {
            "description": "Language specific range names.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/TranslatedStringDictionary"
              }
            ]
          },
          "from": {
            "type": "number",
            "description": "The from value.",
            "format": "double",
            "nullable": true
          },
          "to": {
            "type": "number",
            "description": "The to value.",
            "format": "double",
            "nullable": true
          }
        }
      },
      "TermsAggregator": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AggregatorBase"
          },
          {
            "type": "object",
            "description": "A multi-bucket value aggregator",
            "additionalProperties": false,
            "required": [
              "field"
            ],
            "properties": {
              "field": {
                "type": "string",
                "description": "The field's ID to execute the aggregation on. Only not analyzed fields are supported.",
                "minLength": 1
              },
              "size": {
                "type": "integer",
                "description": "It defines how many term buckets should be returned out of the overall terms list.",
                "format": "int32",
                "nullable": true
              },
              "includes": {
                "type": "array",
                "description": "Includes values for which buckets will be created. Supports regular expression strings or arrays of exact values.",
                "nullable": true,
                "items": {
                  "type": "string"
                }
              },
              "excludes": {
                "type": "array",
                "description": "Excludes values for which buckets will be created. Supports regular expression strings or arrays of exact values.",
                "nullable": true,
                "items": {
                  "type": "string"
                }
              },
              "searchString": {
                "type": "string",
                "description": "Limits the possible returned aggregation values by using a query string filter. The Lucene query string syntax is supported.",
                "nullable": true
              },
              "searchFields": {
                "type": "array",
                "description": "Search fields to be used to search the SearchString value into. If no search field is specified, the Field value is used.",
                "nullable": true,
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "TermsRelationAggregator": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TermsAggregator"
          },
          {
            "type": "object",
            "description": "A multi-bucket value aggregator used for aggregations on relation item ids.",
            "additionalProperties": false,
            "properties": {
              "documentType": {
                "description": "Type of the item target of the relation. It is used to resolve the target ID.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/TermsRelationAggregatorDocumentType"
                  }
                ]
              }
            }
          }
        ]
      },
      "TermsRelationAggregatorDocumentType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Content",
          "ListItem",
          "Schema",
          "User",
          "ContentPermissionSet",
          "Owner",
          "UserRole"
        ],
        "enum": [
          "Content",
          "ListItem",
          "Schema",
          "User",
          "ContentPermissionSet",
          "Owner",
          "UserRole"
        ]
      },
      "TermsEnumAggregator": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TermsAggregator"
          },
          {
            "type": "object",
            "description": "A multi-bucket value aggregator used for aggregations on indexed enum values.",
            "additionalProperties": false,
            "required": [
              "enumType"
            ],
            "properties": {
              "enumType": {
                "type": "string",
                "description": "Type of the enum target of the relation. It is used to resolve the enum translation.",
                "minLength": 1
              }
            }
          }
        ]
      },
      "SortInfo": {
        "type": "object",
        "description": "Sorting information",
        "additionalProperties": false,
        "required": [
          "direction"
        ],
        "properties": {
          "field": {
            "type": "string",
            "description": "The field's ID to sort on.",
            "nullable": true
          },
          "direction": {
            "description": "The sort direction (ascending/descending).",
            "oneOf": [
              {
                "$ref": "#/components/schemas/SortDirection"
              }
            ]
          }
        }
      },
      "SortDirection": {
        "type": "string",
        "description": "The sort direction",
        "x-enumNames": [
          "Asc",
          "Desc"
        ],
        "enum": [
          "Asc",
          "Desc"
        ]
      },
      "Channel": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "sortOrder",
          "searchIndexId",
          "names",
          "sort",
          "sortFields",
          "aggregations",
          "extendedSimpleSearchFields",
          "grantedUserRoleIds",
          "missingResultsDisplayPatterns",
          "audit",
          "viewForAll"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of channel.",
            "minLength": 1
          },
          "sortOrder": {
            "type": "integer",
            "description": "Numeric sort order of the channel. Channels are returned ordered by this field.",
            "format": "int32"
          },
          "searchIndexId": {
            "type": "string",
            "description": "The search index ID where the channel requests the content from. Only RootContentSearchIndex is supported.",
            "minLength": 1
          },
          "filter": {
            "description": "An optional search filter. Limits the content document result set on each search and aggregation request.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/FilterBase"
              }
            ]
          },
          "names": {
            "description": "Language specific names.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/TranslatedStringDictionary"
              }
            ]
          },
          "sort": {
            "type": "array",
            "description": "Default sort order specified for the channel to sort the results of a content search.",
            "items": {
              "$ref": "#/components/schemas/SortInfo"
            }
          },
          "sortFields": {
            "type": "array",
            "description": "Fields to be used for sorting in content browser when displaying the channel. The information is only set and consumed by the client, not by the server.",
            "items": {
              "$ref": "#/components/schemas/SortField"
            }
          },
          "aggregations": {
            "type": "array",
            "description": "An optional list of aggregators. These aggregations are added by default on each aggregation requests.",
            "items": {
              "$ref": "#/components/schemas/AggregatorBase"
            }
          },
          "extendedSimpleSearchFields": {
            "type": "array",
            "description": "An Optional list of fields. These fields extend the list of simple search fields outside the bounds of any schema field configuration.",
            "items": {
              "type": "string"
            }
          },
          "grantedUserRoleIds": {
            "type": "array",
            "description": "User roles granted access to the channel.",
            "items": {
              "type": "string"
            }
          },
          "missingResultsDisplayPatterns": {
            "description": "Display pattern to use for rendering details when 0 results are returned",
            "oneOf": [
              {
                "$ref": "#/components/schemas/TranslatedStringDictionary"
              }
            ]
          },
          "audit": {
            "description": "Audit information.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserAudit"
              }
            ]
          },
          "viewForAll": {
            "type": "boolean",
            "description": "Grants rights to all the users to view the channel."
          }
        }
      },
      "SortField": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "path",
          "names"
        ],
        "properties": {
          "path": {
            "type": "string",
            "description": "The path of the field ({schemaId}.{fieldId})",
            "minLength": 1
          },
          "names": {
            "description": "The translated name of the field to be shown in the UI.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/TranslatedStringDictionary"
              }
            ]
          }
        }
      },
      "ChannelCreateRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "sortFields",
          "names",
          "sortOrder",
          "viewForAll"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the channel.",
            "nullable": true
          },
          "sort": {
            "type": "array",
            "description": "Default sort order specified for the channel to sort the results of a content search.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/SortInfo"
            }
          },
          "sortOrder": {
            "type": "integer",
            "description": "Order in which the channels should be displayed.",
            "format": "int32"
          },
          "sortFields": {
            "type": "array",
            "description": "Fields to be used for sorting in content browser when displaying the channel. The information is only set and consumed by the client, not by the server.",
            "items": {
              "$ref": "#/components/schemas/SortField"
            }
          },
          "names": {
            "description": "Language specific channel names.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/TranslatedStringDictionary"
              }
            ]
          },
          "searchIndexId": {
            "type": "string",
            "description": "Language specific names.",
            "nullable": true
          },
          "grantedUserRoleIds": {
            "type": "array",
            "description": "User roles granted access to the channel.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "aggregations": {
            "type": "array",
            "description": "An optional list of aggregators. These aggregations are added by default on each aggregation requests.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/AggregatorBase"
            }
          },
          "filter": {
            "description": "An optional search filter. Limits the content document result set on each search and aggregation request.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/FilterBase"
              }
            ]
          },
          "extendedSimpleSearchFields": {
            "type": "array",
            "description": "An Optional list of fields. These fields extend the list of simple search fields outside the bounds of any schema field configuration.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "missingResultsDisplayPatterns": {
            "description": "Display pattern to use for rendering details when 0 results are returned",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/TranslatedStringDictionary"
              }
            ]
          },
          "viewForAll": {
            "type": "boolean",
            "description": "Grants rights to all the users to view the channel."
          }
        }
      },
      "ChannelUpdateRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "sortFields",
          "names",
          "sortOrder",
          "viewForAll"
        ],
        "properties": {
          "sort": {
            "type": "array",
            "description": "Default sort order specified for the channel to sort the results of a content search.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/SortInfo"
            }
          },
          "sortOrder": {
            "type": "integer",
            "description": "Order in which the channels should be displayed.",
            "format": "int32"
          },
          "sortFields": {
            "type": "array",
            "description": "Fields to be used for sorting in content browser when displaying the channel. The information is only set and consumed by the client, not by the server.",
            "items": {
              "$ref": "#/components/schemas/SortField"
            }
          },
          "names": {
            "$ref": "#/components/schemas/TranslatedStringDictionary"
          },
          "searchIndexId": {
            "type": "string",
            "description": "Language specific names.",
            "nullable": true
          },
          "grantedUserRoleIds": {
            "type": "array",
            "description": "User roles granted access to the channel.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "aggregations": {
            "type": "array",
            "description": "An optional list of aggregators. These aggregations are added by default on each aggregation requests.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/AggregatorBase"
            }
          },
          "filter": {
            "description": "An optional search filter. Limits the content document result set on each search and aggregation request.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/FilterBase"
              }
            ]
          },
          "extendedSimpleSearchFields": {
            "type": "array",
            "description": "An Optional list of fields. These fields extend the list of simple search fields outside the bounds of any schema field configuration.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "missingResultsDisplayPatterns": {
            "description": "Display pattern to use for rendering details when 0 results are returned",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/TranslatedStringDictionary"
              }
            ]
          },
          "viewForAll": {
            "type": "boolean",
            "description": "Grants rights to all the users to view the channel."
          }
        }
      },
      "ContentPermissionSetDetail": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PermissionSetDetailOfContentRight"
          },
          {
            "type": "object",
            "description": "Detail of a content permission set",
            "additionalProperties": false
          }
        ]
      },
      "PermissionSetDetailOfContentRight": {
        "type": "object",
        "description": "Base class for detail of permission sets",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "id",
          "names",
          "ownerTokenId",
          "exclusive"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The permission set ID.",
            "minLength": 1
          },
          "names": {
            "description": "Language specific permission set names.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/TranslatedStringDictionary"
              }
            ]
          },
          "userRolesRights": {
            "type": "array",
            "description": "A list of content or metadata rights authorizing operations on Content Items or List Items.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PermissionUserRoleRightsOfContentRight"
            }
          },
          "userRolesPermissionSetRights": {
            "type": "array",
            "description": "A list of permission set rights authorizing operations on this permission set.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PermissionUserRoleRightsOfPermissionSetRight"
            }
          },
          "exclusive": {
            "type": "boolean",
            "description": "When true this permission set will derogate all other configured permission sets on the Content Item or List Item."
          },
          "ownerTokenId": {
            "type": "string",
            "description": "The owner token ID. Defines the permission set owner.",
            "minLength": 1
          },
          "audit": {
            "description": "Audit information.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserAuditDetail"
              }
            ]
          }
        }
      },
      "PermissionUserRoleRightsOfContentRight": {
        "type": "object",
        "description": "Rights assigned to a user role.",
        "additionalProperties": false,
        "properties": {
          "userRoleId": {
            "type": "string",
            "description": "The user role ID.",
            "nullable": true
          },
          "names": {
            "description": "Language specific user role names.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/TranslatedStringDictionary"
              }
            ]
          },
          "rights": {
            "type": "array",
            "description": "List of rights: they can be content, metadata or permission set rights, depending on the type defined on the class\n(ContentRight, MetadataRight, PermissionSetRight).",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ContentRight"
            }
          }
        }
      },
      "PermissionUserRoleRightsOfPermissionSetRight": {
        "type": "object",
        "description": "Rights assigned to a user role.",
        "additionalProperties": false,
        "properties": {
          "userRoleId": {
            "type": "string",
            "description": "The user role ID.",
            "nullable": true
          },
          "names": {
            "description": "Language specific user role names.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/TranslatedStringDictionary"
              }
            ]
          },
          "rights": {
            "type": "array",
            "description": "List of rights: they can be content, metadata or permission set rights, depending on the type defined on the class\n(ContentRight, MetadataRight, PermissionSetRight).",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PermissionSetRight"
            }
          }
        }
      },
      "PermissionSetRight": {
        "type": "string",
        "description": "Permission set rights",
        "x-enumNames": [
          "Apply",
          "Manage"
        ],
        "enum": [
          "Apply",
          "Manage"
        ]
      },
      "UserAuditDetail": {
        "type": "object",
        "description": "Audit information",
        "additionalProperties": false,
        "required": [
          "creationDate",
          "modificationDate"
        ],
        "properties": {
          "creationDate": {
            "type": "string",
            "description": "The date on which the document was created.",
            "format": "date-time"
          },
          "modificationDate": {
            "type": "string",
            "description": "The last date on which the document was modified.",
            "format": "date-time"
          },
          "createdByUser": {
            "description": "ID of the user who created the document.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/User"
              }
            ]
          },
          "modifiedByUser": {
            "description": "ID of the last user who modified the document.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/User"
              }
            ]
          }
        }
      },
      "User": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "emailAddress",
          "isDeleted"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "User's Picturepark ID.",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "description": "User's first name.",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "description": "User's last name.",
            "nullable": true
          },
          "emailAddress": {
            "type": "string",
            "description": "Email address of the user (doubles as username).",
            "minLength": 1
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Marks a user that was deleted from the system."
          }
        }
      },
      "ContentPermissionSetCreateRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PermissionSetCreateRequestOfContentRight"
          },
          {
            "type": "object",
            "description": "Request to create a content permission set",
            "additionalProperties": false
          }
        ]
      },
      "PermissionSetCreateRequestOfContentRight": {
        "type": "object",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "names",
          "exclusive"
        ],
        "properties": {
          "names": {
            "description": "Language specific permission set names.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/TranslatedStringDictionary"
              }
            ]
          },
          "userRolesRights": {
            "type": "array",
            "description": "A list of content or metadata rights authorizing operations on Content Items or List Items.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/UserRoleRightsOfContentRight"
            }
          },
          "userRolesPermissionSetRights": {
            "type": "array",
            "description": "A list of permission set rights authorizing operations on this permission set.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/UserRoleRightsOfPermissionSetRight"
            }
          },
          "exclusive": {
            "type": "boolean",
            "description": "When true this permission set will derogate all other configured permission sets on Content Items or List Items."
          },
          "requestId": {
            "type": "string",
            "description": "Optional client reference for this request.\nWill be returned back in response to make easier for clients to match request items with the respective results.\nIt is not persisted anywhere and it is ignored in single operations.",
            "nullable": true
          }
        }
      },
      "UserRoleRightsOfContentRight": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "userRoleId": {
            "type": "string",
            "description": "The user role id.",
            "nullable": true
          },
          "rights": {
            "type": "array",
            "description": "A permission container which can hold content, metadata or permission set rights.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ContentRight"
            }
          }
        }
      },
      "UserRoleRightsOfPermissionSetRight": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "userRoleId": {
            "type": "string",
            "description": "The user role id.",
            "nullable": true
          },
          "rights": {
            "type": "array",
            "description": "A permission container which can hold content, metadata or permission set rights.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PermissionSetRight"
            }
          }
        }
      },
      "ContentPermissionSetUpdateRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PermissionSetUpdateRequestOfContentRight"
          },
          {
            "type": "object",
            "description": "Request to update a content permission set",
            "additionalProperties": false
          }
        ]
      },
      "PermissionSetUpdateRequestOfContentRight": {
        "type": "object",
        "description": "Base class for permission set update requests",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "names"
        ],
        "properties": {
          "names": {
            "description": "Language specific permission set names.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/TranslatedStringDictionary"
              }
            ]
          },
          "userRolesRights": {
            "type": "array",
            "description": "A list of content or metadata rights authorizing operations on Content Items or List Items.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/UserRoleRightsOfContentRight"
            }
          },
          "userRolesPermissionSetRights": {
            "type": "array",
            "description": "A list of permission set rights authorizing operations on this permission set.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/UserRoleRightsOfPermissionSetRight"
            }
          }
        }
      },
      "PermissionSetOwnershipTransferRequest": {
        "type": "object",
        "description": "Request to transfer the ownership of a permission set",
        "additionalProperties": false,
        "required": [
          "transferUserId"
        ],
        "properties": {
          "transferUserId": {
            "type": "string",
            "description": "The ID of the user to whom the permission set ownership should be transferred to.",
            "minLength": 1
          }
        }
      },
      "BulkResponse": {
        "type": "object",
        "description": "Response to a bulk operation",
        "additionalProperties": false,
        "properties": {
          "rows": {
            "type": "array",
            "description": "Rows of the bulk response.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/BulkResponseRow"
            }
          }
        }
      },
      "BulkResponseRow": {
        "type": "object",
        "description": "Row information of a bulk response",
        "additionalProperties": false,
        "required": [
          "id",
          "version",
          "succeeded",
          "status"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the document.",
            "minLength": 1
          },
          "version": {
            "type": "integer",
            "description": "Version of the document.",
            "format": "int64"
          },
          "error": {
            "type": "string",
            "description": "Eventual error.",
            "nullable": true
          },
          "succeeded": {
            "type": "boolean",
            "description": "True if item successfully saved. False otherwise."
          },
          "status": {
            "type": "integer",
            "description": "Returned status code.",
            "format": "int32"
          },
          "requestId": {
            "type": "string",
            "description": "The identifier provided by user in the corresponding request (or null if none was provided). Used only in bulk creation.",
            "nullable": true
          }
        }
      },
      "ContentPermissionSetCreateManyRequest": {
        "type": "object",
        "description": "Request to create multiple content permission sets",
        "additionalProperties": false,
        "properties": {
          "items": {
            "type": "array",
            "description": "Content permission set update requests.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ContentPermissionSetCreateRequest"
            }
          }
        }
      },
      "ContentPermissionSetUpdateManyRequest": {
        "type": "object",
        "description": "Request to update multiple content permission sets",
        "additionalProperties": false,
        "properties": {
          "items": {
            "type": "array",
            "description": "Content permission sets update requests.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ContentPermissionSetUpdateRequestItem"
            }
          }
        }
      },
      "ContentPermissionSetUpdateRequestItem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PermissionSetUpdateRequestItemOfContentRight"
          },
          {
            "type": "object",
            "description": "Request to update a content permission set",
            "additionalProperties": false
          }
        ]
      },
      "PermissionSetUpdateRequestItemOfContentRight": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PermissionSetUpdateRequestOfContentRight"
          },
          {
            "type": "object",
            "description": "Base class for permission set update requests",
            "x-abstract": true,
            "additionalProperties": false,
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "type": "string",
                "description": "The permission set ID.",
                "minLength": 1
              }
            }
          }
        ]
      },
      "PermissionSetDeleteManyRequest": {
        "type": "object",
        "description": "Request to delete multiple permission sets",
        "additionalProperties": false,
        "properties": {
          "permissionSetIds": {
            "type": "array",
            "description": "Permission set IDs.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PermissionSetOwnershipTransferManyRequest": {
        "type": "object",
        "description": "Request to transfer the ownership of multiple permission sets",
        "additionalProperties": false,
        "properties": {
          "items": {
            "type": "array",
            "description": "Permission set ownership transfer requests.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PermissionSetOwnershipTransferItem"
            }
          }
        }
      },
      "PermissionSetOwnershipTransferItem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PermissionSetOwnershipTransferRequest"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "permissionSetId": {
                "type": "string",
                "description": "The permission set ID.",
                "nullable": true
              }
            }
          }
        ]
      },
      "PermissionSetUserPermissionRights": {
        "type": "object",
        "description": "Rights that the current user has on a permission set",
        "additionalProperties": false,
        "properties": {
          "permissionSetId": {
            "type": "string",
            "description": "Permission set ID.",
            "nullable": true
          },
          "permissionSetRights": {
            "type": "array",
            "description": "List of rights on the permission set specified by PermissionSetId",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PermissionSetRight"
            }
          }
        }
      },
      "PermissionSetSearchResult": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SearchBehaviorBaseResultOfPermissionSet"
          },
          {
            "type": "object",
            "description": "Result of a permission set search operation",
            "additionalProperties": false
          }
        ]
      },
      "SearchBehaviorBaseResultOfPermissionSet": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResultOfPermissionSet"
          },
          {
            "type": "object",
            "description": "Base class for search result queries that support SearchBehaviors",
            "additionalProperties": false,
            "properties": {
              "searchString": {
                "type": "string",
                "description": "The search string used to query the data.",
                "nullable": true
              },
              "isSearchStringRewritten": {
                "type": "boolean",
                "description": "Flag to notify if the SearchString was modified compared to the original requested one."
              },
              "queryDebugInformation": {
                "type": "array",
                "description": "Additional information regarding the query execution and reason of the matched documents. Multiple items are returned if multiple queries were performed.",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/QueryDebugInformation"
                }
              }
            }
          }
        ]
      },
      "BaseResultOfPermissionSet": {
        "type": "object",
        "description": "Base class for search results",
        "additionalProperties": false,
        "required": [
          "results",
          "totalResults",
          "elapsedMilliseconds"
        ],
        "properties": {
          "totalResults": {
            "type": "integer",
            "description": "The total number of matching documents.",
            "format": "int64"
          },
          "results": {
            "type": "array",
            "description": "The matched documents.",
            "items": {
              "$ref": "#/components/schemas/PermissionSet"
            }
          },
          "elapsedMilliseconds": {
            "type": "integer",
            "description": "The search execution time in milliseconds.",
            "format": "int64"
          },
          "pageToken": {
            "type": "string",
            "description": "An optional token to access the next page of results for those endpoints that support backend scrolling logic.",
            "nullable": true
          }
        }
      },
      "PermissionSet": {
        "type": "object",
        "description": "Permission set",
        "additionalProperties": false,
        "required": [
          "id",
          "names",
          "exclusive"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The permission set ID.",
            "minLength": 1
          },
          "exclusive": {
            "type": "boolean",
            "description": "When true this permission set will derogate all other configured permission sets.\nCannot be changed after creation."
          },
          "names": {
            "description": "Language specific permission set names.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/TranslatedStringDictionary"
              }
            ]
          }
        }
      },
      "PermissionSetSearchRequest": {
        "type": "object",
        "description": "Request to search permission sets",
        "additionalProperties": false,
        "required": [
          "limit",
          "debugMode"
        ],
        "properties": {
          "searchString": {
            "type": "string",
            "description": "The string used to query the data. The Lucene query string syntax is supported.",
            "nullable": true
          },
          "searchBehaviors": {
            "type": "array",
            "description": "An optional list of search behaviors. All the passed behaviors will be applied in the specified order.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/SearchBehavior"
            }
          },
          "sort": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/SortInfo"
            }
          },
          "limit": {
            "type": "integer",
            "description": "Limits the number of the returned schemas. Defaults to 30.",
            "format": "int32",
            "default": 30
          },
          "pageToken": {
            "type": "string",
            "description": "The token used to retrieve the next page of results. It must be null on first request and only filled with the returned pageToken to request next page of results.",
            "nullable": true
          },
          "filter": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/FilterBase"
              }
            ]
          },
          "rightFilter": {
            "description": "Filters based on the PermissionSetRight of the user.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/PermissionSetRight"
              }
            ]
          },
          "debugMode": {
            "type": "boolean",
            "description": "Enable debug mode: additional debug information regarding the query execution and reason of the matched documents are returned in the result.\nWarning! It severely affects performance.",
            "default": false
          },
          "searchLanguages": {
            "type": "array",
            "description": "When searching in multi language fields, limit the searchable fields to the ones corresponding to the specified languages.\nIf not specified, all metadata languages defined in the system are used.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ContentDetail": {
        "type": "object",
        "description": "Content detail",
        "additionalProperties": false,
        "required": [
          "contentSchemaId",
          "id",
          "ownerTokenId",
          "contentType",
          "lifeCycle"
        ],
        "properties": {
          "contentSchemaId": {
            "type": "string",
            "description": "The ID of the content schema. The SchemaType of the specified schema must be Content.\nThe schema specifies the structure of the Content dictionary.",
            "minLength": 1
          },
          "layerSchemaIds": {
            "type": "array",
            "description": "An optional list of IDs of the schemas that form the layers of the content.\nThe SchemaType of the specified schemas must be Layer.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "brokenReferenceIds": {
            "type": "array",
            "description": "All the IDs of the referenced list items (tagboxes) that do not exist in the system.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "brokenIndirectReferenceIds": {
            "type": "array",
            "description": "All the IDs of the indirectly referenced list items (tagboxes) that do not exist in the system.\nThey are referenced list items that reference at least a list item that do not exist in the system.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "brokenRelationTargetIds": {
            "type": "array",
            "description": "All the IDs of the contents or list items target of a relation that do not exist in the system.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "content": {
            "type": "object",
            "description": "The content data of the content. It's an object of dynamic metadata whose structure is defined in the Content schema identified.\nby the ContentSchemaId property.",
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "description": "The metadata belonging to the layers of the content. It's a dictionary of dynamic metadata whose structure is defined in the Layer schemas identified\nby the LayerSchemaIds property.",
            "nullable": true,
            "additionalProperties": {}
          },
          "id": {
            "type": "string",
            "description": "The content ID.",
            "minLength": 1
          },
          "contentPermissionSetIds": {
            "type": "array",
            "description": "An optional list of content permission set IDs which control content permissions. These permissions control content accessibility for the users that do not own the content.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "outputs": {
            "type": "array",
            "description": "The Outputs generated from the content. They identifies the rendered files generated by the system.\nThey are available only for file base contents, and they depends on the output formats configured in the system.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Output"
            }
          },
          "audit": {
            "description": "Audit information.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserAuditDetail"
              }
            ]
          },
          "ownerTokenId": {
            "type": "string",
            "description": "The owner token ID. Defines the content owner.",
            "minLength": 1
          },
          "owner": {
            "description": "The resolved owner.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/User"
              }
            ]
          },
          "contentType": {
            "description": "Content type.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ContentType"
              }
            ]
          },
          "displayValues": {
            "description": "Contains language specific display values. They are calculated values based on the template stored in the Content schema DisplayPatterns property.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/DisplayValueDictionary"
              }
            ]
          },
          "lifeCycle": {
            "description": "The actual lifecycle value of the content. Becomes Inactive when the content is deleted.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/LifeCycle"
              }
            ]
          },
          "contentRights": {
            "type": "array",
            "description": "List of content rights the user has on this content",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ContentRight"
            }
          },
          "activity": {
            "description": "Activity information: dynamically mapped from configured metadata fields or from audit information if no mapping is configured.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/Activity"
              }
            ]
          }
        }
      },
      "Output": {
        "type": "object",
        "discriminator": {
          "propertyName": "kind",
          "mapping": {
            "OutputDetail": "#/components/schemas/OutputDetail"
          }
        },
        "description": "Output",
        "additionalProperties": false,
        "required": [
          "outputFormatId",
          "contentId",
          "renderingState",
          "dynamicRendering",
          "kind",
          "attemptsLeft",
          "fileVersion"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the output. Can be null for dynamic outputs which are not rendered yet.",
            "nullable": true
          },
          "outputFormatId": {
            "type": "string",
            "description": "The ID of the output format this output represents.",
            "minLength": 1
          },
          "contentId": {
            "type": "string",
            "description": "The ID of the content for which this output has been created.",
            "minLength": 1
          },
          "renderingState": {
            "description": "The rendering state of the output file.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/OutputRenderingState"
              }
            ]
          },
          "detail": {
            "description": "Detail of the output that are format dependent.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/OutputDataBase"
              }
            ]
          },
          "backupTimestamp": {
            "type": "string",
            "description": "Date and time of the backup of the output file.",
            "format": "date-time",
            "nullable": true
          },
          "attemptsLeft": {
            "type": "integer",
            "description": "Number of rendering retry attempts left.",
            "format": "int32"
          },
          "fileVersion": {
            "type": "integer",
            "description": "Version counter incremented every time this output is rendered (or in case of Original when new original is uploaded).",
            "format": "int32"
          },
          "dynamicRendering": {
            "type": "boolean",
            "description": "Whether this Output belongs to a dynamic OutputFormat"
          },
          "kind": {
            "type": "string"
          }
        }
      },
      "OutputRenderingState": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "InProgress",
          "Completed",
          "Failed",
          "Skipped",
          "NoLicense",
          "RerenderRequested"
        ],
        "enum": [
          "InProgress",
          "Completed",
          "Failed",
          "Skipped",
          "NoLicense",
          "RerenderRequested"
        ]
      },
      "OutputDataBase": {
        "type": "object",
        "discriminator": {
          "propertyName": "kind",
          "mapping": {
            "OutputDataImage": "#/components/schemas/OutputDataImage",
            "OutputDataAudio": "#/components/schemas/OutputDataAudio",
            "OutputDataVideo": "#/components/schemas/OutputDataVideo",
            "OutputDataDocument": "#/components/schemas/OutputDataDocument",
            "OutputDataVector": "#/components/schemas/OutputDataVector",
            "OutputDataDefault": "#/components/schemas/OutputDataDefault"
          }
        },
        "description": "Base class for the output detail dependent on the file format.",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "kind"
        ],
        "properties": {
          "fileExtension": {
            "type": "string",
            "description": "The extension of the file.",
            "nullable": true
          },
          "filePath": {
            "type": "string",
            "description": "The path where the file is stored.",
            "nullable": true
          },
          "fileSizeInBytes": {
            "type": "integer",
            "description": "The size of the file in bytes.",
            "format": "int64",
            "nullable": true
          },
          "sha1Hash": {
            "type": "string",
            "description": "The SHA-1 hash of the file.",
            "nullable": true
          },
          "originalFileName": {
            "type": "string",
            "description": "The original filename of the file.",
            "nullable": true
          },
          "kind": {
            "type": "string"
          }
        }
      },
      "OutputDataImage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/OutputDataBase"
          },
          {
            "type": "object",
            "description": "Output information for an image file.",
            "additionalProperties": false,
            "properties": {
              "width": {
                "type": "integer",
                "description": "The width of the image.",
                "format": "int32"
              },
              "height": {
                "type": "integer",
                "description": "The height of the image.",
                "format": "int32"
              }
            }
          }
        ]
      },
      "OutputDataAudio": {
        "allOf": [
          {
            "$ref": "#/components/schemas/OutputDataBase"
          },
          {
            "type": "object",
            "description": "Output information for an audio file.",
            "additionalProperties": false,
            "properties": {
              "durationInSeconds": {
                "type": "number",
                "description": "Duration of the audio stream in seconds.",
                "format": "float",
                "nullable": true
              }
            }
          }
        ]
      },
      "OutputDataVideo": {
        "allOf": [
          {
            "$ref": "#/components/schemas/OutputDataBase"
          },
          {
            "type": "object",
            "description": "Output information for a video file.",
            "additionalProperties": false,
            "properties": {
              "durationInSeconds": {
                "type": "number",
                "description": "Duration of the video in seconds.",
                "format": "float"
              },
              "width": {
                "type": "integer",
                "description": "With of the video.",
                "format": "int32"
              },
              "height": {
                "type": "integer",
                "description": "Height of the video.",
                "format": "int32"
              },
              "sprites": {
                "type": "array",
                "description": "The sprites making up the key frames of the video.",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/Sprite"
                }
              }
            }
          }
        ]
      },
      "Sprite": {
        "type": "object",
        "description": "The sprite of a video sprite",
        "additionalProperties": false,
        "required": [
          "width",
          "height",
          "y",
          "x",
          "start",
          "end"
        ],
        "properties": {
          "width": {
            "type": "integer",
            "description": "The width of the sprite.",
            "format": "int32"
          },
          "height": {
            "type": "integer",
            "description": "The height of the sprite.",
            "format": "int32"
          },
          "y": {
            "type": "integer",
            "description": "Y coordinate of the sprite in the saved file.",
            "format": "int32"
          },
          "x": {
            "type": "integer",
            "description": "X coordinate of the sprite in the saved file.",
            "format": "int32"
          },
          "start": {
            "type": "string",
            "description": "The starting point in time of the sprite in the video.",
            "format": "time-span"
          },
          "end": {
            "type": "string",
            "description": "The ending point in time of the sprite in the video.",
            "format": "time-span"
          }
        }
      },
      "OutputDataDocument": {
        "allOf": [
          {
            "$ref": "#/components/schemas/OutputDataBase"
          },
          {
            "type": "object",
            "description": "Output information for a document file.",
            "additionalProperties": false,
            "properties": {
              "pageCount": {
                "type": "integer",
                "description": "Number of document's pages.",
                "format": "int32"
              }
            }
          }
        ]
      },
      "OutputDataVector": {
        "allOf": [
          {
            "$ref": "#/components/schemas/OutputDataBase"
          },
          {
            "type": "object",
            "description": "Output information for a vector file.",
            "additionalProperties": false
          }
        ]
      },
      "OutputDataDefault": {
        "allOf": [
          {
            "$ref": "#/components/schemas/OutputDataBase"
          },
          {
            "type": "object",
            "description": "Default output information",
            "additionalProperties": false
          }
        ]
      },
      "OutputDetail": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Output"
          },
          {
            "type": "object",
            "description": "Output detail",
            "additionalProperties": false
          }
        ]
      },
      "DisplayValueDictionary": {
        "type": "object",
        "additionalProperties": {
          "type": "string"
        }
      },
      "LifeCycle": {
        "type": "string",
        "description": "Lifecycle",
        "x-enumNames": [
          "Draft",
          "Active",
          "Inactive",
          "Deleted"
        ],
        "enum": [
          "Draft",
          "Active",
          "Inactive",
          "Deleted"
        ]
      },
      "Activity": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "creationDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "modificationDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "ContentResolveBehavior": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Content",
          "LinkedListItems",
          "Metadata",
          "Outputs",
          "InnerDisplayValueThumbnail",
          "InnerDisplayValueList",
          "InnerDisplayValueDetail",
          "InnerDisplayValueName",
          "Owner",
          "Permissions",
          "OuterDisplayValueThumbnail",
          "OuterDisplayValueList",
          "OuterDisplayValueDetail",
          "OuterDisplayValueName"
        ],
        "enum": [
          "Content",
          "LinkedListItems",
          "Metadata",
          "Outputs",
          "InnerDisplayValueThumbnail",
          "InnerDisplayValueList",
          "InnerDisplayValueDetail",
          "InnerDisplayValueName",
          "Owner",
          "Permissions",
          "OuterDisplayValueThumbnail",
          "OuterDisplayValueList",
          "OuterDisplayValueDetail",
          "OuterDisplayValueName"
        ]
      },
      "ThumbnailSize": {
        "type": "string",
        "description": "Values that represent thumbnail sizes.",
        "x-enumNames": [
          "Small",
          "Medium",
          "Large",
          "Preview"
        ],
        "enum": [
          "Small",
          "Medium",
          "Large",
          "Preview"
        ]
      },
      "ContentCreateRequest": {
        "type": "object",
        "description": "Request to create a content",
        "additionalProperties": false,
        "required": [
          "contentSchemaId"
        ],
        "properties": {
          "contentSchemaId": {
            "type": "string",
            "description": "The ID of the content schema. The SchemaType of the specified schema must be Content.\nThe schema specifies the structure of the Content dictionary.",
            "minLength": 1
          },
          "layerSchemaIds": {
            "type": "array",
            "description": "An optional list of IDs of the schemas that form the layers of the content.\nThe SchemaType of the specified schemas must be Layer.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "content": {
            "type": "object",
            "description": "The content data of the content. It's an object of dynamic metadata whose structure is defined in the Content schema identified by the ContentSchemaId property.",
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "description": "The dynamic data structure matching the field schematics of the schemas with type layer (LayerSchemaIds).\nThe metadata belonging to the layers of the content. It's a dictionary of dynamic metadata whose structure is defined in the Layer schemas identified\nby the LayerSchemaIds property.",
            "nullable": true,
            "additionalProperties": {}
          },
          "contentPermissionSetIds": {
            "type": "array",
            "description": "An optional list of content permission set IDs which control content permissions. These permissions control content accessibility for the users that do not own the content.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "requestId": {
            "type": "string",
            "description": "Optional client reference for this request.\nWill be returned back in response to make easier for clients to match request items with the respective results.\nIt is not persisted anywhere and it is ignored in single operations.",
            "nullable": true
          }
        }
      },
      "ContentMetadataUpdateRequest": {
        "type": "object",
        "description": "Request to update content metadata",
        "additionalProperties": false,
        "required": [
          "layerSchemasUpdateOptions",
          "layerFieldsUpdateOptions",
          "contentFieldsUpdateOptions"
        ],
        "properties": {
          "layerSchemaIds": {
            "type": "array",
            "description": "An optional list of IDs of the schemas that should be updated/replaced based on the options below and Metadata provided.\nThe SchemaType of the specified schemas must be Layer.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "content": {
            "type": "object",
            "description": "The content data of the content. It's an object of dynamic metadata whose structure is defined in the Content schema identified by\nthe ContentSchemaId property. Updating the Content property is only possible for virtual items (contents\nwhose ContentType is Virtual).\nUpdate of content data will be done only if this attribute has any data, i.e. if it's not null or empty.",
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "description": "The dynamic data structure matching the field schematics of the schemas with type layer (LayerSchemaIds).\nThe metadata belonging to the layers of the content. It's a dictionary of dynamic metadata whose structure is defined in the Layer schemas identified\nby the LayerSchemaIds property.\nIf there are no data for a specified LayerSchemaId, it is treated as empty.",
            "nullable": true,
            "additionalProperties": {}
          },
          "layerSchemasUpdateOptions": {
            "description": "Options to modify the behavior for updating the layers.\nMerge: the content is updated so that the assigned layers to the content will be a merge of the ones specified in the LayerSchemaIds property\nand the ones already existing; existing assigned layers not specified in the property are kept and missing layers are assigned.\nReplace: the content is updated so that only the layers specified in the LayerSchemaIds property are assigned to the content;\nexisting assigned layers not specified in the property are removed and missing layers are assigned.\nDefaults to Merge.",
            "default": "Merge",
            "oneOf": [
              {
                "$ref": "#/components/schemas/UpdateOption"
              }
            ]
          },
          "layerFieldsUpdateOptions": {
            "description": "Options to modify the behavior for updating the values of schemas.\nMerge: the values specified in the Metadata dictionary are merged to the existing values of the corresponding schema on the content.\nReplace: the values specified in the Metadata dictionary entirely replace any existing value of the corresponding schema on the content.\nDefaults to Merge.",
            "default": "Merge",
            "oneOf": [
              {
                "$ref": "#/components/schemas/UpdateOption"
              }
            ]
          },
          "contentFieldsUpdateOptions": {
            "description": "Options to modify the behavior for updating the content.\nMerge: the values specified in the Content object are merged to the existing content.\nReplace: the values specified in the Content object entirely replace the content.\nDefaults to Merge.",
            "default": "Merge",
            "oneOf": [
              {
                "$ref": "#/components/schemas/UpdateOption"
              }
            ]
          }
        }
      },
      "UpdateOption": {
        "type": "string",
        "description": "Controls the update of metadata",
        "x-enumNames": [
          "Merge",
          "Replace"
        ],
        "enum": [
          "Merge",
          "Replace"
        ]
      },
      "ContentPermissionsUpdateRequest": {
        "type": "object",
        "description": "Request to update the permissions of a content",
        "additionalProperties": false,
        "properties": {
          "contentPermissionSetIds": {
            "type": "array",
            "description": "A list of content permission set IDs which control content permissions that will be updated on the content.\nThese permissions control content accessibility for the users that do not own the content.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ContentOwnershipTransferRequest": {
        "type": "object",
        "description": "Request to transfer the content ownership",
        "additionalProperties": false,
        "required": [
          "transferUserId"
        ],
        "properties": {
          "transferUserId": {
            "type": "string",
            "description": "The ID of the user to whom the content ownership has to be transferred to.",
            "minLength": 1
          }
        }
      },
      "ContentFileUpdateRequest": {
        "type": "object",
        "description": "Request to update a content file",
        "additionalProperties": false,
        "required": [
          "fileTransferId"
        ],
        "properties": {
          "fileTransferId": {
            "type": "string",
            "description": "ID of the file transfer to use to replace the content file.",
            "minLength": 1
          }
        }
      },
      "ContentReferencesResult": {
        "type": "object",
        "description": "Result to a get content references operation",
        "additionalProperties": false,
        "properties": {
          "metadataReferences": {
            "description": "List of references. Only available when requested in the request.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/MetadataReferenceResult"
              }
            ]
          },
          "shareReferences": {
            "description": "List of share references",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ContentShareReferenceResult"
              }
            ]
          }
        }
      },
      "MetadataReferenceResult": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResultOfMetadataReference"
          },
          {
            "type": "object",
            "description": "Result for getting references.",
            "additionalProperties": false,
            "properties": {
              "isReferencedByRestrictedItem": {
                "type": "boolean",
                "description": "Indicates if any reference is originating from an item that the current user does not have access to.",
                "nullable": true
              }
            }
          }
        ]
      },
      "BaseResultOfMetadataReference": {
        "type": "object",
        "description": "Base class for search results",
        "additionalProperties": false,
        "required": [
          "results",
          "totalResults",
          "elapsedMilliseconds"
        ],
        "properties": {
          "totalResults": {
            "type": "integer",
            "description": "The total number of matching documents.",
            "format": "int64"
          },
          "results": {
            "type": "array",
            "description": "The matched documents.",
            "items": {
              "$ref": "#/components/schemas/MetadataReference"
            }
          },
          "elapsedMilliseconds": {
            "type": "integer",
            "description": "The search execution time in milliseconds.",
            "format": "int64"
          },
          "pageToken": {
            "type": "string",
            "description": "An optional token to access the next page of results for those endpoints that support backend scrolling logic.",
            "nullable": true
          }
        }
      },
      "MetadataReference": {
        "type": "object",
        "description": "Reference to a metadata item",
        "additionalProperties": false,
        "required": [
          "targetMetadataItemId",
          "isRestricted"
        ],
        "properties": {
          "targetMetadataItemId": {
            "type": "string",
            "description": "Target ID of reference.",
            "minLength": 1
          },
          "isRestricted": {
            "type": "boolean",
            "description": "Indicates if the source of the reference is restricted because of permissions.\nIf this is true and the SourceMetadataItemId property is filled, the user does not have the\nedit permission on the source metadata item. If the SourceMetadataItemId is null, the user also\ndoes not have the view permission on that item."
          },
          "sourceMetadataItemId": {
            "type": "string",
            "description": "ID of the source of the reference.",
            "nullable": true
          },
          "sourceDocType": {
            "type": "string",
            "description": "DocType of the source of the reference.",
            "nullable": true
          }
        }
      },
      "ContentShareReferenceResult": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResultOfContentShareReference"
          },
          {
            "type": "object",
            "description": "Result class for share reference search",
            "additionalProperties": false
          }
        ]
      },
      "BaseResultOfContentShareReference": {
        "type": "object",
        "description": "Base class for search results",
        "additionalProperties": false,
        "required": [
          "results",
          "totalResults",
          "elapsedMilliseconds"
        ],
        "properties": {
          "totalResults": {
            "type": "integer",
            "description": "The total number of matching documents.",
            "format": "int64"
          },
          "results": {
            "type": "array",
            "description": "The matched documents.",
            "items": {
              "$ref": "#/components/schemas/ContentShareReference"
            }
          },
          "elapsedMilliseconds": {
            "type": "integer",
            "description": "The search execution time in milliseconds.",
            "format": "int64"
          },
          "pageToken": {
            "type": "string",
            "description": "An optional token to access the next page of results for those endpoints that support backend scrolling logic.",
            "nullable": true
          }
        }
      },
      "ContentShareReference": {
        "type": "object",
        "description": "Share information for a share referencing a content",
        "additionalProperties": false,
        "required": [
          "shareType"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the share.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name of the share.",
            "nullable": true
          },
          "audit": {
            "description": "Audit information.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserAudit"
              }
            ]
          },
          "shareType": {
            "description": "Type of the share.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ShareType"
              }
            ]
          },
          "emailAddress": {
            "type": "string",
            "description": "The email address of the user who created the share.",
            "nullable": true
          }
        }
      },
      "ShareType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Basic",
          "Embed"
        ],
        "enum": [
          "Basic",
          "Embed"
        ]
      },
      "ContentReferencesRequest": {
        "type": "object",
        "description": "Request to get the references to a content",
        "additionalProperties": false,
        "properties": {
          "references": {
            "description": "Limits the number of the returned metadata references by setting paging information.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/MetadataReferencesPagingRequest"
              }
            ]
          },
          "shares": {
            "description": "Limits the number of the returned share references by setting paging information.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/PagingRequest"
              }
            ]
          }
        }
      },
      "MetadataReferencesPagingRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PagingRequest"
          },
          {
            "type": "object",
            "description": "Request to get paginated metadata references",
            "additionalProperties": false,
            "properties": {
              "fetchReferencedByRestrictedItem": {
                "type": "boolean",
                "description": "Set to true to check if any incoming references are originating from an item the current user does not have full access to."
              }
            }
          }
        ]
      },
      "PagingRequest": {
        "type": "object",
        "description": "Request to page data",
        "additionalProperties": false,
        "required": [
          "limit"
        ],
        "properties": {
          "limit": {
            "type": "integer",
            "description": "Limits the number of the returned schemas. Defaults to 0.",
            "format": "int32"
          },
          "pageToken": {
            "type": "string",
            "description": "The token used to retrieve the next page of results. It must be null on first request and only filled with the returned pageToken to request next page of results.",
            "nullable": true
          }
        }
      },
      "OutputResolveResult": {
        "type": "object",
        "description": "Result of output resolution.",
        "additionalProperties": false,
        "required": [
          "outputFormatId",
          "contentId",
          "renderingState",
          "dynamicRendering"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of output.",
            "nullable": true
          },
          "outputFormatId": {
            "type": "string",
            "description": "ID of output format.",
            "minLength": 1
          },
          "contentId": {
            "type": "string",
            "description": "ID of content.",
            "minLength": 1
          },
          "renderingState": {
            "description": "Rendering state of output.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/OutputRenderingState"
              }
            ]
          },
          "dynamicRendering": {
            "type": "boolean",
            "description": "Whether this Output belongs to a dynamic OutputFormat"
          },
          "fileSize": {
            "type": "integer",
            "description": "Size of file, if already known",
            "format": "int64",
            "nullable": true
          }
        }
      },
      "ContentDownloadLinkCreateRequest": {
        "type": "object",
        "description": "Request to create a content download link",
        "additionalProperties": false,
        "required": [
          "contents",
          "notifyProgress"
        ],
        "properties": {
          "contents": {
            "type": "array",
            "description": "List of content information to generate the download link",
            "items": {
              "$ref": "#/components/schemas/ContentDownloadRequestItem"
            }
          },
          "notifyProgress": {
            "type": "boolean",
            "description": "Indicates if a progress message shall be shown to the user, notifying once the download is completed."
          }
        }
      },
      "ContentDownloadRequestItem": {
        "type": "object",
        "description": "Information needed to generate a content download link",
        "additionalProperties": false,
        "required": [
          "contentId",
          "outputFormatId"
        ],
        "properties": {
          "contentId": {
            "type": "string",
            "description": "ID of the content that is going to be downloaded.",
            "minLength": 1
          },
          "outputFormatId": {
            "type": "string",
            "description": "ID of the output format that is going to be downloaded.",
            "minLength": 1
          }
        }
      },
      "DownloadLink": {
        "type": "object",
        "description": "Download link information",
        "additionalProperties": false,
        "required": [
          "downloadToken",
          "downloadUrl"
        ],
        "properties": {
          "downloadToken": {
            "type": "string",
            "description": "Token of the download, used to generate the url.",
            "minLength": 1
          },
          "downloadUrl": {
            "type": "string",
            "description": "Url of the download link.",
            "minLength": 1
          }
        }
      },
      "ContentCreateManyRequest": {
        "type": "object",
        "description": "Request to create multiple contents",
        "additionalProperties": false,
        "required": [
          "items",
          "allowMissingDependencies"
        ],
        "properties": {
          "allowMissingDependencies": {
            "type": "boolean",
            "description": "Allows creating contents that refer to list items or contents that don't exist in the system."
          },
          "items": {
            "type": "array",
            "description": "Items to be created.",
            "items": {
              "$ref": "#/components/schemas/ContentCreateRequest"
            }
          }
        }
      },
      "ContentMetadataUpdateManyRequest": {
        "type": "object",
        "description": "Request to update many contents metadata",
        "additionalProperties": false,
        "required": [
          "items",
          "allowMissingDependencies"
        ],
        "properties": {
          "allowMissingDependencies": {
            "type": "boolean",
            "description": "Allows storing references to list items or contents that don't exist in the system."
          },
          "items": {
            "type": "array",
            "description": "Update items",
            "items": {
              "$ref": "#/components/schemas/ContentMetadataUpdateItem"
            }
          }
        }
      },
      "ContentMetadataUpdateItem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ContentMetadataUpdateRequest"
          },
          {
            "type": "object",
            "description": "Item to update content metadata",
            "additionalProperties": false,
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "type": "string",
                "description": "The ID of the content.",
                "minLength": 1
              }
            }
          }
        ]
      },
      "ContentPermissionsUpdateManyRequest": {
        "type": "object",
        "description": "Request to update multiple contents permissions",
        "additionalProperties": false,
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "description": "Content permissions update items",
            "items": {
              "$ref": "#/components/schemas/ContentPermissionsUpdateItem"
            }
          }
        }
      },
      "ContentPermissionsUpdateItem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ContentPermissionsUpdateRequest"
          },
          {
            "type": "object",
            "description": "Content permissions update item",
            "additionalProperties": false,
            "required": [
              "contentId"
            ],
            "properties": {
              "contentId": {
                "type": "string",
                "description": "ID of the content.",
                "minLength": 1
              }
            }
          }
        ]
      },
      "ContentOwnershipTransferManyRequest": {
        "type": "object",
        "description": "Request to transfer multiple contents ownerships",
        "additionalProperties": false,
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "description": "List of Content Permissions ownership transfer items.",
            "items": {
              "$ref": "#/components/schemas/ContentOwnershipTransferItem"
            }
          }
        }
      },
      "ContentOwnershipTransferItem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ContentOwnershipTransferRequest"
          },
          {
            "type": "object",
            "description": "Content ownership transfer item",
            "additionalProperties": false,
            "required": [
              "contentId"
            ],
            "properties": {
              "contentId": {
                "type": "string",
                "description": "The content ID.",
                "minLength": 1
              }
            }
          }
        ]
      },
      "ContentDeleteManyRequest": {
        "type": "object",
        "description": "Request to delete multiple contents.",
        "additionalProperties": false,
        "required": [
          "contentIds",
          "forceReferenceRemoval",
          "notifyProgress"
        ],
        "properties": {
          "contentIds": {
            "type": "array",
            "description": "IDs of the contents to delete.",
            "items": {
              "type": "string"
            }
          },
          "forceReferenceRemoval": {
            "type": "boolean",
            "description": "A value indicating whether references to the contents should be removed."
          },
          "notifyProgress": {
            "type": "boolean",
            "description": "Create a progress notification and notify on progress. Notifications are shown in the UI only to the same use who triggered the delete request."
          }
        }
      },
      "ContentDeleteManyFilterRequest": {
        "type": "object",
        "description": "Request to delete multiple contents based on a provided filter",
        "additionalProperties": false,
        "required": [
          "filterRequest",
          "forceReferenceRemoval",
          "notifyProgress"
        ],
        "properties": {
          "filterRequest": {
            "description": "Filters the contents that need to be deleted.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ContentFilterRequest"
              }
            ]
          },
          "forceReferenceRemoval": {
            "type": "boolean",
            "description": "A value indicating whether references to the content items should be removed."
          },
          "notifyProgress": {
            "type": "boolean",
            "description": "Create a progress notification and notify on progress. Notifications are shown in the UI only to the same use who triggered the delete request."
          }
        }
      },
      "ContentFilterRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "searchType",
          "lifeCycleFilter",
          "brokenDependenciesFilter"
        ],
        "properties": {
          "channelId": {
            "type": "string",
            "description": "Limits the simple search fields to the fields available in the specified channel.",
            "nullable": true
          },
          "searchLanguages": {
            "type": "array",
            "description": "Only searches the specified language values. Defaults to all metadata languages of the language configuration.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "searchString": {
            "type": "string",
            "description": "Limits the search by using a query string filter. The Lucene query string syntax is supported.",
            "nullable": true
          },
          "searchType": {
            "description": "Type of search to be performed: against metadata, extracted fulltext from documents or both. Default to Metadata.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ContentSearchType"
              }
            ]
          },
          "collectionId": {
            "type": "string",
            "description": "The collection id.",
            "nullable": true
          },
          "filter": {
            "description": "An optional search filter. Limits the content document result set.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/FilterBase"
              }
            ]
          },
          "lifeCycleFilter": {
            "description": "Limits the content document result set to that life cycle state. Defaults to ActiveOnly.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/LifeCycleFilter"
              }
            ]
          },
          "brokenDependenciesFilter": {
            "description": "Filter the content document result set to those that have or not have broken references",
            "oneOf": [
              {
                "$ref": "#/components/schemas/BrokenDependenciesFilter"
              }
            ]
          },
          "rightsFilter": {
            "type": "array",
            "description": "Limits the content document result set to specific ContentRights the user has",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ContentRight"
            }
          }
        }
      },
      "ContentSearchType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Metadata",
          "FullText",
          "MetadataAndFullText"
        ],
        "enum": [
          "Metadata",
          "FullText",
          "MetadataAndFullText"
        ]
      },
      "LifeCycleFilter": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "ActiveOnly",
          "All",
          "InactiveOnly",
          "ActiveInactiveOnly"
        ],
        "enum": [
          "ActiveOnly",
          "All",
          "InactiveOnly",
          "ActiveInactiveOnly"
        ]
      },
      "BrokenDependenciesFilter": {
        "type": "string",
        "description": "Filter items with broken or not broken dependencies",
        "x-enumNames": [
          "All",
          "NotBrokenOnly",
          "BrokenOnly"
        ],
        "enum": [
          "All",
          "NotBrokenOnly",
          "BrokenOnly"
        ]
      },
      "ContentRestoreManyRequest": {
        "type": "object",
        "description": "Request to restore multiple contents",
        "additionalProperties": false,
        "required": [
          "contentIds",
          "allowMissingDependencies"
        ],
        "properties": {
          "contentIds": {
            "type": "array",
            "description": "IDs of the contents to restore.",
            "items": {
              "type": "string"
            }
          },
          "allowMissingDependencies": {
            "type": "boolean",
            "description": "Allows creating contents that refer to list items or contents that don't exist in the system."
          }
        }
      },
      "ContentManyReferencesRequest": {
        "type": "object",
        "description": "Request to get multiple contents' references",
        "additionalProperties": false,
        "required": [
          "contentIds"
        ],
        "properties": {
          "contentIds": {
            "type": "array",
            "description": "The IDs of the contents whose references need to be retrieved.",
            "items": {
              "type": "string"
            }
          },
          "references": {
            "description": "Limits the number of the returned metadata references by setting paging information.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/MetadataReferencesPagingRequest"
              }
            ]
          },
          "shares": {
            "description": "Limits the number of the returned share references by setting paging information.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/PagingRequest"
              }
            ]
          }
        }
      },
      "OutputResolveManyRequest": {
        "type": "object",
        "description": "Resolves outputs available for given content ids.",
        "additionalProperties": false,
        "required": [
          "contentIds"
        ],
        "properties": {
          "contentIds": {
            "type": "array",
            "description": "The IDs of the contents whose outputs should to be retrieved.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ContentFieldsBatchUpdateRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MetadataValuesChangeRequestBase"
          },
          {
            "type": "object",
            "description": "Request to batch update contents' fields based on content IDs",
            "additionalProperties": false,
            "required": [
              "contentIds"
            ],
            "properties": {
              "contentIds": {
                "type": "array",
                "description": "The IDs of the contents whose fields need to be updated.",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "MetadataValuesChangeRequestBase": {
        "type": "object",
        "discriminator": {
          "propertyName": "kind",
          "mapping": {
            "ContentFieldsBatchUpdateFilterRequest": "#/components/schemas/ContentFieldsBatchUpdateFilterRequest",
            "ContentFieldsBatchUpdateRequest": "#/components/schemas/ContentFieldsBatchUpdateRequest"
          }
        },
        "description": "Base class for the content metadata batch requests.",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "changeCommands",
          "kind",
          "allowMissingDependencies",
          "notifyProgress"
        ],
        "properties": {
          "changeCommands": {
            "type": "array",
            "description": "Changes that need to be applied to the existing content metadata. The same set of changes is applied to all contents.",
            "items": {
              "$ref": "#/components/schemas/MetadataValuesChangeCommandBase"
            }
          },
          "allowMissingDependencies": {
            "type": "boolean",
            "description": "Allows updating contents with references to list items or contents that do not exist in the system."
          },
          "notifyProgress": {
            "type": "boolean",
            "description": "Create a progress notification and notify on progress. Notifications are shown in the UI only to the same use who triggered the batch update."
          },
          "kind": {
            "type": "string"
          }
        }
      },
      "MetadataValuesChangeCommandBase": {
        "type": "object",
        "discriminator": {
          "propertyName": "kind",
          "mapping": {
            "MetadataValuesSchemaUpdateCommand": "#/components/schemas/MetadataValuesSchemaUpdateCommand",
            "MetadataValuesSchemaUpsertCommand": "#/components/schemas/MetadataValuesSchemaUpsertCommand",
            "MetadataValuesSchemaRemoveCommand": "#/components/schemas/MetadataValuesSchemaRemoveCommand",
            "MetadataValuesSchemaReplaceCommand": "#/components/schemas/MetadataValuesSchemaReplaceCommand",
            "MetadataValuesFieldRemoveCommand": "#/components/schemas/MetadataValuesFieldRemoveCommand",
            "MetadataValuesSchemaItemAddCommand": "#/components/schemas/MetadataValuesSchemaItemAddCommand",
            "MetadataValuesSchemaItemRemoveCommand": "#/components/schemas/MetadataValuesSchemaItemRemoveCommand"
          }
        },
        "description": "The base class for metadata value change commands.",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "schemaId",
          "kind"
        ],
        "properties": {
          "schemaId": {
            "type": "string",
            "description": "The ID of the schema to which the operation scope is addressed.",
            "minLength": 1
          },
          "kind": {
            "type": "string"
          }
        }
      },
      "MetadataValuesSchemaUpdateCommand": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MetadataValuesChangeCommandBase"
          },
          {
            "type": "object",
            "description": "Updates schema values",
            "additionalProperties": false,
            "required": [
              "value"
            ],
            "properties": {
              "value": {
                "type": "object",
                "description": "An object containing the metadata values to add / update."
              }
            }
          }
        ]
      },
      "MetadataValuesSchemaUpsertCommand": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MetadataValuesChangeCommandBase"
          },
          {
            "type": "object",
            "description": "Adds or updates schema values",
            "additionalProperties": false,
            "required": [
              "value"
            ],
            "properties": {
              "value": {
                "type": "object",
                "description": "An object containing the metadata values to add / update."
              }
            }
          }
        ]
      },
      "MetadataValuesSchemaRemoveCommand": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MetadataValuesChangeCommandBase"
          },
          {
            "type": "object",
            "description": "Removes schema and all its values",
            "additionalProperties": false
          }
        ]
      },
      "MetadataValuesSchemaReplaceCommand": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MetadataValuesChangeCommandBase"
          },
          {
            "type": "object",
            "description": "Replaces schema values",
            "additionalProperties": false,
            "required": [
              "value"
            ],
            "properties": {
              "value": {
                "type": "object",
                "description": "An object containing the metadata values for the schema. The existing dictionary will be entirely overwritten."
              }
            }
          }
        ]
      },
      "MetadataValuesFieldRemoveCommand": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MetadataValuesChangeCommandBase"
          },
          {
            "type": "object",
            "description": "Removes a field and its value from the values of the specified schema",
            "additionalProperties": false,
            "required": [
              "fieldPath"
            ],
            "properties": {
              "fieldPath": {
                "type": "string",
                "description": "The path of the field to be removed within the specified schema (i.e. remove the street from the address of a person: fieldPath = \"address.streetName\", schemaId = \"PersonLayer\")",
                "minLength": 1
              }
            }
          }
        ]
      },
      "MetadataValuesSchemaItemAddCommand": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MetadataValuesChangeCommandBase"
          },
          {
            "type": "object",
            "description": "Adds a list item to a FieldMultiTagbox field",
            "additionalProperties": false,
            "required": [
              "fieldPath",
              "fieldNamespace",
              "referenceId"
            ],
            "properties": {
              "fieldPath": {
                "type": "string",
                "description": "The path of the field relative to the Content or Layer schema values defined by the schemaId property.\n(i.e. add a team (existing list item) to the work information of a person: fieldPath = \"workInfo.teams\", schemaId = \"PersonLayer\").",
                "minLength": 1
              },
              "fieldNamespace": {
                "type": "string",
                "description": "The field namespace",
                "minLength": 1
              },
              "referenceId": {
                "type": "string",
                "description": "The ID of the list item to be added.",
                "minLength": 1
              }
            }
          }
        ]
      },
      "MetadataValuesSchemaItemRemoveCommand": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MetadataValuesChangeCommandBase"
          },
          {
            "type": "object",
            "description": "Removes a list item from a FieldMultiTagbox field",
            "additionalProperties": false,
            "required": [
              "fieldPath",
              "fieldNamespace",
              "referenceId"
            ],
            "properties": {
              "fieldPath": {
                "type": "string",
                "description": "The path of the field relative to the Content or Layer schema values defined by the schemaId property.\n(i.e. add a team (existing list item) to the work information of a person: fieldPath = \"workInfo.teams\", schemaId = \"PersonLayer\").",
                "minLength": 1
              },
              "fieldNamespace": {
                "type": "string",
                "description": "The field namespace.",
                "minLength": 1
              },
              "referenceId": {
                "type": "string",
                "description": "The ID of the list item to be removed.",
                "minLength": 1
              }
            }
          }
        ]
      },
      "ContentFieldsBatchUpdateFilterRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MetadataValuesChangeRequestBase"
          },
          {
            "type": "object",
            "description": "Request to batch update contents' fields based on a filter",
            "additionalProperties": false,
            "required": [
              "filterRequest"
            ],
            "properties": {
              "filterRequest": {
                "description": "Filters the contents on which the change commands must be applied.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ContentFilterRequest"
                  }
                ]
              }
            }
          }
        ]
      },
      "ContentSearchResult": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SearchBehaviorWithAggregationBaseResultOfContent"
          },
          {
            "type": "object",
            "description": "Result for content search operation",
            "additionalProperties": false,
            "properties": {
              "rightsAggregationsCounts": {
                "type": "array",
                "description": "Result of rights aggregation count requested in rightsAggregations in the ContentSearchRequest.",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/ContentRightAggregationCount"
                }
              }
            }
          }
        ]
      },
      "ContentRightAggregationCount": {
        "type": "object",
        "description": "Combination of ContentRight and found document count",
        "additionalProperties": false,
        "required": [
          "contentRight",
          "count"
        ],
        "properties": {
          "contentRight": {
            "description": "ContentRight.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ContentRight"
              }
            ]
          },
          "count": {
            "type": "integer",
            "description": "Found document count.",
            "format": "int64"
          }
        }
      },
      "SearchBehaviorWithAggregationBaseResultOfContent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SearchBehaviorBaseResultOfContent"
          },
          {
            "type": "object",
            "description": "Base class for search result queries that support SearchBehaviors",
            "additionalProperties": false,
            "properties": {
              "aggregationResults": {
                "type": "array",
                "description": "Results of the aggregation, if any aggregators was passed in the request.",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/AggregationResult"
                }
              }
            }
          }
        ]
      },
      "SearchBehaviorBaseResultOfContent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResultOfContent"
          },
          {
            "type": "object",
            "description": "Base class for search result queries that support SearchBehaviors",
            "additionalProperties": false,
            "properties": {
              "searchString": {
                "type": "string",
                "description": "The search string used to query the data.",
                "nullable": true
              },
              "isSearchStringRewritten": {
                "type": "boolean",
                "description": "Flag to notify if the SearchString was modified compared to the original requested one."
              },
              "queryDebugInformation": {
                "type": "array",
                "description": "Additional information regarding the query execution and reason of the matched documents. Multiple items are returned if multiple queries were performed.",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/QueryDebugInformation"
                }
              }
            }
          }
        ]
      },
      "BaseResultOfContent": {
        "type": "object",
        "description": "Base class for search results",
        "additionalProperties": false,
        "required": [
          "results",
          "totalResults",
          "elapsedMilliseconds"
        ],
        "properties": {
          "totalResults": {
            "type": "integer",
            "description": "The total number of matching documents.",
            "format": "int64"
          },
          "results": {
            "type": "array",
            "description": "The matched documents.",
            "items": {
              "$ref": "#/components/schemas/Content"
            }
          },
          "elapsedMilliseconds": {
            "type": "integer",
            "description": "The search execution time in milliseconds.",
            "format": "int64"
          },
          "pageToken": {
            "type": "string",
            "description": "An optional token to access the next page of results for those endpoints that support backend scrolling logic.",
            "nullable": true
          }
        }
      },
      "Content": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "contentSchemaId",
          "contentType",
          "displayValues",
          "id",
          "lifeCycle"
        ],
        "properties": {
          "audit": {
            "description": "Audit information.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserAudit"
              }
            ]
          },
          "contentSchemaId": {
            "type": "string",
            "description": "The id of the schema with schema type content.",
            "minLength": 1
          },
          "contentType": {
            "description": "The content type of this content. All except Virtual are binary files.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ContentType"
              }
            ]
          },
          "layerSchemaIds": {
            "type": "array",
            "description": "An optional id list of schemas with schema type layer.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "displayValues": {
            "type": "object",
            "description": "Contains display values of the specified language, rendered according to the content schema's display pattern configuration.",
            "additionalProperties": {
              "type": "string"
            }
          },
          "id": {
            "type": "string",
            "minLength": 1
          },
          "brokenReferenceIds": {
            "type": "array",
            "description": "All the ids of the broken references (tagboxes)",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "brokenIndirectReferenceIds": {
            "type": "array",
            "description": "All the ids of the broken indirect references (tagbox that has a property that reference a broken tagbox)",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "brokenRelationTargetIds": {
            "type": "array",
            "description": "All the target ids of the broken relations",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "lifeCycle": {
            "description": "Life cycle of content",
            "oneOf": [
              {
                "$ref": "#/components/schemas/LifeCycle"
              }
            ]
          }
        }
      },
      "ContentSearchRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ContentAggregationOnChannelRequest"
          },
          {
            "type": "object",
            "description": "Request to search contents",
            "additionalProperties": false,
            "properties": {
              "displayPatternIds": {
                "type": "array",
                "description": "Limits the display values included in the search response. Defaults to all display values.",
                "nullable": true,
                "items": {
                  "type": "string"
                }
              },
              "sort": {
                "type": "array",
                "description": "Sorts the search results. Sorting on a field not marked as Sortable in the Content schema will throw an exception.",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/SortInfo"
                }
              },
              "limit": {
                "type": "integer",
                "description": "Limits the document count of the result set.",
                "format": "int32",
                "default": 30
              },
              "pageToken": {
                "type": "string",
                "description": "The token used to retrieve the next page of results. It must be null on first request and only filled with the returned pageToken to request next page of results.",
                "nullable": true
              },
              "rightsFilter": {
                "type": "array",
                "description": "Limits the contents to the ones the user has the specified ContentRights.",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/ContentRight"
                }
              },
              "rightsAggregations": {
                "type": "array",
                "description": "Returns the aggregated document counts to the ones the user has the specified ContentRights.\nProduces the rightsAggregationCounts on the ContentSearchResult. View will be ignored as the totalResults already gives this information.",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/ContentRight"
                }
              },
              "debugMode": {
                "type": "boolean",
                "description": "Enable debug mode: additional debug information regarding the query execution and reason of the matched documents are returned in the ContentSearchResult.\nWarning! It severely affects performance.",
                "default": false
              },
              "aggregators": {
                "type": "array",
                "description": "List of aggregators that defines how the items should be aggregated.",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/AggregatorBase"
                }
              }
            }
          }
        ]
      },
      "ContentAggregationOnChannelRequest": {
        "type": "object",
        "description": "Request to aggregate contents based on the aggregators defined on a channel",
        "additionalProperties": false,
        "required": [
          "lifeCycleFilter",
          "brokenDependenciesFilter",
          "searchType"
        ],
        "properties": {
          "searchString": {
            "type": "string",
            "description": "Limits the search by using a query string filter. The Lucene query string syntax is supported.",
            "nullable": true
          },
          "searchBehaviors": {
            "type": "array",
            "description": "An optional list of search behaviors. All the passed behaviors will be applied.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/SearchBehavior"
            }
          },
          "filter": {
            "description": "An optional search filter. Limits the document result set.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/FilterBase"
              }
            ]
          },
          "aggregationFilters": {
            "type": "array",
            "description": "Special filters used to filter down independently the aggregations' values and the search results on specific conditions.\nFor the search results, the aggregation filters are used to create a Filter that is put in AND with the eventual existing Filter of the search request to nail down the search results. The filters generated\nby the aggregation filters are put in OR each other if they have the same AggregationName, and then such groups are put in AND.\nFor the aggregation values, only the original Filter of the search request is used to nail down the data to be considered for the aggregations. Then, on top of that, for each aggregator in the search request, a Filter is created to filter down the\naggregation results of that aggregation: depending if the AggregationName of the AggregationFilter matches the AggregationName of the Aggregator, the filter is put in OR (if it matches) or in AND (if it does not match it).\nMoreover, an AggregationFilter ensures that the related value is returned in the AggregationResults also if the top aggregation values returned by default do not contain it.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/AggregationFilter"
            }
          },
          "channelId": {
            "type": "string",
            "description": "Limits the simple search fields to the fields available in the specified channel. Defaults to RootChannel.\nFor the ContentAggregationOnChannelRequest only, the existing aggregation saved on the channel are retrieved and used to perform the aggregation.",
            "nullable": true
          },
          "searchLanguages": {
            "type": "array",
            "description": "When searching in multi language fields, limit the searchable fields to the ones corresponding to the specified languages.\nIf not specified, all metadata languages defined in the system are used.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "collectionId": {
            "type": "string",
            "description": "Limit the search to the contents belonging to the specified collection.",
            "nullable": true
          },
          "lifeCycleFilter": {
            "description": "Limits the aggregation to the contents that have the specified life cycle state. Defaults to ActiveOnly.",
            "default": "ActiveOnly",
            "oneOf": [
              {
                "$ref": "#/components/schemas/LifeCycleFilter"
              }
            ]
          },
          "brokenDependenciesFilter": {
            "description": "Limits the aggregation to the contents that have or not have broken references. By default it includes both.",
            "default": "All",
            "oneOf": [
              {
                "$ref": "#/components/schemas/BrokenDependenciesFilter"
              }
            ]
          },
          "searchType": {
            "description": "Type of search to be performed: search only in metadata, only in the extracted fulltext from the file or both. Default to Metadata.",
            "default": "Metadata",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ContentSearchType"
              }
            ]
          }
        }
      },
      "ObjectAggregationResult": {
        "type": "object",
        "description": "Result for an aggregation operation",
        "additionalProperties": false,
        "required": [
          "aggregationResults",
          "elapsedMilliseconds",
          "isSearchStringRewritten"
        ],
        "properties": {
          "elapsedMilliseconds": {
            "type": "integer",
            "description": "How long did the search and aggregation took.",
            "format": "int64"
          },
          "aggregationResults": {
            "type": "array",
            "description": "Results of the aggregation.",
            "items": {
              "$ref": "#/components/schemas/AggregationResult"
            }
          },
          "searchString": {
            "type": "string",
            "description": "Search string used to query the data",
            "nullable": true
          },
          "isSearchStringRewritten": {
            "type": "boolean",
            "description": "Flag to notify if the SearchString was modified compared to the original requested one."
          },
          "queryDebugInformation": {
            "type": "array",
            "description": "Additional information regarding the query execution and reason of the matched documents. Multiple items are returned if multiple queries were performed.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/QueryDebugInformation"
            }
          }
        }
      },
      "ContentAggregationRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ContentAggregationOnChannelRequest"
          },
          {
            "type": "object",
            "description": "Request to aggregate contents based on the specified aggregators",
            "additionalProperties": false,
            "required": [
              "aggregators"
            ],
            "properties": {
              "aggregators": {
                "type": "array",
                "description": "List of aggregators that defines how the items should be aggregated.",
                "items": {
                  "$ref": "#/components/schemas/AggregatorBase"
                }
              }
            }
          }
        ]
      },
      "DisplayValueStatus": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "state"
        ],
        "properties": {
          "contentOrLayerSchemaIds": {
            "type": "array",
            "description": "The schema ids (of type Content or Layer) for which the re-rendering of the display values is needed.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "listSchemaIds": {
            "type": "array",
            "description": "The schema ids (of type List) for which the re-rendering of the display values is needed.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "state": {
            "description": "The state of the display values compared to the schema structure (UpToDate = ok, Outdated = re-rendering needed).",
            "oneOf": [
              {
                "$ref": "#/components/schemas/DisplayValuesState"
              }
            ]
          }
        }
      },
      "DisplayValuesState": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "UpToDate",
          "Outdated",
          "RerenderingInProgress"
        ],
        "enum": [
          "UpToDate",
          "Outdated",
          "RerenderingInProgress"
        ]
      },
      "DocumentHistory": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "documentVersion",
          "documentDate",
          "timestamp",
          "deleted",
          "action"
        ],
        "properties": {
          "documentId": {
            "type": "string",
            "nullable": true
          },
          "documentVersion": {
            "type": "integer",
            "format": "int64"
          },
          "documentType": {
            "type": "string",
            "nullable": true
          },
          "documentDate": {
            "type": "string",
            "format": "date-time"
          },
          "document": {
            "type": "string",
            "nullable": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "audit": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserAuditHistory"
              }
            ]
          },
          "deleted": {
            "type": "boolean"
          },
          "action": {
            "$ref": "#/components/schemas/DocumentChangeAction"
          }
        }
      },
      "UserAuditHistory": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "modificationDate"
        ],
        "properties": {
          "modificationDate": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedByUser": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "DocumentChangeAction": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Create",
          "Update",
          "Delete",
          "Activate",
          "Deactivate"
        ],
        "enum": [
          "Create",
          "Update",
          "Delete",
          "Activate",
          "Deactivate"
        ]
      },
      "DocumentHistoryDifference": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "oldDocumentVersion",
          "newDocumentVersion"
        ],
        "properties": {
          "documentId": {
            "type": "string",
            "nullable": true
          },
          "oldDocumentVersion": {
            "type": "integer",
            "format": "int64"
          },
          "newDocumentVersion": {
            "type": "integer",
            "format": "int64"
          },
          "patch": {
            "description": "Contains an RFC 6902 compatible patch that can be applied on the old document to get the new document.\nUse a library like jsondiffpatch.net (https://github.com/wbish/jsondiffpatch.net)\nor jsondiffpatch (https://github.com/benjamine/jsondiffpatch) to process this.",
            "nullable": true
          }
        }
      },
      "DocumentHistorySearchResult": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResultOfDocumentHistory"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "BaseResultOfDocumentHistory": {
        "type": "object",
        "description": "Base class for search results",
        "additionalProperties": false,
        "required": [
          "results",
          "totalResults",
          "elapsedMilliseconds"
        ],
        "properties": {
          "totalResults": {
            "type": "integer",
            "description": "The total number of matching documents.",
            "format": "int64"
          },
          "results": {
            "type": "array",
            "description": "The matched documents.",
            "items": {
              "$ref": "#/components/schemas/DocumentHistory"
            }
          },
          "elapsedMilliseconds": {
            "type": "integer",
            "description": "The search execution time in milliseconds.",
            "format": "int64"
          },
          "pageToken": {
            "type": "string",
            "description": "An optional token to access the next page of results for those endpoints that support backend scrolling logic.",
            "nullable": true
          }
        }
      },
      "DocumentHistorySearchRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "from",
          "to",
          "limit",
          "documentVersion"
        ],
        "properties": {
          "from": {
            "type": "string",
            "description": "Limits the start date of the search request. By default no limitation set.",
            "format": "date-time"
          },
          "to": {
            "type": "string",
            "description": "Limits the end date of the search request. By default no limitation set.",
            "format": "date-time"
          },
          "limit": {
            "type": "integer",
            "description": "Limits the document count of the result set. Defaults to 30.",
            "format": "int32",
            "default": 30
          },
          "pageToken": {
            "type": "string",
            "description": "To get a large amount of data, page token returned from the response can be used to get all data.",
            "nullable": true
          },
          "documentId": {
            "type": "string",
            "description": "Limits the search to a specific document ID. E.g. contentId",
            "nullable": true
          },
          "documentVersion": {
            "type": "integer",
            "description": "The document version to search. Default to -1 to not limit to a specific document version.",
            "format": "int64",
            "default": -1
          },
          "documentType": {
            "type": "string",
            "description": "Limits the search to a specific document type.",
            "nullable": true
          },
          "sort": {
            "type": "array",
            "description": "Sorts the search results. Sorting on a not indexed field will throw an exception.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/SortInfo"
            }
          }
        }
      },
      "IdentityProvider": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IdentityProviderEditable"
          },
          {
            "type": "object",
            "description": "Represents an identity provider defined in IdentityServer and its Picturepark configuration",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "string",
                "description": "Identity provider ID (has to match an existing IdP defined in IdentityServer)",
                "nullable": true
              },
              "name": {
                "type": "string",
                "description": "Name of the identity provider as defined in IdentityServer",
                "nullable": true
              },
              "displayName": {
                "type": "string",
                "description": "Display name of the identity provider as defined in IdentityServer",
                "nullable": true
              }
            }
          }
        ]
      },
      "IdentityProviderEditable": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "claimMapping": {
            "type": "array",
            "description": "Mapping of identity provider claims to user attributes",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/IdpClaimToUserAttributeMapping"
            }
          },
          "groupClaimType": {
            "type": "string",
            "description": "Name of the identity provider claim that holds group membership information",
            "nullable": true
          },
          "groupMapping": {
            "type": "array",
            "description": "IdP (AD) group to user role ID mapping",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/IdpGroupToUserRoleMapping"
            }
          },
          "fallbackUserRoleId": {
            "type": "string",
            "description": "Optional user role ID that will be assigned to a user is none of the group mappings produce a match",
            "nullable": true
          }
        }
      },
      "IdpClaimToUserAttributeMapping": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "claimType": {
            "type": "string",
            "description": "Claim type name coming from external identity provider",
            "nullable": true
          },
          "userAttributePath": {
            "type": "string",
            "description": "Path to a user attribute to synchronize",
            "nullable": true
          }
        }
      },
      "IdpGroupToUserRoleMapping": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "group": {
            "type": "string",
            "description": "Name of the group on external identity provider",
            "nullable": true
          },
          "userRoleId": {
            "type": "string",
            "description": "User role ID as defined in CP",
            "nullable": true
          }
        }
      },
      "IdentityProviderBasicInfo": {
        "type": "object",
        "description": "Basic information about an identity provider",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "Identity provider ID (has to match an existing IdP defined in IdentityServer)",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name of the identity provider as defined in IdentityServer",
            "nullable": true
          },
          "displayName": {
            "type": "string",
            "description": "Display name of the identity provider as defined in IdentityServer",
            "nullable": true
          }
        }
      },
      "VersionInfo": {
        "type": "object",
        "description": "The version view item for the environment.",
        "additionalProperties": false,
        "properties": {
          "fileVersion": {
            "type": "string",
            "description": "The manual file version of Picturepark.Contract.dll.",
            "nullable": true
          },
          "fileProductVersion": {
            "type": "string",
            "description": "The GitVersionTask generated file product version of Picturepark.Configuration.dll.",
            "nullable": true
          },
          "contractVersion": {
            "type": "string",
            "description": "The current contract version stored in CustomerDoc / EnvironmentDoc.",
            "nullable": true
          },
          "release": {
            "type": "string",
            "description": "The bamboo release version. Only provided on bamboo deployments.",
            "nullable": true
          }
        }
      },
      "CustomerInfo": {
        "type": "object",
        "description": "Customer configuration information",
        "additionalProperties": false,
        "required": [
          "customerId",
          "name",
          "customerAlias",
          "identityServerUrl",
          "apiUrl",
          "enableQueryDetails",
          "languageConfiguration",
          "languages",
          "outputFormats",
          "boostValues",
          "modificationDate",
          "baseUrl",
          "logosUrl"
        ],
        "properties": {
          "customerId": {
            "type": "string",
            "description": "The customer ID.",
            "minLength": 1
          },
          "name": {
            "type": "string",
            "description": "The name of the customer instance.",
            "minLength": 1
          },
          "customerAlias": {
            "type": "string",
            "description": "Alias of the customer instance.",
            "minLength": 1
          },
          "identityServerUrl": {
            "type": "string",
            "description": "The base URL of identity server to authenticate the user using OpenID Connect.",
            "minLength": 1
          },
          "apiUrl": {
            "type": "string",
            "description": "The base API URL.",
            "minLength": 1
          },
          "enableQueryDetails": {
            "type": "boolean",
            "description": "Information if the query details can be enabled when searching. For debug purposes only."
          },
          "languageConfiguration": {
            "description": "Configured languages of customer instance (system, metadata, default).",
            "oneOf": [
              {
                "$ref": "#/components/schemas/LanguageConfiguration"
              }
            ]
          },
          "languages": {
            "type": "array",
            "description": "Languages including translations for the configured system and metadata languages.",
            "items": {
              "$ref": "#/components/schemas/Language"
            }
          },
          "outputFormats": {
            "type": "array",
            "description": "Configured rendering outputs including translations for the customer instance.",
            "items": {
              "$ref": "#/components/schemas/OutputFormatInfo"
            }
          },
          "boostValues": {
            "type": "array",
            "description": "Boost levels that can be applied to a metadata field to boost the the significance of the field in a search operation.",
            "items": {
              "type": "number",
              "format": "double"
            }
          },
          "apps": {
            "type": "array",
            "description": "Apps registered for this customer",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/CustomerApp"
            }
          },
          "modificationDate": {
            "type": "string",
            "format": "date-time",
            "minLength": 1
          },
          "baseUrl": {
            "type": "string",
            "description": "Url to access Frontend service",
            "minLength": 1
          },
          "logosUrl": {
            "type": "string",
            "description": "Base bath to access logos of customer (including trailing slash), available images: name, full, small, background",
            "minLength": 1
          }
        }
      },
      "LanguageConfiguration": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "systemLanguages": {
            "type": "array",
            "description": "A list of languages serving as system languages.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "metadataLanguages": {
            "type": "array",
            "description": "A list of languages serving as metadata languages.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "defaultLanguage": {
            "type": "string",
            "description": "The default language. Not the be confused with the metadata fallback language x-default.",
            "nullable": true
          }
        }
      },
      "Language": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name",
          "ietf"
        ],
        "properties": {
          "name": {
            "description": "Language translations.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/TranslatedStringDictionary"
              }
            ]
          },
          "ietf": {
            "type": "string",
            "description": "IETF language tag. E.g en, en-US, de.",
            "minLength": 1
          },
          "twoLetterISOLanguageName": {
            "type": "string",
            "description": "Two letter ISO language code. E.g. en, de.",
            "nullable": true
          },
          "threeLetterISOLanguageName": {
            "type": "string",
            "description": "Three letter ISO language code. E.g. eng, deu.",
            "nullable": true
          },
          "regionCode": {
            "type": "string",
            "description": "Region code of the language. E.g. US, DE, CH.",
            "nullable": true
          }
        }
      },
      "OutputFormatInfo": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "names"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Output ID.",
            "minLength": 1
          },
          "names": {
            "description": "Output translations.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/TranslatedStringDictionary"
              }
            ]
          }
        }
      },
      "CustomerApp": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "appId": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/TranslatedStringDictionary"
              }
            ]
          },
          "description": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/TranslatedStringDictionary"
              }
            ]
          },
          "icon": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "SystemStatus": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "searchIndicesStatus": {
            "type": "array",
            "description": "The status of the search indices.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/StatusOfSearchIndexState"
            }
          },
          "displayValuesStatus": {
            "type": "array",
            "description": "The status of the display values.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/StatusOfDisplayValuesState"
            }
          },
          "metadataStatus": {
            "type": "array",
            "description": "The status of the contents and list items.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/StatusOfMetadataState"
            }
          }
        }
      },
      "StatusOfSearchIndexState": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "state"
        ],
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "$ref": "#/components/schemas/SearchIndexState"
          }
        }
      },
      "SearchIndexState": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Green",
          "Yellow",
          "Red"
        ],
        "enum": [
          "Green",
          "Yellow",
          "Red"
        ]
      },
      "StatusOfDisplayValuesState": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "state"
        ],
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "$ref": "#/components/schemas/DisplayValuesState"
          }
        }
      },
      "StatusOfMetadataState": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "state"
        ],
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "$ref": "#/components/schemas/MetadataState"
          }
        }
      },
      "MetadataState": {
        "type": "string",
        "description": "The state of the contents and list items",
        "x-enumNames": [
          "UpToDate",
          "Outdated",
          "UpdateInProgress"
        ],
        "enum": [
          "UpToDate",
          "Outdated",
          "UpdateInProgress"
        ]
      },
      "ListItemDetail": {
        "type": "object",
        "description": "List item detail",
        "additionalProperties": false,
        "required": [
          "id",
          "contentSchemaId"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The list item ID.",
            "minLength": 1
          },
          "contentSchemaId": {
            "type": "string",
            "description": "The ID of the content schema. The SchemaType of the specified schema must be List.",
            "minLength": 1
          },
          "content": {
            "type": "object",
            "description": "The content data of the list item. It's an object of dynamic metadata whose structure is defined in the Content schema specified\nby the ContentSchemaId property.",
            "nullable": true
          },
          "displayValues": {
            "description": "Contains language specific display values. They are calculated values based on the template stored in the Content schema DisplayPatterns property.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/DisplayValueDictionary"
              }
            ]
          },
          "brokenReferenceIds": {
            "type": "array",
            "description": "All the IDs of the referenced list items (tagboxes) that do not exist in the system.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "brokenRelationTargetIds": {
            "type": "array",
            "description": "All the IDs of the contents or list items target of a relation that do not exist in the system.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "brokenIndirectReferenceIds": {
            "type": "array",
            "description": "All the IDs of the indirectly referenced list items (tagboxes) that do not exist in the system.\nThey are referenced list items that reference at least a list item that do not exist in the system.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "audit": {
            "description": "Audit information.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserAuditDetail"
              }
            ]
          },
          "activity": {
            "description": "Activity information: dynamically mapped from configured metadata fields or from audit information if no mapping is configured.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/Activity"
              }
            ]
          }
        }
      },
      "ListItemResolveBehavior": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Content",
          "LinkedListItems",
          "InnerDisplayValueThumbnail",
          "InnerDisplayValueList",
          "InnerDisplayValueDetail",
          "InnerDisplayValueName",
          "OuterDisplayValueThumbnail",
          "OuterDisplayValueList",
          "OuterDisplayValueDetail",
          "OuterDisplayValueName"
        ],
        "enum": [
          "Content",
          "LinkedListItems",
          "InnerDisplayValueThumbnail",
          "InnerDisplayValueList",
          "InnerDisplayValueDetail",
          "InnerDisplayValueName",
          "OuterDisplayValueThumbnail",
          "OuterDisplayValueList",
          "OuterDisplayValueDetail",
          "OuterDisplayValueName"
        ]
      },
      "ListItemUpdateRequest": {
        "type": "object",
        "description": "Request to update an existing list item",
        "additionalProperties": false,
        "required": [
          "contentFieldsUpdateOptions"
        ],
        "properties": {
          "content": {
            "type": "object",
            "description": "The content data of the list item. It's an object of dynamic metadata whose structure is defined in the Content schema of the list item.",
            "nullable": true
          },
          "contentFieldsUpdateOptions": {
            "description": "Options to modify the behavior for updating the content.\nMerge: the values specified in the Content object are merged to the existing content.\nReplace: the values specified in the Content object entirely replace any existing content.\nDefaults to Merge.",
            "default": "Merge",
            "oneOf": [
              {
                "$ref": "#/components/schemas/UpdateOption"
              }
            ]
          }
        }
      },
      "ListItemReferencesResult": {
        "type": "object",
        "description": "Result from getting references to list items.",
        "additionalProperties": false,
        "properties": {
          "metadataReferences": {
            "description": "List of references. Only available when requested in the request.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/MetadataReferenceResult"
              }
            ]
          }
        }
      },
      "ListItemReferencesRequest": {
        "type": "object",
        "description": "Request to get the references to a list item",
        "additionalProperties": false,
        "properties": {
          "references": {
            "description": "Limits the number of the returned metadata references by setting paging information.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/MetadataReferencesPagingRequest"
              }
            ]
          }
        }
      },
      "ListItemCreateRequest": {
        "type": "object",
        "description": "Request to create a list item",
        "additionalProperties": false,
        "required": [
          "contentSchemaId"
        ],
        "properties": {
          "contentSchemaId": {
            "type": "string",
            "description": "The ID of the content schema. The SchemaType of the specified schema must be List.",
            "minLength": 1
          },
          "content": {
            "type": "object",
            "description": "The content data of the list item. It's an object of dynamic metadata whose structure is defined in the Content schema.",
            "nullable": true
          },
          "requestId": {
            "type": "string",
            "description": "Optional client reference for this request.\nWill be returned back in response to make easier for clients to match request items with the respective results.\nIt is not persisted anywhere and it is ignored in single operations.",
            "nullable": true
          }
        }
      },
      "ListItemCreateManyRequest": {
        "type": "object",
        "description": "Request to create multiple list items",
        "additionalProperties": false,
        "required": [
          "items",
          "allowMissingDependencies"
        ],
        "properties": {
          "allowMissingDependencies": {
            "type": "boolean",
            "description": "Allows creating list items that refer to list items or contents that don't exist in the system."
          },
          "items": {
            "type": "array",
            "description": "Items to be created.",
            "items": {
              "$ref": "#/components/schemas/ListItemCreateRequest"
            }
          }
        }
      },
      "ListItemUpdateManyRequest": {
        "type": "object",
        "description": "Request to update multiple list items",
        "additionalProperties": false,
        "required": [
          "items",
          "allowMissingDependencies"
        ],
        "properties": {
          "allowMissingDependencies": {
            "type": "boolean",
            "description": "Allows updating list items with references to list items or contents that don't exist in the system."
          },
          "items": {
            "type": "array",
            "description": "Items to be updated.",
            "items": {
              "$ref": "#/components/schemas/ListItemUpdateItem"
            }
          }
        }
      },
      "ListItemUpdateItem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ListItemUpdateRequest"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "type": "string",
                "description": "The list item id.",
                "minLength": 1
              }
            }
          }
        ]
      },
      "ListItemDeleteManyRequest": {
        "type": "object",
        "description": "Request to delete multiple list items",
        "additionalProperties": false,
        "required": [
          "listItemIds",
          "forceReferenceRemoval",
          "notifyProgress"
        ],
        "properties": {
          "listItemIds": {
            "type": "array",
            "description": "IDs of the list items to delete.",
            "items": {
              "type": "string"
            }
          },
          "forceReferenceRemoval": {
            "type": "boolean",
            "description": "A value indicating whether references to the list item should be removed."
          },
          "notifyProgress": {
            "type": "boolean",
            "description": "Create a progress notification and notify on progress. Notifications are shown in the UI only to the same use who triggered the delete request."
          }
        }
      },
      "ListItemDeleteManyFilterRequest": {
        "type": "object",
        "description": "Request to delete multiple list items based on a provided filter",
        "additionalProperties": false,
        "required": [
          "filterRequest",
          "forceReferenceRemoval",
          "notifyProgress"
        ],
        "properties": {
          "filterRequest": {
            "description": "Filters the list items that need to be deleted.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ListItemFilterRequest"
              }
            ]
          },
          "forceReferenceRemoval": {
            "type": "boolean",
            "description": "A value indicating whether references to the list item should be removed."
          },
          "notifyProgress": {
            "type": "boolean",
            "description": "Create a progress notification and notify on progress. Notifications are shown in the UI only to the same use who triggered the delete request."
          }
        }
      },
      "ListItemFilterRequest": {
        "type": "object",
        "description": "Request to filter list items",
        "additionalProperties": false,
        "required": [
          "includeAllSchemaChildren",
          "brokenDependenciesFilter"
        ],
        "properties": {
          "searchString": {
            "type": "string",
            "description": "The string used to query the data. The Lucene query string syntax is supported.",
            "nullable": true
          },
          "filter": {
            "description": "An optional filter to limit the list items.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/FilterBase"
              }
            ]
          },
          "includeAllSchemaChildren": {
            "type": "boolean",
            "description": "Broadens the search to include all schema descendant list items."
          },
          "schemaIds": {
            "type": "array",
            "description": "Limits the search among the list items of the provided schemas.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "searchLanguages": {
            "type": "array",
            "description": "When searching in multi language fields, limit the searchable fields to the ones corresponding to the specified languages.\nIf not specified, all metadata languages defined in the system are used.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "brokenDependenciesFilter": {
            "description": "Limits the search to the list items that have or not have broken references. By default it includes both.",
            "default": "All",
            "oneOf": [
              {
                "$ref": "#/components/schemas/BrokenDependenciesFilter"
              }
            ]
          }
        }
      },
      "ListItemRestoreManyRequest": {
        "type": "object",
        "description": "Request to restore multiple deleted list items",
        "additionalProperties": false,
        "required": [
          "listItemIds",
          "allowMissingDependencies"
        ],
        "properties": {
          "listItemIds": {
            "type": "array",
            "description": "The IDs of the list items to restore.",
            "items": {
              "type": "string"
            }
          },
          "allowMissingDependencies": {
            "type": "boolean",
            "description": "Allows restoring list items that refer to list items or contents that don't exist in the system."
          }
        }
      },
      "ListItemManyReferencesRequest": {
        "type": "object",
        "description": "Request to get the references to multiple list items",
        "additionalProperties": false,
        "required": [
          "listItemIds"
        ],
        "properties": {
          "listItemIds": {
            "type": "array",
            "description": "The IDs of the list items whose references need to be retrieved.",
            "items": {
              "type": "string"
            }
          },
          "references": {
            "description": "Limits the number of the returned metadata references by setting paging information.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/MetadataReferencesPagingRequest"
              }
            ]
          }
        }
      },
      "ListItemFieldsBatchUpdateRequest": {
        "type": "object",
        "description": "Request to batch update list items' fields based on list item IDs",
        "additionalProperties": false,
        "required": [
          "listItemIds",
          "changeCommands",
          "allowMissingDependencies",
          "notifyProgress"
        ],
        "properties": {
          "listItemIds": {
            "type": "array",
            "description": "The ids of the list items whose fields need to be updated.",
            "items": {
              "type": "string"
            }
          },
          "changeCommands": {
            "type": "array",
            "description": "Changes that need to be applied to the existing list items. The same set of changes is applied to all list items.",
            "items": {
              "$ref": "#/components/schemas/MetadataValuesChangeCommandBase"
            }
          },
          "allowMissingDependencies": {
            "type": "boolean",
            "description": "Allows updating list items with references to list items or contents that do not exist in the system."
          },
          "notifyProgress": {
            "type": "boolean",
            "description": "Create a progress notification and notify on progress. Notifications are shown in the UI only to the same use who triggered the batch update."
          }
        }
      },
      "ListItemFieldsBatchUpdateFilterRequest": {
        "type": "object",
        "description": "Request to batch update list items' fields based on a filter",
        "additionalProperties": false,
        "required": [
          "filterRequest",
          "changeCommands",
          "allowMissingDependencies",
          "notifyProgress"
        ],
        "properties": {
          "filterRequest": {
            "description": "Filters the list items on which the change commands must be applied.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ListItemFilterRequest"
              }
            ]
          },
          "changeCommands": {
            "type": "array",
            "description": "Changes that need to be applied to the existing list items. The same set of changes is applied to all list items.",
            "items": {
              "$ref": "#/components/schemas/MetadataValuesChangeCommandBase"
            }
          },
          "allowMissingDependencies": {
            "type": "boolean",
            "description": "Allow updating list items with references to list items or contents that do not exist in the system."
          },
          "notifyProgress": {
            "type": "boolean",
            "description": "Create a progress notification and notify on progress. Notifications are shown in the UI only to the same use who triggered the batch update."
          }
        }
      },
      "ListItemSearchResult": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SearchBehaviorWithAggregationBaseResultOfListItem"
          },
          {
            "type": "object",
            "description": "Result for list item search operation",
            "additionalProperties": false
          }
        ]
      },
      "SearchBehaviorWithAggregationBaseResultOfListItem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SearchBehaviorBaseResultOfListItem"
          },
          {
            "type": "object",
            "description": "Base class for search result queries that support SearchBehaviors",
            "additionalProperties": false,
            "properties": {
              "aggregationResults": {
                "type": "array",
                "description": "Results of the aggregation, if any aggregators was passed in the request.",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/AggregationResult"
                }
              }
            }
          }
        ]
      },
      "SearchBehaviorBaseResultOfListItem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResultOfListItem"
          },
          {
            "type": "object",
            "description": "Base class for search result queries that support SearchBehaviors",
            "additionalProperties": false,
            "properties": {
              "searchString": {
                "type": "string",
                "description": "The search string used to query the data.",
                "nullable": true
              },
              "isSearchStringRewritten": {
                "type": "boolean",
                "description": "Flag to notify if the SearchString was modified compared to the original requested one."
              },
              "queryDebugInformation": {
                "type": "array",
                "description": "Additional information regarding the query execution and reason of the matched documents. Multiple items are returned if multiple queries were performed.",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/QueryDebugInformation"
                }
              }
            }
          }
        ]
      },
      "BaseResultOfListItem": {
        "type": "object",
        "description": "Base class for search results",
        "additionalProperties": false,
        "required": [
          "results",
          "totalResults",
          "elapsedMilliseconds"
        ],
        "properties": {
          "totalResults": {
            "type": "integer",
            "description": "The total number of matching documents.",
            "format": "int64"
          },
          "results": {
            "type": "array",
            "description": "The matched documents.",
            "items": {
              "$ref": "#/components/schemas/ListItem"
            }
          },
          "elapsedMilliseconds": {
            "type": "integer",
            "description": "The search execution time in milliseconds.",
            "format": "int64"
          },
          "pageToken": {
            "type": "string",
            "description": "An optional token to access the next page of results for those endpoints that support backend scrolling logic.",
            "nullable": true
          }
        }
      },
      "ListItem": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "lifeCycle"
        ],
        "properties": {
          "audit": {
            "description": "Audit information.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserAudit"
              }
            ]
          },
          "id": {
            "type": "string",
            "description": "The list item id.",
            "minLength": 1
          },
          "contentSchemaId": {
            "type": "string",
            "description": "The id of the schema with schema type list.",
            "nullable": true
          },
          "displayValues": {
            "description": "Contains language specific display values, rendered according to the list schema's display pattern configuration.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/DisplayValueDictionary"
              }
            ]
          },
          "content": {
            "type": "object",
            "description": "The content data of the list item.",
            "nullable": true
          },
          "brokenReferenceIds": {
            "type": "array",
            "description": "All the ids of the broken references (tagboxes)",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "brokenRelationTargetIds": {
            "type": "array",
            "description": "All the target ids of the broken relations",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "brokenIndirectReferenceIds": {
            "type": "array",
            "description": "All the ids of the broken indirect references (tagbox that has a property that reference a broken tagbox)",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "lifeCycle": {
            "description": "LifeCycle of list item",
            "oneOf": [
              {
                "$ref": "#/components/schemas/LifeCycle"
              }
            ]
          }
        }
      },
      "ListItemSearchRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ListItemSearchAndAggregationBaseRequest"
          },
          {
            "type": "object",
            "description": "Request to search list items",
            "additionalProperties": false,
            "properties": {
              "sort": {
                "type": "array",
                "description": "Fields and respective directions requested to sort the search results. Sorting on a not indexed field will throw an exception.",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/SortInfo"
                }
              },
              "limit": {
                "type": "integer",
                "description": "Limits the document count of the result set.",
                "format": "int32",
                "default": 30
              },
              "pageToken": {
                "type": "string",
                "description": "The token used to retrieve the next page of results. It must be null on first request and only filled with the returned pageToken to request next page of results.",
                "nullable": true
              },
              "debugMode": {
                "type": "boolean",
                "description": "Enable debug mode: additional debug information regarding the query execution and reason of the matched documents are returned in the ListItemSearchResult.\nWarning! It severely affects performance.",
                "default": false
              },
              "resolveBehaviors": {
                "type": "array",
                "description": "List of enums that control which parts of the list item are resolved and returned.",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/ListItemResolveBehavior"
                }
              },
              "aggregators": {
                "type": "array",
                "description": "List of aggregators that defines how the items should be aggregated.",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/AggregatorBase"
                }
              }
            }
          }
        ]
      },
      "ListItemSearchAndAggregationBaseRequest": {
        "type": "object",
        "description": "Request to aggregate list items",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "includeAllSchemaChildren",
          "brokenDependenciesFilter",
          "lifeCycleFilter"
        ],
        "properties": {
          "searchString": {
            "type": "string",
            "description": "Limits the search by using a query string filter. The Lucene query string syntax is supported.",
            "nullable": true
          },
          "searchBehaviors": {
            "type": "array",
            "description": "An optional list of search behaviors. All the passed behaviors will be applied.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/SearchBehavior"
            }
          },
          "filter": {
            "description": "An optional search filter. Limits the document result set.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/FilterBase"
              }
            ]
          },
          "aggregationFilters": {
            "type": "array",
            "description": "Special filters used to filter down independently the aggregations' values and the search results on specific conditions.\nFor the search results, the aggregation filters are used to create a Filter that is put in AND with the eventual existing Filter of the search request to nail down the search results. The filters generated\nby the aggregation filters are put in OR each other if they have the same AggregationName, and then such groups are put in AND.\nFor the aggregation values, only the original Filter of the search request is used to nail down the data to be considered for the aggregations. Then, on top of that, for each aggregator in the search request, a Filter is created to filter down the\naggregation results of that aggregation: depending if the AggregationName of the AggregationFilter matches the AggregationName of the Aggregator, the filter is put in OR (if it matches) or in AND (if it does not match it).\nMoreover, an AggregationFilter ensures that the related value is returned in the AggregationResults also if the top aggregation values returned by default do not contain it.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/AggregationFilter"
            }
          },
          "includeAllSchemaChildren": {
            "type": "boolean",
            "description": "Broadens the search to include all schema descendant list items."
          },
          "brokenDependenciesFilter": {
            "description": "Limits the aggregation to the list items that have or not have broken references. By default it includes both.",
            "default": "All",
            "oneOf": [
              {
                "$ref": "#/components/schemas/BrokenDependenciesFilter"
              }
            ]
          },
          "schemaIds": {
            "type": "array",
            "description": "Limits the search among the list items of the provided schemas.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "searchLanguages": {
            "type": "array",
            "description": "When searching in multi language fields, limit the searchable fields to the ones corresponding to the specified languages.\nIf not specified, all metadata languages defined in the system are used.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "lifeCycleFilter": {
            "description": "Limits the aggregation to the list items that have the specified life cycle state. Defaults to ActiveOnly.",
            "default": "ActiveOnly",
            "oneOf": [
              {
                "$ref": "#/components/schemas/LifeCycleFilter"
              }
            ]
          }
        }
      },
      "ListItemAggregationRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ListItemSearchAndAggregationBaseRequest"
          },
          {
            "type": "object",
            "description": "Request to aggregate list items",
            "additionalProperties": false,
            "required": [
              "aggregators"
            ],
            "properties": {
              "aggregators": {
                "type": "array",
                "description": "List of aggregators that defines how the items should be aggregated.",
                "items": {
                  "$ref": "#/components/schemas/AggregatorBase"
                }
              }
            }
          }
        ]
      },
      "LiveStreamSearchResult": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResultOfLiveStream"
          },
          {
            "type": "object",
            "description": "Results of live stream search.",
            "additionalProperties": false
          }
        ]
      },
      "BaseResultOfLiveStream": {
        "type": "object",
        "description": "Base class for search results",
        "additionalProperties": false,
        "required": [
          "results",
          "totalResults",
          "elapsedMilliseconds"
        ],
        "properties": {
          "totalResults": {
            "type": "integer",
            "description": "The total number of matching documents.",
            "format": "int64"
          },
          "results": {
            "type": "array",
            "description": "The matched documents.",
            "items": {
              "$ref": "#/components/schemas/LiveStream"
            }
          },
          "elapsedMilliseconds": {
            "type": "integer",
            "description": "The search execution time in milliseconds.",
            "format": "int64"
          },
          "pageToken": {
            "type": "string",
            "description": "An optional token to access the next page of results for those endpoints that support backend scrolling logic.",
            "nullable": true
          }
        }
      },
      "LiveStream": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "timestamp"
        ],
        "properties": {
          "id": {
            "type": "string",
            "minLength": 1
          },
          "document": {
            "type": "string",
            "nullable": true
          },
          "scopeType": {
            "type": "string",
            "nullable": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "traceJob": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/LiveStreamTraceJob"
              }
            ]
          },
          "audit": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserAudit"
              }
            ]
          }
        }
      },
      "LiveStreamTraceJob": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "traceJobId": {
            "type": "string",
            "nullable": true
          },
          "ipAddress": {
            "type": "string",
            "nullable": true
          },
          "userId": {
            "type": "string",
            "nullable": true
          },
          "apiClientId": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "LiveStreamSearchRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "from",
          "to",
          "limit"
        ],
        "properties": {
          "from": {
            "type": "string",
            "description": "Sets the start date and time for results based on Timestamp attribute.",
            "format": "date-time"
          },
          "to": {
            "type": "string",
            "description": "Sets the end date and time for results based on Timestamp attribute.",
            "format": "date-time"
          },
          "scopeType": {
            "type": "string",
            "description": "Optionally limits the result to only the specified scope type.",
            "nullable": true
          },
          "filter": {
            "description": "An optional search filter. Limits the document result set.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/FilterBase"
              }
            ]
          },
          "limit": {
            "type": "integer",
            "description": "Limits the document count of the result set. Defaults to 30.",
            "format": "int32",
            "default": 30
          },
          "pageToken": {
            "type": "string",
            "description": "To get a large amount of data, page token returned from the response can be used to get all data.",
            "nullable": true
          }
        }
      },
      "MetadataStatus": {
        "type": "object",
        "description": "The overall status of the contents and list items in comparison to the actual schemas' structure",
        "additionalProperties": false,
        "required": [
          "state"
        ],
        "properties": {
          "contentOrLayerSchemaIds": {
            "type": "array",
            "description": "The schema ids (of type Content or Layer) for which the contents are outdated and need to be updated.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "listSchemaIds": {
            "type": "array",
            "description": "The schema ids (of type List) for which the the list items are outdated and need to be updated.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "state": {
            "description": "The global state of the Contents and ListItems compared to the schema structure (Green = ok, Red = update needed).",
            "oneOf": [
              {
                "$ref": "#/components/schemas/MetadataState"
              }
            ]
          },
          "fieldIdsToCleanup": {
            "type": "object",
            "description": "The field ids that that cannot be used and needs to be cleaned up after updating the outdated contents and list items.",
            "nullable": true,
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "OutputFormatDownloadFileNamePatternUpdateManyRequest": {
        "type": "object",
        "description": "Used to change the download file name pattern for multiple formats at once.",
        "additionalProperties": false,
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "description": "Download file name update requests to be processed.",
            "items": {
              "$ref": "#/components/schemas/OutputFormatDownloadFileNamePatternUpdateRequestItem"
            }
          }
        }
      },
      "OutputFormatDownloadFileNamePatternUpdateRequestItem": {
        "type": "object",
        "description": "Represents a change to the download file name pattern to one output format.",
        "additionalProperties": false,
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the output format to set pattern for.",
            "minLength": 1
          },
          "patterns": {
            "description": "The patterns to use per metadata language.\nThe customer's default language is required.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/TranslatedStringDictionary"
              }
            ]
          }
        }
      },
      "OutputFormatSetXmpWritebackStateRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "enabled"
        ],
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Indicates if XMP writeback shall be enabled for the format."
          }
        }
      },
      "OutputFormatSetXmpWritebackStateManyRequest": {
        "type": "object",
        "description": "Used to change the state of XMP writeback for multiple output formats at once.",
        "additionalProperties": false,
        "properties": {
          "items": {
            "type": "array",
            "description": "XMP writeback state changes to be processed.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/OutputFormatSetXmpWritebackStateRequestItem"
            }
          }
        }
      },
      "OutputFormatSetXmpWritebackStateRequestItem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/OutputFormatSetXmpWritebackStateRequest"
          },
          {
            "type": "object",
            "description": "Represents a change to the XMP writeback state to one output format.",
            "additionalProperties": false,
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "type": "string",
                "description": "ID of the output format to set XMP writeback state for.",
                "minLength": 1
              }
            }
          }
        ]
      },
      "OutputFormatRenderPreviewRequest": {
        "type": "object",
        "description": "Specifies for which content a given format should be rendered",
        "additionalProperties": false,
        "properties": {
          "contentId": {
            "type": "string",
            "description": "The content for which the format should be rendered",
            "nullable": true
          },
          "outputFormat": {
            "description": "The format which should be rendered.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/OutputFormatRenderingSpecification"
              }
            ]
          }
        }
      },
      "OutputFormatRenderingSpecification": {
        "type": "object",
        "description": "Used to specify how to render derived outputs",
        "additionalProperties": false,
        "properties": {
          "sourceOutputFormats": {
            "description": "Which output format should be used as a source of data.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/SourceOutputFormats"
              }
            ]
          },
          "format": {
            "description": "Information about the technical format of the data, e.g. JPEG, AAC or video still.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/FormatBase"
              }
            ]
          }
        }
      },
      "SourceOutputFormats": {
        "type": "object",
        "description": "Defines the source used for rendering an OutputFormat depending on the type of content",
        "additionalProperties": false,
        "properties": {
          "image": {
            "type": "string",
            "description": "The source to be used for content of type Image",
            "nullable": true
          },
          "video": {
            "type": "string",
            "description": "The source to be used for content of type Video",
            "nullable": true
          },
          "document": {
            "type": "string",
            "description": "The source to be used for content of type Document",
            "nullable": true
          },
          "audio": {
            "type": "string",
            "description": "The source to be used for content of type Audio",
            "nullable": true
          },
          "vector": {
            "type": "string",
            "description": "The source to be used for content of type Vector",
            "nullable": true
          }
        }
      },
      "FormatBase": {
        "type": "object",
        "discriminator": {
          "propertyName": "kind",
          "mapping": {
            "ImageFormatBase": "#/components/schemas/ImageFormatBase",
            "OriginalFormat": "#/components/schemas/OriginalFormat",
            "JpegFormat": "#/components/schemas/JpegFormat",
            "PngFormat": "#/components/schemas/PngFormat",
            "TiffFormat": "#/components/schemas/TiffFormat",
            "VideoFormatBase": "#/components/schemas/VideoFormatBase",
            "AudioFormatBase": "#/components/schemas/AudioFormatBase",
            "Mp4VideoFormat": "#/components/schemas/Mp4VideoFormat",
            "VideoSpriteFormat": "#/components/schemas/VideoSpriteFormat",
            "VideoStillFormat": "#/components/schemas/VideoStillFormat",
            "AacAudioFormat": "#/components/schemas/AacAudioFormat",
            "AudioStillFormat": "#/components/schemas/AudioStillFormat",
            "Mp3AudioFormat": "#/components/schemas/Mp3AudioFormat",
            "DocumentFormatBase": "#/components/schemas/DocumentFormatBase",
            "DocumentStillFormat": "#/components/schemas/DocumentStillFormat",
            "PdfFormat": "#/components/schemas/PdfFormat",
            "VectorFormatBase": "#/components/schemas/VectorFormatBase",
            "SvgFormat": "#/components/schemas/SvgFormat",
            "VectorStillFormat": "#/components/schemas/VectorStillFormat"
          }
        },
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "kind"
        ],
        "properties": {
          "kind": {
            "type": "string"
          }
        }
      },
      "ImageFormatBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FormatBase"
          },
          {
            "type": "object",
            "description": "Base class for ImageFormats such as JPEG, PNG, TIFF, ...",
            "x-abstract": true,
            "additionalProperties": false,
            "properties": {
              "colorProfile": {
                "description": "Color profile to use. Colorspace is derived from the chosen profile.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ColorProfile"
                  }
                ]
              },
              "colorTransformationIntent": {
                "description": "The method of conversion for color spaces (e.g. CMYK to RGB). Further information can be found here: http://www.colourphil.co.uk/rendering_intents.shtml",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ColorTransformationIntent"
                  }
                ]
              },
              "horizontalResolution": {
                "type": "number",
                "description": "Horizontal resolution in dpi (dots per inch)",
                "format": "float",
                "nullable": true
              },
              "verticalResolution": {
                "type": "number",
                "description": "Vertical resolution in dpi (dots per inch)",
                "format": "float",
                "nullable": true
              },
              "keepClippingPath": {
                "type": "boolean",
                "description": "Copy clipping paths from input."
              },
              "resizeAction": {
                "description": "Allows resizing of the image.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ResizeAction"
                  }
                ]
              },
              "actions": {
                "type": "array",
                "description": "A collection of actions to be applied during rendering.",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/ImageActionBase"
                }
              }
            }
          }
        ]
      },
      "ColorProfile": {
        "type": "string",
        "description": "Available color profiles",
        "x-enumNames": [
          "AdobeRgb1998",
          "AppleRgb",
          "ColorMatchRgb",
          "EciRgbV1",
          "EciRgbV2",
          "Srgb",
          "SrgbColorSpaceProfile",
          "EuropeIsoCoatedFogra27",
          "EuroscaleCoated",
          "EuroscaleUncoated",
          "IsoCoated",
          "IsoCoatedEciV2",
          "JapanColor2001Coated",
          "JapanColor2001Uncoated",
          "JapanColor2002Newspaper",
          "JapanWebCoated",
          "UsSheetfedCoated",
          "UsSheetfedUncoated",
          "UsWebCoatedSwop",
          "UsWebUncoated",
          "IsoCoatedV2Grey1cBas",
          "IsoCoated300EciV2",
          "CoatedFogra27",
          "CoatedFogra39",
          "UncoatedFogra29",
          "WebCoatedFogra28",
          "WebCoatedSwop2006Grade3",
          "WebCoatedSwop2006Grade5",
          "Isonewspaper26v4",
          "Isonewspaper26v4Grey"
        ],
        "enum": [
          "AdobeRgb1998",
          "AppleRgb",
          "ColorMatchRgb",
          "EciRgbV1",
          "EciRgbV2",
          "Srgb",
          "SrgbColorSpaceProfile",
          "EuropeIsoCoatedFogra27",
          "EuroscaleCoated",
          "EuroscaleUncoated",
          "IsoCoated",
          "IsoCoatedEciV2",
          "JapanColor2001Coated",
          "JapanColor2001Uncoated",
          "JapanColor2002Newspaper",
          "JapanWebCoated",
          "UsSheetfedCoated",
          "UsSheetfedUncoated",
          "UsWebCoatedSwop",
          "UsWebUncoated",
          "IsoCoatedV2Grey1cBas",
          "IsoCoated300EciV2",
          "CoatedFogra27",
          "CoatedFogra39",
          "UncoatedFogra29",
          "WebCoatedFogra28",
          "WebCoatedSwop2006Grade3",
          "WebCoatedSwop2006Grade5",
          "Isonewspaper26v4",
          "Isonewspaper26v4Grey"
        ]
      },
      "ColorTransformationIntent": {
        "type": "string",
        "description": "http://www.colourphil.co.uk/rendering_intents.shtml",
        "x-enumNames": [
          "RelativeColorimetricBpc",
          "AbsoluteColorimetric",
          "Perceptual",
          "RelativeColorimetric",
          "Saturation"
        ],
        "enum": [
          "RelativeColorimetricBpc",
          "AbsoluteColorimetric",
          "Perceptual",
          "RelativeColorimetric",
          "Saturation"
        ]
      },
      "ResizeAction": {
        "type": "object",
        "description": "Specifies image resize parameters.",
        "additionalProperties": false,
        "required": [
          "width",
          "height",
          "resizeMode"
        ],
        "properties": {
          "width": {
            "type": "integer",
            "description": "Target width for the output.",
            "format": "int32"
          },
          "height": {
            "type": "integer",
            "description": "Target height for the output.",
            "format": "int32"
          },
          "resizeMode": {
            "description": "Specifies additional resize behaviour.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ResizeMode"
              }
            ]
          }
        }
      },
      "ResizeMode": {
        "type": "string",
        "description": "Specifies how the dimensions of a ResizeAction are applied to the content",
        "x-enumNames": [
          "Fit",
          "Shrink",
          "Resize"
        ],
        "enum": [
          "Fit",
          "Shrink",
          "Resize"
        ]
      },
      "ImageActionBase": {
        "type": "object",
        "discriminator": {
          "propertyName": "kind",
          "mapping": {
            "AlphaHandlingAction": "#/components/schemas/AlphaHandlingAction",
            "CropAction": "#/components/schemas/CropAction",
            "UnsharpenMaskAction": "#/components/schemas/UnsharpenMaskAction",
            "WatermarkAction": "#/components/schemas/WatermarkAction"
          }
        },
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "kind"
        ],
        "properties": {
          "kind": {
            "type": "string"
          }
        }
      },
      "AlphaHandlingAction": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ImageActionBase"
          },
          {
            "type": "object",
            "description": "An ImageAction that allows different forms of modifying alpha information in an image.",
            "additionalProperties": false,
            "properties": {
              "alphaHandling": {
                "description": "Specifies the kind of alpha handling to be applied.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/AlphaHandling"
                  }
                ]
              },
              "replacementRgbColorHexCode": {
                "type": "string",
                "description": "Specifies potentially needed color information for alpha handling. Must be given in RGB hex format (8 bit per channel).",
                "nullable": true
              }
            }
          }
        ]
      },
      "AlphaHandling": {
        "type": "string",
        "description": "Specifies the kind of AlphaHandling to be applied to an image",
        "x-enumNames": [
          "DiscardAlpha",
          "ReplaceAlpha",
          "ReplaceInvertedAlpha"
        ],
        "enum": [
          "DiscardAlpha",
          "ReplaceAlpha",
          "ReplaceInvertedAlpha"
        ]
      },
      "CropAction": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ImageActionBase"
          },
          {
            "type": "object",
            "description": "An ImageAction that allows cropping an image.",
            "additionalProperties": false,
            "properties": {
              "x": {
                "type": "integer",
                "description": "X-Coordinate of top left point of the cropping rectangle.",
                "format": "int32"
              },
              "y": {
                "type": "integer",
                "description": "Y-Coordinate of top left point of the cropping rectangle.",
                "format": "int32"
              },
              "width": {
                "type": "integer",
                "description": "Width of the cropping rectangle.",
                "format": "int32"
              },
              "height": {
                "type": "integer",
                "description": "Height of the cropping rectangle.",
                "format": "int32"
              }
            }
          }
        ]
      },
      "UnsharpenMaskAction": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ImageActionBase"
          },
          {
            "type": "object",
            "description": "Increases sharpness of an image by using the unsharp mask technique.",
            "additionalProperties": false,
            "properties": {
              "amount": {
                "type": "number",
                "description": "Unsharp mask amount (the difference between blurred and original image).",
                "format": "float"
              },
              "radius": {
                "type": "number",
                "description": "Blur radius used to produce unfocused version of the image.",
                "format": "float"
              },
              "threshold": {
                "type": "number",
                "description": "The threshold value for the unsharp mask in range [0, 1]",
                "format": "float"
              }
            }
          }
        ]
      },
      "WatermarkAction": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ImageActionBase"
          },
          {
            "type": "object",
            "description": "An ImageAction that allows rendering a watermark to an image",
            "additionalProperties": false,
            "properties": {
              "watermarkFilePath": {
                "type": "string",
                "description": "Identifies the image to be used as watermark",
                "nullable": true
              },
              "marginLeft": {
                "type": "integer",
                "description": "Margin to the left border of the image, in pixels",
                "format": "int32",
                "nullable": true
              },
              "marginTop": {
                "type": "integer",
                "description": "Margin to the top of the image, in pixels",
                "format": "int32",
                "nullable": true
              },
              "marginRight": {
                "type": "integer",
                "description": "Margin to the right border of the image, in pixels",
                "format": "int32",
                "nullable": true
              },
              "marginBottom": {
                "type": "integer",
                "description": "Margin to the bottom of the image, in pixels",
                "format": "int32",
                "nullable": true
              },
              "opacity": {
                "type": "number",
                "description": "Scales the opacity of the watermark",
                "format": "float"
              },
              "widthRatio": {
                "type": "number",
                "description": "Scales the watermark width according to the size of the final image.",
                "format": "float"
              },
              "heightRatio": {
                "type": "number",
                "description": "Scales the watermark height according to the size of the final image.",
                "format": "float"
              }
            }
          }
        ]
      },
      "OriginalFormat": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FormatBase"
          },
          {
            "type": "object",
            "description": "Special format that represents the original.",
            "additionalProperties": false,
            "properties": {
              "extension": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "JpegFormat": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ImageFormatBase"
          },
          {
            "type": "object",
            "description": "Renders a JPEG image.",
            "additionalProperties": false,
            "properties": {
              "quality": {
                "type": "integer",
                "description": "Compression quality. Must be in range [0,100] and defaults to 80.",
                "format": "int32"
              },
              "chromaSubsamplingEnabled": {
                "type": "boolean",
                "description": "Whether to use chroma subsampling or not."
              },
              "extension": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "PngFormat": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ImageFormatBase"
          },
          {
            "type": "object",
            "description": "Renders a PNG image.",
            "additionalProperties": false,
            "properties": {
              "extension": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "TiffFormat": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ImageFormatBase"
          },
          {
            "type": "object",
            "description": "Renders a TIFF image",
            "additionalProperties": false,
            "properties": {
              "alphaPremultiplied": {
                "type": "boolean",
                "description": "Specifies whether color channels should be premultiplied with alpha (associated alpha) or not (unassociated alpha)."
              },
              "compressionType": {
                "description": "Specifies the compression type to use.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CompressionType"
                  }
                ]
              },
              "includeUnspecifiedTiffExtraChannels": {
                "type": "boolean",
                "description": "Preserve (including size affecting changes) unspecified extraChannels."
              },
              "extension": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "CompressionType": {
        "type": "string",
        "description": "Available compression types.",
        "x-enumNames": [
          "None",
          "Lzw",
          "Rle",
          "Zip"
        ],
        "enum": [
          "None",
          "Lzw",
          "Rle",
          "Zip"
        ]
      },
      "VideoFormatBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FormatBase"
          },
          {
            "type": "object",
            "description": "Base class for rendering video.",
            "x-abstract": true,
            "additionalProperties": false
          }
        ]
      },
      "Mp4VideoFormat": {
        "allOf": [
          {
            "$ref": "#/components/schemas/VideoFormatBase"
          },
          {
            "type": "object",
            "description": "Renders H.264 in mp4 container.",
            "additionalProperties": false,
            "properties": {
              "resizeAction": {
                "description": "Allows resizing of the video.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ResizeAction"
                  }
                ]
              },
              "audioCodec": {
                "description": "Gets or sets the encoding audio codec.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/AudioFormatBase"
                  }
                ]
              },
              "preset": {
                "description": "Gets or sets the encoding codec preset.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Preset"
                  }
                ]
              },
              "extension": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "AudioFormatBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FormatBase"
          },
          {
            "type": "object",
            "description": "Base class for rendering audio.",
            "x-abstract": true,
            "additionalProperties": false
          }
        ]
      },
      "Preset": {
        "type": "string",
        "description": "Video rendering preset, see http://dev.beandog.org/x264_preset_reference.html for more information.",
        "x-enumNames": [
          "ultrafast",
          "superfast",
          "veryfast",
          "faster",
          "fast",
          "medium",
          "slow",
          "slower"
        ],
        "enum": [
          "ultrafast",
          "superfast",
          "veryfast",
          "faster",
          "fast",
          "medium",
          "slow",
          "slower"
        ]
      },
      "VideoSpriteFormat": {
        "allOf": [
          {
            "$ref": "#/components/schemas/VideoFormatBase"
          },
          {
            "type": "object",
            "description": "Generates a sprite image of the input video.",
            "additionalProperties": false,
            "properties": {
              "spriteResizeAction": {
                "description": "Specifies the dimensions of a single frame in the sprite.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ResizeAction"
                  }
                ]
              },
              "maxNumberOfSprites": {
                "type": "integer",
                "description": "Limit for the number of frames to generate.",
                "format": "int32"
              },
              "quality": {
                "type": "integer",
                "description": "JPEG-quality to use for the sprite.",
                "format": "int32"
              },
              "extension": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "VideoStillFormat": {
        "allOf": [
          {
            "$ref": "#/components/schemas/VideoFormatBase"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "extension": {
                "type": "string",
                "nullable": true
              },
              "positionInSeconds": {
                "type": "integer",
                "description": "Specifies the position from which to produce the image.",
                "format": "int32"
              }
            }
          }
        ]
      },
      "AacAudioFormat": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AudioFormatBase"
          },
          {
            "type": "object",
            "description": "Specifies Aac encoding for the output and additional settings for the encoder.",
            "additionalProperties": false,
            "properties": {
              "extension": {
                "type": "string",
                "nullable": true
              },
              "profile": {
                "description": "Gets or sets the encoding profile.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Profile"
                  }
                ]
              },
              "coder": {
                "description": "Gets or sets the encoding coder.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Coder"
                  }
                ]
              },
              "bitrate": {
                "type": "integer",
                "description": "Gets or sets the bitrate of the encoding in kbps.",
                "format": "int32",
                "nullable": true
              },
              "variableBitRate": {
                "type": "integer",
                "description": "Gets or sets the encoding variable bit rate (VBR) - 1 is lowest quality and 5 is highest quality.",
                "format": "int32",
                "nullable": true
              }
            }
          }
        ]
      },
      "Profile": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "aac_low",
          "mpeg2_aac_low",
          "aac_ltp",
          "aac_main"
        ],
        "enum": [
          "aac_low",
          "mpeg2_aac_low",
          "aac_ltp",
          "aac_main"
        ]
      },
      "Coder": {
        "type": "string",
        "description": "Audio coders",
        "x-enumNames": [
          "twoloop",
          "anmr",
          "fast"
        ],
        "enum": [
          "twoloop",
          "anmr",
          "fast"
        ]
      },
      "AudioStillFormat": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AudioFormatBase"
          },
          {
            "type": "object",
            "description": "Generates a waveform image from an Audio source.",
            "additionalProperties": false,
            "properties": {
              "extension": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "Mp3AudioFormat": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AudioFormatBase"
          },
          {
            "type": "object",
            "description": "Renders an MP3 audio file.",
            "additionalProperties": false,
            "properties": {
              "extension": {
                "type": "string",
                "nullable": true
              },
              "bitrate": {
                "type": "integer",
                "description": "Gets or sets the encoding bitrate. This setting and Quality are mutually exclusive.",
                "format": "int32",
                "nullable": true
              },
              "quality": {
                "type": "integer",
                "description": "Gets or sets the encoding quality. This setting and Bitrate are mutually exclusive.\nValues can be set it range of 0 to 9, where a lower value is a higher quality.",
                "format": "int32",
                "nullable": true
              }
            }
          }
        ]
      },
      "DocumentFormatBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FormatBase"
          },
          {
            "type": "object",
            "description": "Base class for rendering documents.",
            "x-abstract": true,
            "additionalProperties": false
          }
        ]
      },
      "DocumentStillFormat": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DocumentFormatBase"
          },
          {
            "type": "object",
            "description": "Render a document to a raster image",
            "additionalProperties": false,
            "properties": {
              "extension": {
                "type": "string",
                "nullable": true
              },
              "resizeAction": {
                "description": "Allows resizing of the image.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ResizeAction"
                  }
                ]
              }
            }
          }
        ]
      },
      "PdfFormat": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DocumentFormatBase"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "jpegQuality": {
                "type": "integer",
                "description": "Specifies compression quality used for ReduceFileSize.",
                "format": "int32"
              },
              "fastWebView": {
                "type": "boolean",
                "description": "Whether to linearize the output for fast web viewing."
              },
              "reduceFileSize": {
                "type": "boolean",
                "description": "Whether to apply measures to decrease output size or not."
              },
              "extension": {
                "type": "string",
                "nullable": true
              },
              "extractFullText": {
                "type": "boolean",
                "description": "Whether to extract document full text from this output."
              }
            }
          }
        ]
      },
      "VectorFormatBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FormatBase"
          },
          {
            "type": "object",
            "description": "Base class for rendering vector graphics.",
            "x-abstract": true,
            "additionalProperties": false
          }
        ]
      },
      "SvgFormat": {
        "allOf": [
          {
            "$ref": "#/components/schemas/VectorFormatBase"
          },
          {
            "type": "object",
            "description": "Render a PDF to SVG",
            "additionalProperties": false,
            "properties": {
              "extension": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "VectorStillFormat": {
        "allOf": [
          {
            "$ref": "#/components/schemas/VectorFormatBase"
          },
          {
            "type": "object",
            "description": "Render a vector graphic to a raster image",
            "additionalProperties": false,
            "properties": {
              "extension": {
                "type": "string",
                "nullable": true
              },
              "resizeAction": {
                "description": "Specifies output dimensions for raster operation",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ResizeAction"
                  }
                ]
              }
            }
          }
        ]
      },
      "OutputFormatDetail": {
        "allOf": [
          {
            "$ref": "#/components/schemas/OutputFormat"
          },
          {
            "type": "object",
            "description": "Represents an output format.",
            "additionalProperties": false,
            "properties": {
              "audit": {
                "description": "Audit information.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/UserAuditDetail"
                  }
                ]
              }
            }
          }
        ]
      },
      "OutputFormat": {
        "allOf": [
          {
            "$ref": "#/components/schemas/OutputFormatEditable"
          },
          {
            "type": "object",
            "description": "Represents an output format.",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "string",
                "description": "Output format ID.",
                "nullable": true
              },
              "system": {
                "type": "boolean",
                "description": "Marks if this is a system output format."
              },
              "dynamic": {
                "type": "boolean",
                "description": "A dynamic output format is not rendered automatically, but only on demand."
              },
              "dataExtraction": {
                "type": "boolean",
                "description": "Specifies if output format should be taken into account during data extraction."
              },
              "temporary": {
                "type": "boolean",
                "description": "Temporary outputs will not be backed up."
              }
            }
          }
        ]
      },
      "OutputFormatEditable": {
        "allOf": [
          {
            "$ref": "#/components/schemas/OutputFormatRenderingSpecification"
          },
          {
            "type": "object",
            "description": "Represents the editable part of the output format.",
            "additionalProperties": false,
            "required": [
              "names"
            ],
            "properties": {
              "names": {
                "description": "Language specific names.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/TranslatedStringDictionary"
                  }
                ]
              },
              "retentionTime": {
                "type": "string",
                "description": "How long should the dynamic outputs created from this format be kept.",
                "format": "time-span"
              },
              "downloadFileNamePatterns": {
                "description": "Optional patterns (liquid syntax) that produce the filename for item of this output format.\nIf set, the customer's default language is required.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/TranslatedStringDictionary"
                  }
                ]
              },
              "viewForAll": {
                "type": "boolean",
                "description": "Indicates if outputs derived from original output format should be accessible also for users not having AccessOriginal permission on the content."
              },
              "enableXmpWriteback": {
                "type": "boolean",
                "description": "Indicates if metadata should be written into XMP header of outputs where applicable and configured."
              }
            }
          }
        ]
      },
      "OutputFormatCreateManyRequest": {
        "type": "object",
        "description": "Used to create multiple new output formats at once.",
        "additionalProperties": false,
        "properties": {
          "items": {
            "type": "array",
            "description": "Output format items to be created.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/OutputFormat"
            }
          }
        }
      },
      "OutputFormatUpdateManyRequest": {
        "type": "object",
        "description": "Used to modify multiple output formats at once.",
        "additionalProperties": false,
        "properties": {
          "items": {
            "type": "array",
            "description": "Output format items to be modified.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/OutputFormatUpdateManyRequestItem"
            }
          }
        }
      },
      "OutputFormatUpdateManyRequestItem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/OutputFormatEditable"
          },
          {
            "type": "object",
            "description": "Represents one item to be modified in a bulk update operation on output formats.",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "string",
                "description": "ID of the output format to modify.",
                "nullable": true
              }
            }
          }
        ]
      },
      "OutputFormatDeleteManyRequest": {
        "type": "object",
        "description": "Used to remove multiple output formats at once.",
        "additionalProperties": false,
        "properties": {
          "ids": {
            "type": "array",
            "description": "List of IDs of output formats to remove.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "OutputSearchResult": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResultOfOutput"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "BaseResultOfOutput": {
        "type": "object",
        "description": "Base class for search results",
        "additionalProperties": false,
        "required": [
          "results",
          "totalResults",
          "elapsedMilliseconds"
        ],
        "properties": {
          "totalResults": {
            "type": "integer",
            "description": "The total number of matching documents.",
            "format": "int64"
          },
          "results": {
            "type": "array",
            "description": "The matched documents.",
            "items": {
              "$ref": "#/components/schemas/Output"
            }
          },
          "elapsedMilliseconds": {
            "type": "integer",
            "description": "The search execution time in milliseconds.",
            "format": "int64"
          },
          "pageToken": {
            "type": "string",
            "description": "An optional token to access the next page of results for those endpoints that support backend scrolling logic.",
            "nullable": true
          }
        }
      },
      "OutputSearchRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "limit"
        ],
        "properties": {
          "limit": {
            "type": "integer",
            "description": "Limits the document count of the result set. Defaults to 30.",
            "format": "int32",
            "default": 30
          },
          "pageToken": {
            "type": "string",
            "description": "The token used to retrieve the next page of results. It must be null on first request and only filled with the returned pageToken to request next page of results.",
            "nullable": true
          },
          "contentIds": {
            "type": "array",
            "description": "List of Content ids you want to use to fetch the outputs.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "renderingStates": {
            "type": "array",
            "description": "The allowed rendering states of the outputs you want to fetch.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/OutputRenderingState"
            }
          },
          "fileExtensions": {
            "type": "array",
            "description": "The file extension of the outputs you want to fetch.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "outputFormatIds": {
            "type": "array",
            "description": "The output format id of the outputs you want to fetch.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "OutputResetRetryAttemptsRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "includeCompleted"
        ],
        "properties": {
          "outputIds": {
            "type": "array",
            "description": "List of output IDs you want to filter on. If this field is not empty, the other will be ignored.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "contentIds": {
            "type": "array",
            "description": "List of Content IDs you want to filter on.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "fileExtensions": {
            "type": "array",
            "description": "The file extension of the outputs you want to filter on.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "outputFormatIds": {
            "type": "array",
            "description": "The IDs of the output formats you want to filter on.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "includeCompleted": {
            "type": "boolean",
            "description": "Should the successful filter results also be reset (and subsequently re-rendered)?"
          }
        }
      },
      "UserProfile": {
        "type": "object",
        "description": "User profile.",
        "additionalProperties": false,
        "required": [
          "authorizationState",
          "isLocked",
          "termsConsentExpired",
          "isDeveloper",
          "isFederated"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the user.",
            "nullable": true
          },
          "emailAddress": {
            "type": "string",
            "description": "Email address.",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "description": "First name.",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "description": "Last name.",
            "nullable": true
          },
          "languageCode": {
            "type": "string",
            "description": "Language code.",
            "nullable": true
          },
          "address": {
            "description": "Address.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserAddress"
              }
            ]
          },
          "authorizationState": {
            "description": "Authorization state.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/AuthorizationState"
              }
            ]
          },
          "isLocked": {
            "type": "boolean",
            "description": "Indicates if the user is locked."
          },
          "userRights": {
            "type": "array",
            "description": "A list of user rights assigned to the user.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/UserRight"
            }
          },
          "userRoleIds": {
            "type": "array",
            "description": "A list of user role IDs assigned to the user.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "termsConsentExpired": {
            "type": "boolean",
            "description": "Indicates if the user has not accepted the latest terms of consent."
          },
          "systemUserRoles": {
            "type": "array",
            "description": "A list of system user roles assigned to the user.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/SystemUserRole"
            }
          },
          "isDeveloper": {
            "type": "boolean",
            "description": "Indicates if the user has the developer flag set."
          },
          "isFederated": {
            "type": "boolean",
            "description": "Federated user is a user who is (currently) governed by an external identity provider."
          }
        }
      },
      "UserAddress": {
        "type": "object",
        "description": "User's address",
        "additionalProperties": false,
        "properties": {
          "company": {
            "type": "string",
            "description": "Company address line",
            "nullable": true
          },
          "department": {
            "type": "string",
            "description": "Company department.",
            "nullable": true
          },
          "address": {
            "type": "string",
            "description": "Street and house number.",
            "nullable": true
          },
          "alternativeAddress": {
            "type": "string",
            "description": "Additional address line.",
            "nullable": true
          },
          "zip": {
            "type": "string",
            "description": "ZIP code.",
            "nullable": true
          },
          "city": {
            "type": "string",
            "description": "City or town.",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "description": "Phone number.",
            "nullable": true
          },
          "countryCode": {
            "type": "string",
            "description": "Country code.",
            "nullable": true
          }
        }
      },
      "SystemUserRole": {
        "type": "string",
        "description": "System user roles.",
        "x-enumNames": [
          "Administrator"
        ],
        "enum": [
          "Administrator"
        ]
      },
      "UserProfileUpdateRequest": {
        "type": "object",
        "description": "Request to update a user profile.",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the user.",
            "nullable": true
          },
          "emailAddress": {
            "type": "string",
            "description": "Email address.",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "description": "First name.",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "description": "Last name.",
            "nullable": true
          },
          "languageCode": {
            "type": "string",
            "description": "Language code.",
            "nullable": true
          },
          "address": {
            "description": "Address.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserAddress"
              }
            ]
          }
        }
      },
      "SchemaPermissionSetDetail": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PermissionSetDetailOfMetadataRight"
          },
          {
            "type": "object",
            "description": "Detail of a schema permission set",
            "additionalProperties": false
          }
        ]
      },
      "PermissionSetDetailOfMetadataRight": {
        "type": "object",
        "description": "Base class for detail of permission sets",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "id",
          "names",
          "ownerTokenId",
          "exclusive"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The permission set ID.",
            "minLength": 1
          },
          "names": {
            "description": "Language specific permission set names.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/TranslatedStringDictionary"
              }
            ]
          },
          "userRolesRights": {
            "type": "array",
            "description": "A list of content or metadata rights authorizing operations on Content Items or List Items.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PermissionUserRoleRightsOfMetadataRight"
            }
          },
          "userRolesPermissionSetRights": {
            "type": "array",
            "description": "A list of permission set rights authorizing operations on this permission set.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PermissionUserRoleRightsOfPermissionSetRight"
            }
          },
          "exclusive": {
            "type": "boolean",
            "description": "When true this permission set will derogate all other configured permission sets on the Content Item or List Item."
          },
          "ownerTokenId": {
            "type": "string",
            "description": "The owner token ID. Defines the permission set owner.",
            "minLength": 1
          },
          "audit": {
            "description": "Audit information.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserAuditDetail"
              }
            ]
          }
        }
      },
      "PermissionUserRoleRightsOfMetadataRight": {
        "type": "object",
        "description": "Rights assigned to a user role.",
        "additionalProperties": false,
        "properties": {
          "userRoleId": {
            "type": "string",
            "description": "The user role ID.",
            "nullable": true
          },
          "names": {
            "description": "Language specific user role names.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/TranslatedStringDictionary"
              }
            ]
          },
          "rights": {
            "type": "array",
            "description": "List of rights: they can be content, metadata or permission set rights, depending on the type defined on the class\n(ContentRight, MetadataRight, PermissionSetRight).",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/MetadataRight"
            }
          }
        }
      },
      "SchemaPermissionSetCreateRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PermissionSetCreateRequestOfMetadataRight"
          },
          {
            "type": "object",
            "description": "Request to create a schema permission set",
            "additionalProperties": false
          }
        ]
      },
      "PermissionSetCreateRequestOfMetadataRight": {
        "type": "object",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "names",
          "exclusive"
        ],
        "properties": {
          "names": {
            "description": "Language specific permission set names.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/TranslatedStringDictionary"
              }
            ]
          },
          "userRolesRights": {
            "type": "array",
            "description": "A list of content or metadata rights authorizing operations on Content Items or List Items.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/UserRoleRightsOfMetadataRight"
            }
          },
          "userRolesPermissionSetRights": {
            "type": "array",
            "description": "A list of permission set rights authorizing operations on this permission set.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/UserRoleRightsOfPermissionSetRight"
            }
          },
          "exclusive": {
            "type": "boolean",
            "description": "When true this permission set will derogate all other configured permission sets on Content Items or List Items."
          },
          "requestId": {
            "type": "string",
            "description": "Optional client reference for this request.\nWill be returned back in response to make easier for clients to match request items with the respective results.\nIt is not persisted anywhere and it is ignored in single operations.",
            "nullable": true
          }
        }
      },
      "UserRoleRightsOfMetadataRight": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "userRoleId": {
            "type": "string",
            "description": "The user role id.",
            "nullable": true
          },
          "rights": {
            "type": "array",
            "description": "A permission container which can hold content, metadata or permission set rights.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/MetadataRight"
            }
          }
        }
      },
      "SchemaPermissionSetUpdateRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PermissionSetUpdateRequestOfMetadataRight"
          },
          {
            "type": "object",
            "description": "Request to update a schema permission set",
            "additionalProperties": false
          }
        ]
      },
      "PermissionSetUpdateRequestOfMetadataRight": {
        "type": "object",
        "description": "Base class for permission set update requests",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "names"
        ],
        "properties": {
          "names": {
            "description": "Language specific permission set names.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/TranslatedStringDictionary"
              }
            ]
          },
          "userRolesRights": {
            "type": "array",
            "description": "A list of content or metadata rights authorizing operations on Content Items or List Items.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/UserRoleRightsOfMetadataRight"
            }
          },
          "userRolesPermissionSetRights": {
            "type": "array",
            "description": "A list of permission set rights authorizing operations on this permission set.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/UserRoleRightsOfPermissionSetRight"
            }
          }
        }
      },
      "SchemaPermissionSetCreateManyRequest": {
        "type": "object",
        "description": "Request to update multiple schema permission sets",
        "additionalProperties": false,
        "properties": {
          "items": {
            "type": "array",
            "description": "Schema permission sets create requests.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/SchemaPermissionSetCreateRequest"
            }
          }
        }
      },
      "SchemaPermissionSetUpdateManyRequest": {
        "type": "object",
        "description": "Request to update multiple schema permissions sets",
        "additionalProperties": false,
        "properties": {
          "items": {
            "type": "array",
            "description": "Schema permission sets update requests.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/SchemaPermissionSetUpdateRequestItem"
            }
          }
        }
      },
      "SchemaPermissionSetUpdateRequestItem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PermissionSetUpdateRequestItemOfMetadataRight"
          },
          {
            "type": "object",
            "description": "Request to update a schema permission set",
            "additionalProperties": false
          }
        ]
      },
      "PermissionSetUpdateRequestItemOfMetadataRight": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PermissionSetUpdateRequestOfMetadataRight"
          },
          {
            "type": "object",
            "description": "Base class for permission set update requests",
            "x-abstract": true,
            "additionalProperties": false,
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "type": "string",
                "description": "The permission set ID.",
                "minLength": 1
              }
            }
          }
        ]
      },
      "SchemaDetail": {
        "type": "object",
        "description": "The details of a schema",
        "additionalProperties": false,
        "required": [
          "id",
          "schemaNamespace",
          "types",
          "displayPatterns",
          "ownerTokenId",
          "system",
          "viewForAll"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The schema ID. It is unique throughout the whole customer setup.",
            "minLength": 1
          },
          "schemaNamespace": {
            "type": "string",
            "description": "System generated schema namespace. It contains the full schema hierarchy up to the root schema (i.e. [RootSchemaId].[ParentSchemaId].[SchemaId]).",
            "minLength": 1
          },
          "parentSchemaId": {
            "type": "string",
            "description": "The parent schema ID.",
            "nullable": true
          },
          "types": {
            "type": "array",
            "description": "List of schema types. Currently only one schema type can be assigned to this list, and it cannot be modified once the schema is created.",
            "items": {
              "$ref": "#/components/schemas/SchemaType"
            }
          },
          "names": {
            "description": "Language specific schema names.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/TranslatedStringDictionary"
              }
            ]
          },
          "descriptions": {
            "description": "Language specific schema descriptions.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/TranslatedStringDictionary"
              }
            ]
          },
          "layerSchemaIds": {
            "type": "array",
            "description": "An optional list of schemas' IDs with type layer. For a Content schema it stores the layers that can be assigned to a content.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "displayPatterns": {
            "type": "array",
            "description": "Language specific DotLiquid templates. These templates will be resolved into display values in content documents and/or list items.",
            "items": {
              "$ref": "#/components/schemas/DisplayPattern"
            }
          },
          "fields": {
            "type": "array",
            "description": "The schema fields.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/FieldBase"
            }
          },
          "fieldsOverwrite": {
            "type": "array",
            "description": "A list of schema fields overwrite information. It is used to overwrite the field configuration coming from the parent schema.\nOnly a subset of properties of a FieldSingleTagbox and FieldMultiTagbox can be be overwritten. All other properties and fields cannot.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/FieldOverwriteBase"
            }
          },
          "sort": {
            "type": "array",
            "description": "Sorts content documents and/or list items. In order for the sorting to work properly, the Sortable property of the related field\nmust be set to true. Multiple sorting is supported: they are applied in the specified order.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/SortInfo"
            }
          },
          "aggregations": {
            "type": "array",
            "description": "An optional list of aggregations to show grouped list item documents. When aggregations are defined for a List,\nthe UI uses such information to show the available filters and grouped results.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/AggregatorBase"
            }
          },
          "system": {
            "type": "boolean",
            "description": "Identifies a system provided schema. A system schema cannot be created, updated or deleted."
          },
          "ownerTokenId": {
            "type": "string",
            "description": "The owner token ID. Defines the schema owner.",
            "minLength": 1
          },
          "viewForAll": {
            "type": "boolean",
            "description": "Defines a schema as viewable by everyone. Everyone with ManageSchema user permission is able to see the schema."
          },
          "schemaPermissionSetIds": {
            "type": "array",
            "description": "An optional list of schema permission set IDs which control schema permissions.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "referencedInContentSchemaIds": {
            "type": "array",
            "description": "If the schema if of type Layer, the list contains the schemas with type Content\nthat reference the layer.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "descendantSchemaIds": {
            "type": "array",
            "description": "The complete list of all descendant schema IDs.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "audit": {
            "description": "Audit information.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserAuditDetail"
              }
            ]
          },
          "searchFieldCount": {
            "description": "The number of fields generated by the schema in the search index for filtering, searching and sorting.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/SearchFieldCount"
              }
            ]
          }
        }
      },
      "DisplayPattern": {
        "type": "object",
        "description": "Represent the template whose value will be resolved based on the actual content.",
        "additionalProperties": false,
        "required": [
          "templateEngine",
          "displayPatternType"
        ],
        "properties": {
          "templateEngine": {
            "description": "The template engine used for parsing the display patterns.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/TemplateEngine"
              }
            ]
          },
          "displayPatternType": {
            "description": "The display pattern type.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/DisplayPatternType"
              }
            ]
          },
          "templates": {
            "description": "Language specific pattern templates.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/TranslatedStringDictionary"
              }
            ]
          }
        }
      },
      "TemplateEngine": {
        "type": "string",
        "description": "The template engine used for parsing the display patterns",
        "x-enumNames": [
          "DotLiquid"
        ],
        "enum": [
          "DotLiquid"
        ]
      },
      "FieldBase": {
        "type": "object",
        "discriminator": {
          "propertyName": "kind",
          "mapping": {
            "FieldBoolean": "#/components/schemas/FieldBoolean",
            "FieldDate": "#/components/schemas/FieldDate",
            "FieldDateTime": "#/components/schemas/FieldDateTime",
            "FieldDateTimeArray": "#/components/schemas/FieldDateTimeArray",
            "FieldDecimal": "#/components/schemas/FieldDecimal",
            "FieldDictionary": "#/components/schemas/FieldDictionary",
            "FieldDictionaryArray": "#/components/schemas/FieldDictionaryArray",
            "FieldGeoPoint": "#/components/schemas/FieldGeoPoint",
            "FieldTrigger": "#/components/schemas/FieldTrigger",
            "FieldLong": "#/components/schemas/FieldLong",
            "FieldLongArray": "#/components/schemas/FieldLongArray",
            "FieldSingleFieldset": "#/components/schemas/FieldSingleFieldset",
            "FieldMultiFieldset": "#/components/schemas/FieldMultiFieldset",
            "FieldSingleTagbox": "#/components/schemas/FieldSingleTagbox",
            "FieldMultiTagbox": "#/components/schemas/FieldMultiTagbox",
            "FieldString": "#/components/schemas/FieldString",
            "FieldStringArray": "#/components/schemas/FieldStringArray",
            "FieldTranslatedString": "#/components/schemas/FieldTranslatedString",
            "FieldSingleRelation": "#/components/schemas/FieldSingleRelation",
            "FieldMultiRelation": "#/components/schemas/FieldMultiRelation"
          }
        },
        "description": "The field base class",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "id",
          "kind",
          "required",
          "fixed",
          "index",
          "simpleSearch",
          "sortable"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The field ID. It can be a slug; it must be unique within the schema hierarchy (ancestors / descendants); it must be begin with lower case.",
            "minLength": 1
          },
          "indexId": {
            "type": "string",
            "description": "The index ID is auto generated by the system.",
            "nullable": true
          },
          "fieldNamespace": {
            "type": "string",
            "description": "The field namespace is auto generated by the system: it carries the hierarchy information.",
            "nullable": true
          },
          "names": {
            "description": "Language specific field names.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/TranslatedStringDictionary"
              }
            ]
          },
          "descriptions": {
            "description": "Language specific field descriptions.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/TranslatedStringDictionary"
              }
            ]
          },
          "required": {
            "type": "boolean",
            "description": "Defines if a field value is mandatory or not."
          },
          "fixed": {
            "type": "boolean",
            "description": "Defines if the field can be edited or not."
          },
          "index": {
            "type": "boolean",
            "description": "Field is stored for filtering."
          },
          "simpleSearch": {
            "type": "boolean",
            "description": "Field is stored for simple search."
          },
          "sortable": {
            "type": "boolean",
            "description": "Field is stored for sorting."
          },
          "kind": {
            "type": "string"
          }
        }
      },
      "FieldBoolean": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FieldBase"
          },
          {
            "type": "object",
            "description": "The field used to store a boolean",
            "additionalProperties": false,
            "properties": {
              "boost": {
                "type": "number",
                "description": "Value to prioritize search results. Set to 1 by default. Ignored if SimpleSearch not set to true.",
                "format": "double",
                "default": 1
              }
            }
          }
        ]
      },
      "FieldDate": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FieldBase"
          },
          {
            "type": "object",
            "description": "The field used to store a date",
            "additionalProperties": false,
            "properties": {
              "format": {
                "type": "string",
                "description": "The date format structure.",
                "nullable": true
              },
              "boost": {
                "type": "number",
                "description": "Value to prioritize search results. Set to 1 by default. Ignored if SimpleSearch not set to true.",
                "format": "double",
                "default": 1
              }
            }
          }
        ]
      },
      "FieldDateTime": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FieldBase"
          },
          {
            "type": "object",
            "description": "The field used to store a date time",
            "additionalProperties": false,
            "properties": {
              "format": {
                "type": "string",
                "description": "The date time format structure.",
                "nullable": true
              },
              "boost": {
                "type": "number",
                "description": "Value to prioritize search results. Set to 1 by default. Ignored if SimpleSearch not set to true.",
                "format": "double",
                "default": 1
              },
              "initializeOnItemCreation": {
                "type": "boolean",
                "description": "If set to true, the date time value is automatically set when a content or list item is created.",
                "default": false
              }
            }
          }
        ]
      },
      "FieldDateTimeArray": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FieldDateTime"
          },
          {
            "type": "object",
            "description": "The field used to store multiple date time values",
            "additionalProperties": false,
            "properties": {
              "maximumItems": {
                "type": "integer",
                "description": "The maximum number of items that can be stored.",
                "format": "int32",
                "nullable": true
              },
              "minimumItems": {
                "type": "integer",
                "description": "The minimum number of items that must be stored.",
                "format": "int32",
                "nullable": true
              }
            }
          }
        ]
      },
      "FieldDecimal": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FieldBase"
          },
          {
            "type": "object",
            "description": "The field used to store a decimal value",
            "additionalProperties": false,
            "properties": {
              "pattern": {
                "type": "string",
                "description": "The decimal pattern structure.",
                "nullable": true
              },
              "minimum": {
                "type": "number",
                "description": "The minimum possible value.",
                "format": "decimal",
                "nullable": true
              },
              "maximum": {
                "type": "number",
                "description": "The maximum possible value.",
                "format": "decimal",
                "nullable": true
              },
              "boost": {
                "type": "number",
                "description": "Value to prioritize search results. Set to 1 by default. Ignored if SimpleSearch not set to true.",
                "format": "double",
                "default": 1
              }
            }
          }
        ]
      },
      "FieldDictionary": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FieldBase"
          },
          {
            "type": "object",
            "description": "The field used to store a dictionary of values",
            "additionalProperties": false,
            "properties": {
              "boost": {
                "type": "number",
                "description": "Value to prioritize search results. Set to 1 by default. Ignored if SimpleSearch not set to true.",
                "format": "double",
                "default": 1
              }
            }
          }
        ]
      },
      "FieldDictionaryArray": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FieldDictionary"
          },
          {
            "type": "object",
            "description": "The field used to store multiple dictionaries' values",
            "additionalProperties": false,
            "properties": {
              "maximumItems": {
                "type": "integer",
                "description": "The maximum number of items that can be stored.",
                "format": "int32",
                "nullable": true
              },
              "minimumItems": {
                "type": "integer",
                "description": "The minimum number of items that must be stored.",
                "format": "int32",
                "nullable": true
              }
            }
          }
        ]
      },
      "FieldGeoPoint": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FieldBase"
          },
          {
            "type": "object",
            "description": "The field used to store a geo point",
            "additionalProperties": false,
            "properties": {
              "boost": {
                "type": "number",
                "description": "Value to prioritize search results. Set to 1 by default. Ignored if SimpleSearch not set to true.",
                "format": "double",
                "default": 1
              }
            }
          }
        ]
      },
      "FieldTrigger": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FieldBase"
          },
          {
            "type": "object",
            "description": "A field that can be triggered, and store in such occasion the id of the user and the time that triggered it. The last user who triggered it and the last time in which it was triggered can be used for filtering or for\nsimple search (if enabled on the field). Such information are stored in two inner fields: \"triggeredBy\" and \"triggeredOn\". In order to be triggered in a Content or ListItem metadata dictionary, the special '\"_trigger\": true'\nshould be sent in the data of the field itself.",
            "additionalProperties": false,
            "properties": {
              "boost": {
                "type": "number",
                "description": "Value to prioritize search results. Set to 1 by default. Ignored if SimpleSearch not set to true.",
                "format": "double",
                "default": 1
              }
            }
          }
        ]
      },
      "FieldLong": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FieldBase"
          },
          {
            "type": "object",
            "description": "The field used to store a long value",
            "additionalProperties": false,
            "properties": {
              "pattern": {
                "type": "string",
                "description": "The long pattern structure.",
                "nullable": true
              },
              "minimum": {
                "type": "number",
                "description": "The minimum possible value.",
                "format": "decimal",
                "nullable": true
              },
              "maximum": {
                "type": "number",
                "description": "The maximum possible value.",
                "format": "decimal",
                "nullable": true
              },
              "boost": {
                "type": "number",
                "description": "Value to prioritize search results. Set to 1 by default. Ignored if SimpleSearch not set to true.",
                "format": "double",
                "default": 1
              }
            }
          }
        ]
      },
      "FieldLongArray": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FieldLong"
          },
          {
            "type": "object",
            "description": "The field used to store multiple long values",
            "additionalProperties": false,
            "properties": {
              "maximumItems": {
                "type": "integer",
                "description": "The maximum number of items that can be stored.",
                "format": "int32",
                "nullable": true
              },
              "minimumItems": {
                "type": "integer",
                "description": "The minimum number of items that must be stored.",
                "format": "int32",
                "nullable": true
              }
            }
          }
        ]
      },
      "FieldSingleFieldset": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FieldBase"
          },
          {
            "type": "object",
            "description": "The field used to store a single fieldset",
            "additionalProperties": false,
            "required": [
              "schemaId"
            ],
            "properties": {
              "schemaId": {
                "type": "string",
                "description": "The ID of the schema to be used as fieldset (it must be of type Struct).",
                "minLength": 1
              },
              "schemaIndexingInfo": {
                "description": "Indexing information of fields of the related schema identified by the SchemaId property",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/SchemaIndexingInfo"
                  }
                ]
              }
            }
          }
        ]
      },
      "SchemaIndexingInfo": {
        "type": "object",
        "description": "Indexing information for a schema",
        "additionalProperties": false,
        "properties": {
          "fields": {
            "type": "array",
            "description": "A collection of indexing information for the fields of a schema",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/FieldIndexingInfo"
            }
          }
        }
      },
      "FieldIndexingInfo": {
        "type": "object",
        "description": "Indexing information for a field of a schema",
        "additionalProperties": false,
        "required": [
          "id",
          "index",
          "simpleSearch",
          "sortable",
          "boost"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The field ID.",
            "minLength": 1
          },
          "index": {
            "type": "boolean",
            "description": "Field is stored for filtering."
          },
          "simpleSearch": {
            "type": "boolean",
            "description": "Field is stored for simple search."
          },
          "sortable": {
            "type": "boolean",
            "description": "Field is stored for sorting."
          },
          "boost": {
            "type": "number",
            "description": "Value to prioritize search results. Set to 1 by default. Ignored if SimpleSearch not set to true.",
            "format": "double",
            "default": 1
          },
          "relatedSchemaIndexing": {
            "description": "Indexing information of schema's fields related to this field (if existing).",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/SchemaIndexingInfo"
              }
            ]
          }
        }
      },
      "FieldMultiFieldset": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FieldBase"
          },
          {
            "type": "object",
            "description": "The field used to store multiple fieldsets",
            "additionalProperties": false,
            "required": [
              "schemaId"
            ],
            "properties": {
              "schemaId": {
                "type": "string",
                "description": "The ID of the schema to be used as fieldset (it must be of type Struct, and it cannot be a system schema).",
                "minLength": 1
              },
              "schemaIndexingInfo": {
                "description": "Indexing information of fields of the related schema identified by the SchemaId property.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/SchemaIndexingInfo"
                  }
                ]
              },
              "maximumItems": {
                "type": "integer",
                "description": "The maximum number of items that can be stored.",
                "format": "int32",
                "nullable": true
              },
              "minimumItems": {
                "type": "integer",
                "description": "The minimum number of items that must be stored.",
                "format": "int32",
                "nullable": true
              }
            }
          }
        ]
      },
      "FieldSingleTagbox": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FieldBase"
          },
          {
            "type": "object",
            "description": "The field used to store a single tagbox",
            "additionalProperties": false,
            "required": [
              "schemaId"
            ],
            "properties": {
              "schemaId": {
                "type": "string",
                "description": "The ID of the schema to be used as tagbox (it must be of type List).",
                "minLength": 1
              },
              "schemaIndexingInfo": {
                "description": "Indexing information of fields of the related schema identified by the SchemaId property.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/SchemaIndexingInfo"
                  }
                ]
              },
              "filter": {
                "description": "An optional filter to limit the list items.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/FilterBase"
                  }
                ]
              },
              "listItemCreateTemplate": {
                "type": "string",
                "description": "Json serialized template used for creating new list item (no logic is implemented in backend).",
                "nullable": true
              },
              "viewModeDisplayPatternType": {
                "description": "Defines the display pattern type to be used (Name or List only) when showing a tagbox item in view mode. Defaults to \"Name\".\nThe information is only consumed by the client application. No actual logic is implemented in the backend.",
                "default": "Name",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/DisplayPatternType"
                  }
                ]
              }
            }
          }
        ]
      },
      "FieldMultiTagbox": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FieldBase"
          },
          {
            "type": "object",
            "description": "The field used to store multiple tagboxes",
            "additionalProperties": false,
            "required": [
              "schemaId"
            ],
            "properties": {
              "schemaId": {
                "type": "string",
                "description": "The ID of the schema to be used as tagbox (it must be of type List).",
                "minLength": 1
              },
              "schemaIndexingInfo": {
                "description": "Indexing information of fields of the related schema identified by the SchemaId property",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/SchemaIndexingInfo"
                  }
                ]
              },
              "maximumItems": {
                "type": "integer",
                "description": "The maximum number of items that can be stored.",
                "format": "int32",
                "nullable": true
              },
              "minimumItems": {
                "type": "integer",
                "description": "The minimum number of items that must be stored.",
                "format": "int32",
                "nullable": true
              },
              "filter": {
                "description": "An optional filter to limit the returned list items.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/FilterBase"
                  }
                ]
              },
              "listItemCreateTemplate": {
                "type": "string",
                "description": "Json serialized template used for creating new list item (no logic is implemented in backend).",
                "nullable": true
              },
              "viewModeDisplayPatternType": {
                "description": "Defines the display pattern type to be used (Name or List only) when showing a tagbox item in view mode. Defaults to \"Name\".\nThe information is only consumed by the client application. No actual logic is implemented in the backend.",
                "default": "Name",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/DisplayPatternType"
                  }
                ]
              }
            }
          }
        ]
      },
      "FieldString": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FieldBase"
          },
          {
            "type": "object",
            "description": "The field used to store a string value",
            "additionalProperties": false,
            "properties": {
              "template": {
                "type": "string",
                "description": "A DotLiquid template. If set, it transforms the field in a calculated field, so that its value is calculated based on this template.",
                "nullable": true
              },
              "pattern": {
                "type": "string",
                "description": "Contains a regex validation pattern.",
                "nullable": true
              },
              "minimumLength": {
                "type": "integer",
                "description": "The minimum string's lenght.",
                "format": "int32",
                "nullable": true
              },
              "maximumLength": {
                "type": "integer",
                "description": "The maximum string's length.",
                "format": "int32",
                "nullable": true
              },
              "indexAnalyzers": {
                "type": "array",
                "description": "Defines how the value must be analyzed for filtering by ElasticSearch. A string field can have multiple analyzers, but only one per analyzer type.\nThe analyzers are applied only if the Index property is set to true.",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/AnalyzerBase"
                }
              },
              "simpleSearchAnalyzers": {
                "type": "array",
                "description": "Defines how the value must be analyzed for searches by ElasticSearch. A string field can have multiple analyzers, but only one per analyzer type.\nThe analyzers are applied only if the SimpleSearch property is set to true.",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/AnalyzerBase"
                }
              },
              "multiLine": {
                "type": "boolean",
                "description": "Defines that the field value must be displayed in a multiline component."
              },
              "grantedValues": {
                "type": "array",
                "description": "If values are stored in this list, field values are limited to these ones.",
                "nullable": true,
                "items": {
                  "type": "string"
                }
              },
              "boost": {
                "type": "number",
                "description": "Value to prioritize search results. Set to 1 by default. Ignored if SimpleSearch not set to true.",
                "format": "double",
                "default": 1
              }
            }
          }
        ]
      },
      "AnalyzerBase": {
        "type": "object",
        "discriminator": {
          "propertyName": "kind",
          "mapping": {
            "EdgeNGramAnalyzer": "#/components/schemas/EdgeNGramAnalyzer",
            "LanguageAnalyzer": "#/components/schemas/LanguageAnalyzer",
            "NGramAnalyzer": "#/components/schemas/NGramAnalyzer",
            "PathHierarchyAnalyzer": "#/components/schemas/PathHierarchyAnalyzer",
            "SimpleAnalyzer": "#/components/schemas/SimpleAnalyzer"
          }
        },
        "description": "The analyzer base class",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "kind"
        ],
        "properties": {
          "kind": {
            "type": "string"
          }
        }
      },
      "EdgeNGramAnalyzer": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AnalyzerBase"
          },
          {
            "type": "object",
            "description": "An analyzer using the ElasticSearch's EdgeNGram tokenizer",
            "additionalProperties": false,
            "properties": {
              "type": {
                "description": "The analyzer type: EdgeNGram",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Analyzer"
                  }
                ]
              },
              "fieldSuffix": {
                "type": "string",
                "description": "The suffix for the analyzed field: edgengram.",
                "nullable": true
              }
            }
          }
        ]
      },
      "LanguageAnalyzer": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AnalyzerBase"
          },
          {
            "type": "object",
            "description": "An analyzer using an ElasticSearch's language tokenizer",
            "additionalProperties": false,
            "properties": {
              "type": {
                "description": "The analyzer type: Language",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Analyzer"
                  }
                ]
              },
              "fieldSuffix": {
                "type": "string",
                "description": "The suffix for the analyzed field: language.",
                "nullable": true
              }
            }
          }
        ]
      },
      "NGramAnalyzer": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AnalyzerBase"
          },
          {
            "type": "object",
            "description": "An analyzer using the ElasticSearch's NGram tokenizer",
            "additionalProperties": false,
            "properties": {
              "type": {
                "description": "The analyzer type: NGram",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Analyzer"
                  }
                ]
              },
              "fieldSuffix": {
                "type": "string",
                "description": "The suffix for the analyzed field: ngram.",
                "nullable": true
              }
            }
          }
        ]
      },
      "PathHierarchyAnalyzer": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AnalyzerBase"
          },
          {
            "type": "object",
            "description": "An analyzer using the ElasticSearch's path hierarchy tokenizer",
            "additionalProperties": false,
            "properties": {
              "type": {
                "description": "The analyzer type: PathHierarchy",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Analyzer"
                  }
                ]
              },
              "fieldSuffix": {
                "type": "string",
                "description": "The suffix for the analyzed field: pathhierarchy.",
                "nullable": true
              }
            }
          }
        ]
      },
      "SimpleAnalyzer": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AnalyzerBase"
          },
          {
            "type": "object",
            "description": "An analyzer using a custom pattern tokenizer",
            "additionalProperties": false,
            "properties": {
              "type": {
                "description": "The analyzer type: Simple",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Analyzer"
                  }
                ]
              },
              "fieldSuffix": {
                "type": "string",
                "description": "The suffix for the analyzed field: simple.",
                "nullable": true
              }
            }
          }
        ]
      },
      "FieldStringArray": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FieldString"
          },
          {
            "type": "object",
            "description": "The field used to store multiple string values",
            "additionalProperties": false,
            "properties": {
              "maximumItems": {
                "type": "integer",
                "description": "The maximum number of items that can be stored.",
                "format": "int32",
                "nullable": true
              },
              "minimumItems": {
                "type": "integer",
                "description": "The minimum number of items that must be stored.",
                "format": "int32",
                "nullable": true
              }
            }
          }
        ]
      },
      "FieldTranslatedString": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FieldBase"
          },
          {
            "type": "object",
            "description": "The field used to store a translated string values",
            "additionalProperties": false,
            "properties": {
              "pattern": {
                "type": "string",
                "description": "Contains a regex validation pattern.",
                "nullable": true
              },
              "minimumLength": {
                "type": "integer",
                "description": "The minimum string's lenght.",
                "format": "int32",
                "nullable": true
              },
              "maximumLength": {
                "type": "integer",
                "description": "The maximum string's length.",
                "format": "int32",
                "nullable": true
              },
              "indexAnalyzers": {
                "type": "array",
                "description": "Defines how the value must be analyzed for filtering by ElasticSearch. A string field can have multiple analyzers, but only one per analyzer type.\nThe analyzers are applied only if the Index property is set to true.",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/AnalyzerBase"
                }
              },
              "simpleSearchAnalyzers": {
                "type": "array",
                "description": "Defines how the value must be analyzed for searches by ElasticSearch. A string field can have multiple analyzers, but only one per analyzer type.\nThe analyzers are applied only if the SimpleSearch property is set to true.",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/AnalyzerBase"
                }
              },
              "multiLine": {
                "type": "boolean",
                "description": "Defines that the field value must be displayed in a multiline component."
              },
              "requiredMetadataLanguages": {
                "type": "array",
                "description": "Sets the required metadata languages for the translation field. The langauge configuration limits the available metadata languages.\nIf Required is true, the field and all its metadata languages are required.\nIf Required is false, the field can be left empty, but as soon as a value is entered all required metadata languages are mandatory.",
                "nullable": true,
                "items": {
                  "type": "string"
                }
              },
              "template": {
                "type": "string",
                "description": "A DotLiquid template. If set, it transforms the field in a calculated field, so that its value is calculated based on this template.\n            ",
                "nullable": true
              },
              "boost": {
                "type": "number",
                "description": "Value to prioritize search results. Set to 1 by default. Ignored if SimpleSearch not set to true.",
                "format": "double",
                "default": 1
              }
            }
          }
        ]
      },
      "FieldSingleRelation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FieldBase"
          },
          {
            "type": "object",
            "description": "The field used to store a single relation",
            "additionalProperties": false,
            "required": [
              "schemaId",
              "relationTypes"
            ],
            "properties": {
              "schemaId": {
                "type": "string",
                "description": "The ID of the schema used for relation metadata (it must be of type Struct, and it cannot be a system schema).",
                "minLength": 1
              },
              "schemaIndexingInfo": {
                "description": "Indexing information of fields of the related schema identified by the SchemaId property.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/SchemaIndexingInfo"
                  }
                ]
              },
              "relationTypes": {
                "type": "array",
                "description": "Defines the allowed elation types.",
                "items": {
                  "$ref": "#/components/schemas/RelationType"
                }
              }
            }
          }
        ]
      },
      "RelationType": {
        "type": "object",
        "description": "Defines a relation",
        "additionalProperties": false,
        "required": [
          "id",
          "targetDocType"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the relation type.",
            "minLength": 1
          },
          "names": {
            "description": "Language specific relation names.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/TranslatedStringDictionary"
              }
            ]
          },
          "targetDocType": {
            "type": "string",
            "description": "Defines the type of the document target of the relation. Currently supported: Content, ListItem.",
            "minLength": 1
          },
          "filter": {
            "description": "An optional filter to limit the documents of type TargetDocType.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/FilterBase"
              }
            ]
          }
        }
      },
      "FieldMultiRelation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FieldBase"
          },
          {
            "type": "object",
            "description": "The field used to store multiple relations",
            "additionalProperties": false,
            "required": [
              "schemaId",
              "relationTypes"
            ],
            "properties": {
              "schemaId": {
                "type": "string",
                "description": "The ID of the schema used for relation metadata (it must be of type Struct, and it cannot be a system schema).",
                "minLength": 1
              },
              "schemaIndexingInfo": {
                "description": "Indexing information of fields of the related schema identified by the SchemaId property.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/SchemaIndexingInfo"
                  }
                ]
              },
              "relationTypes": {
                "type": "array",
                "description": "The relation types supported by the field.",
                "items": {
                  "$ref": "#/components/schemas/RelationType"
                }
              },
              "maximumItems": {
                "type": "integer",
                "description": "The maximum number of items that can be stored.",
                "format": "int32",
                "nullable": true
              },
              "minimumItems": {
                "type": "integer",
                "description": "The minimum number of items that must be stored.",
                "format": "int32",
                "nullable": true
              }
            }
          }
        ]
      },
      "FieldOverwriteBase": {
        "type": "object",
        "discriminator": {
          "propertyName": "kind",
          "mapping": {
            "FieldOverwriteSingleTagbox": "#/components/schemas/FieldOverwriteSingleTagbox",
            "FieldOverwriteMultiTagbox": "#/components/schemas/FieldOverwriteMultiTagbox"
          }
        },
        "description": "Base class to overwrite field's information",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "kind",
          "required",
          "overwriteRequired"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The field's ID whose information need to be overwritten.",
            "nullable": true
          },
          "required": {
            "type": "boolean",
            "description": "Defines if a field value is mandatory or not: this value will overwrite the existing Required value specified in the parent schema  if\nOverwriteRequired is set to true."
          },
          "overwriteRequired": {
            "type": "boolean",
            "description": "Enable the overwriting of the Required property of the field specified by the Id property."
          },
          "kind": {
            "type": "string"
          }
        }
      },
      "FieldOverwriteSingleTagbox": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FieldOverwriteBase"
          },
          {
            "type": "object",
            "description": "Overwritten information for FieldSingleTagbox",
            "additionalProperties": false,
            "properties": {
              "filter": {
                "description": "An optional filter to limit the list items: this value will overwrite the existing Filter value specified in the parent schema  if\nOverwriteFilter is set to true.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/FilterBase"
                  }
                ]
              },
              "overwriteFilter": {
                "type": "boolean",
                "description": "Enable the overwriting of the Filter property of the field specified by the Id property."
              },
              "listItemCreateTemplate": {
                "type": "string",
                "description": "Json serialized template used for creating new list item: this value will overwrite the existing ListItemCreateTemplate value specified in the parent schema  if\nOverwriteListItemCreateTemplate is set to true.",
                "nullable": true
              },
              "overwriteListItemCreateTemplate": {
                "type": "boolean",
                "description": "Enable the overwriting of the ListItemCreateTemplate property of the field specified by the Id property."
              }
            }
          }
        ]
      },
      "FieldOverwriteMultiTagbox": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FieldOverwriteBase"
          },
          {
            "type": "object",
            "description": "Overwritten information for FieldMultiTagbox",
            "additionalProperties": false,
            "properties": {
              "filter": {
                "description": "An optional filter to limit the list items: this value will overwrite the existing Filter value specified in the parent schema if\nOverwriteFilter is set to true.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/FilterBase"
                  }
                ]
              },
              "overwriteFilter": {
                "type": "boolean",
                "description": "Enable the overwriting of the Filter property of the field specified by the Id property."
              },
              "listItemCreateTemplate": {
                "type": "string",
                "description": "Json serialized template used for creating new list item: this value will overwrite the existing ListItemCreateTemplate value specified in the parent schema if\nOverwriteListItemCreateTemplate is set to true.",
                "nullable": true
              },
              "overwriteListItemCreateTemplate": {
                "type": "boolean",
                "description": "Enable the overwriting of the ListItemCreateTemplate property of the field specified by the Id property."
              },
              "maximumItems": {
                "type": "integer",
                "description": "The maximum number of items that can be stored: this value will overwrite the existing MaximumItems value specified in the parent schema if\nOverwriteMaximumItems is set to true.",
                "format": "int32",
                "nullable": true
              },
              "overwriteMaximumItems": {
                "type": "boolean",
                "description": "Enable the overwriting of the MaximumItems property of the field specified by the Id property."
              },
              "minimumItems": {
                "type": "integer",
                "description": "The minimum number of items that must be stored: this value will overwrite the existing MinimumItems value specified in the parent schema if\nOverwriteMinimumItems is set to true.",
                "format": "int32",
                "nullable": true
              },
              "overwriteMinimumItems": {
                "type": "boolean",
                "description": "Enable the overwriting of the MinimumItems property of the field specified by the Id property."
              }
            }
          }
        ]
      },
      "SearchFieldCount": {
        "type": "object",
        "description": "Count information of fields in the search index for filtering, searching and sorting",
        "additionalProperties": false,
        "required": [
          "indexedField",
          "simpleSearchField",
          "sortableField"
        ],
        "properties": {
          "indexedField": {
            "type": "integer",
            "description": "The number of fields created in the search index to store filter information for a schema.",
            "format": "int32"
          },
          "simpleSearchField": {
            "type": "integer",
            "description": "The number of fields created in the search index to store search information for a schema.",
            "format": "int32"
          },
          "sortableField": {
            "type": "integer",
            "description": "The number of fields created in the search index to store sorting information for a schema.",
            "format": "int32"
          }
        }
      },
      "SchemaExistsResponse": {
        "type": "object",
        "description": "Exists response",
        "additionalProperties": false,
        "required": [
          "exists"
        ],
        "properties": {
          "exists": {
            "type": "boolean",
            "description": "It indicates if it exists."
          }
        }
      },
      "FieldExistsResponse": {
        "type": "object",
        "description": "Response for a query if a field exists",
        "additionalProperties": false,
        "required": [
          "exists",
          "previouslyUsed"
        ],
        "properties": {
          "exists": {
            "type": "boolean",
            "description": "Indicates if a field with the specified ID currently exists."
          },
          "previouslyUsed": {
            "type": "boolean",
            "description": "Indicates if a field with the specified ID was previously used.\nA field ID that was previously in use cannot be used again."
          },
          "schemaId": {
            "type": "string",
            "description": "If the field does already exist or has already existed, this will contain the ID\nof the schema containing it. It case of parent-child schemas, a field ID\nhas to be unique across the schema hierarchy.",
            "nullable": true
          }
        }
      },
      "SchemaUpdateResult": {
        "type": "object",
        "description": "Result of a schema update operation",
        "additionalProperties": false,
        "properties": {
          "schema": {
            "description": "The details of the updated schema.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/SchemaDetail"
              }
            ]
          }
        }
      },
      "SchemaUpdateRequest": {
        "type": "object",
        "description": "Request to update an existing schema",
        "additionalProperties": false,
        "required": [
          "viewForAll"
        ],
        "properties": {
          "names": {
            "description": "Language specific schema names.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/TranslatedStringDictionary"
              }
            ]
          },
          "descriptions": {
            "description": "Language specific schema descriptions.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/TranslatedStringDictionary"
              }
            ]
          },
          "displayPatterns": {
            "type": "array",
            "description": "Language specific DotLiquid templates. These templates will be resolved into display values in content documents and/or list items.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/DisplayPattern"
            }
          },
          "fields": {
            "type": "array",
            "description": "The schema fields.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/FieldBase"
            }
          },
          "fieldsOverwrite": {
            "type": "array",
            "description": "A list of schema fields overwrite information. It is used to overwrite the field configuration coming from the parent schema.\nOnly a subset of properties of a FieldSingleTagbox and FieldMultiTagbox can be be overwritten. All other properties and fields cannot.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/FieldOverwriteBase"
            }
          },
          "aggregations": {
            "type": "array",
            "description": "An optional list of aggregations to show grouped list item documents. When aggregations are defined for a List,\nthe UI uses such information to show the available filters and grouped results.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/AggregatorBase"
            }
          },
          "sort": {
            "type": "array",
            "description": "Sorts content documents and/or list items. In order for the sorting to work properly, the Sortable property of the related field\nmust be set to true. Multiple sorting is supported: they are applied in the specified order.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/SortInfo"
            }
          },
          "viewForAll": {
            "type": "boolean",
            "description": "Defines a schema as viewable by everyone. Everyone with ManageSchema user permission is able to see the schema."
          },
          "schemaPermissionSetIds": {
            "type": "array",
            "description": "An optional list of schema permission set IDs which control schema permissions.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "layerSchemaIds": {
            "type": "array",
            "description": "An optional list of schemas' IDs with type layer. For a Content schema it stores the layers that can be assigned to a content.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "referencedInContentSchemaIds": {
            "type": "array",
            "description": "If the schema if of type Layer, the list contains the schemas with type Content\nthat reference the layer.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "SchemaDeleteResult": {
        "type": "object",
        "description": "Result of a schema delete operation",
        "additionalProperties": false
      },
      "SchemaOwnershipTransferRequest": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "transferUserId": {
            "type": "string",
            "description": "The id of the user to whom the schema has to be transferred to.",
            "nullable": true
          }
        }
      },
      "SchemaCreateResult": {
        "type": "object",
        "description": "Result of a schema create operation",
        "additionalProperties": false,
        "properties": {
          "schema": {
            "description": "The details of the created schema.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/SchemaDetail"
              }
            ]
          }
        }
      },
      "SchemaCreateRequest": {
        "type": "object",
        "description": "Request to create a schema",
        "additionalProperties": false,
        "required": [
          "id",
          "displayPatterns",
          "viewForAll"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The schema ID. It can be a slug, but must be unique throughout the whole customer setup.",
            "minLength": 1
          },
          "parentSchemaId": {
            "type": "string",
            "description": "The parent schema ID.",
            "nullable": true
          },
          "types": {
            "type": "array",
            "description": "List of schema types. Currently only one schema type can be assigned to this list, and it cannot be modified once the schema is created.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/SchemaType"
            }
          },
          "names": {
            "description": "Language specific schema names.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/TranslatedStringDictionary"
              }
            ]
          },
          "descriptions": {
            "description": "Language specific schema descriptions.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/TranslatedStringDictionary"
              }
            ]
          },
          "displayPatterns": {
            "type": "array",
            "description": "Language specific DotLiquid templates. These templates will be resolved into display values in content documents and/or list items.",
            "items": {
              "$ref": "#/components/schemas/DisplayPattern"
            }
          },
          "fields": {
            "type": "array",
            "description": "The schema fields.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/FieldBase"
            }
          },
          "fieldsOverwrite": {
            "type": "array",
            "description": "A list of schema fields overwrite information. It is used to overwrite the field configuration coming from the parent schema.\nOnly a subset of properties of a FieldSingleTagbox and FieldMultiTagbox can be be overwritten. All other properties and fields cannot.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/FieldOverwriteBase"
            }
          },
          "aggregations": {
            "type": "array",
            "description": "An optional list of aggregations to show grouped list item documents. When aggregations are defined for a List,\nthe UI uses such information to show the available filters and grouped results.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/AggregatorBase"
            }
          },
          "sort": {
            "type": "array",
            "description": "Sorts content documents and/or list items. In order for the sorting to work properly, the Sortable property of the related field\nmust be set to true. Multiple sorting is supported: they are applied in the specified order.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/SortInfo"
            }
          },
          "viewForAll": {
            "type": "boolean",
            "description": "Defines a schema as viewable by everyone. Everyone with ManageSchema user permission is able to see the schema."
          },
          "schemaPermissionSetIds": {
            "type": "array",
            "description": "An optional list of schema permission set IDs which control schema permissions.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "layerSchemaIds": {
            "type": "array",
            "description": "An optional list of schemas' IDs with type layer. For a Content schema it stores the layers that can be assigned to a content.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "referencedInContentSchemaIds": {
            "type": "array",
            "description": "If the schema if of type Layer, the list contains the schemas with type Content\nthat reference the layer.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "SchemaCreateManyRequest": {
        "type": "object",
        "description": "Request to create multiple schemas",
        "additionalProperties": false,
        "required": [
          "schemas"
        ],
        "properties": {
          "schemas": {
            "type": "array",
            "description": "The schemas to create. Cyclic dependencies between schemas are supported, if they\nare all in the same request.",
            "items": {
              "$ref": "#/components/schemas/SchemaCreateRequest"
            }
          }
        }
      },
      "SchemaUpdateManyRequest": {
        "type": "object",
        "description": "Request to update multiple schemas",
        "additionalProperties": false,
        "required": [
          "schemas"
        ],
        "properties": {
          "schemas": {
            "type": "array",
            "description": "The schemas to update.",
            "items": {
              "$ref": "#/components/schemas/SchemaUpdateItem"
            }
          }
        }
      },
      "SchemaUpdateItem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SchemaUpdateRequest"
          },
          {
            "type": "object",
            "description": "Item to update a schema",
            "additionalProperties": false,
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "type": "string",
                "description": "Id of the schema to update",
                "minLength": 1
              }
            }
          }
        ]
      },
      "SchemaOwnershipTransferManyRequest": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "schemaIds": {
            "type": "array",
            "description": "The schema ids.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "transferUserId": {
            "type": "string",
            "description": "The id of user to whom the schemas have to be transferred to.",
            "nullable": true
          }
        }
      },
      "SchemaSearchResult": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SearchBehaviorBaseResultOfSchema"
          },
          {
            "type": "object",
            "description": "Result for schema search operation",
            "additionalProperties": false
          }
        ]
      },
      "SearchBehaviorBaseResultOfSchema": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResultOfSchema"
          },
          {
            "type": "object",
            "description": "Base class for search result queries that support SearchBehaviors",
            "additionalProperties": false,
            "properties": {
              "searchString": {
                "type": "string",
                "description": "The search string used to query the data.",
                "nullable": true
              },
              "isSearchStringRewritten": {
                "type": "boolean",
                "description": "Flag to notify if the SearchString was modified compared to the original requested one."
              },
              "queryDebugInformation": {
                "type": "array",
                "description": "Additional information regarding the query execution and reason of the matched documents. Multiple items are returned if multiple queries were performed.",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/QueryDebugInformation"
                }
              }
            }
          }
        ]
      },
      "BaseResultOfSchema": {
        "type": "object",
        "description": "Base class for search results",
        "additionalProperties": false,
        "required": [
          "results",
          "totalResults",
          "elapsedMilliseconds"
        ],
        "properties": {
          "totalResults": {
            "type": "integer",
            "description": "The total number of matching documents.",
            "format": "int64"
          },
          "results": {
            "type": "array",
            "description": "The matched documents.",
            "items": {
              "$ref": "#/components/schemas/Schema"
            }
          },
          "elapsedMilliseconds": {
            "type": "integer",
            "description": "The search execution time in milliseconds.",
            "format": "int64"
          },
          "pageToken": {
            "type": "string",
            "description": "An optional token to access the next page of results for those endpoints that support backend scrolling logic.",
            "nullable": true
          }
        }
      },
      "Schema": {
        "type": "object",
        "description": "A schema",
        "additionalProperties": false,
        "required": [
          "id",
          "fieldCount",
          "childCount",
          "level",
          "system"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The schema ID. It is unique throughout the whole customer setup.",
            "minLength": 1
          },
          "parentSchemaId": {
            "type": "string",
            "description": "The parent schema ID.",
            "nullable": true
          },
          "types": {
            "type": "array",
            "description": "List of schema types. Currently only one schema type can be assigned to this list, and it cannot be modified once the schema is created.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/SchemaType"
            }
          },
          "names": {
            "description": "Language specific schema names.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/TranslatedStringDictionary"
              }
            ]
          },
          "descriptions": {
            "description": "Language specific schema descriptions.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/TranslatedStringDictionary"
              }
            ]
          },
          "layerSchemaIds": {
            "type": "array",
            "description": "An optional list of schemas' IDs with type layer. For a Content schema it stores the layers that can be assigned to a content.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "fieldCount": {
            "type": "integer",
            "description": "The count of all fields.",
            "format": "int32"
          },
          "childCount": {
            "type": "integer",
            "description": "The count of all schema descendants with an immediate inheritance.",
            "format": "int32"
          },
          "level": {
            "type": "integer",
            "description": "The descendant depth of the schema.",
            "format": "int32"
          },
          "system": {
            "type": "boolean",
            "description": "Identifies a system provided schema. A system schema cannot be created, updated or deleted."
          }
        }
      },
      "SchemaSearchRequest": {
        "type": "object",
        "description": "Request to search schemas",
        "additionalProperties": false,
        "required": [
          "limit",
          "debugMode"
        ],
        "properties": {
          "searchString": {
            "type": "string",
            "description": "The string used to query the data. The Lucene query string syntax is supported.",
            "nullable": true
          },
          "searchBehaviors": {
            "type": "array",
            "description": "An optional list of search behaviors. All the passed behaviors will be applied in the specified order.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/SearchBehavior"
            }
          },
          "sort": {
            "type": "array",
            "description": "Sorts the search results. Currently only sorting on the Names property is allowed.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/SortInfo"
            }
          },
          "limit": {
            "type": "integer",
            "description": "Limits the number of the returned schemas. Defaults to 30.",
            "format": "int32",
            "default": 30
          },
          "pageToken": {
            "type": "string",
            "description": "The token used to retrieve the next page of results. It must be null on first request and only filled with the returned pageToken to request next page of results.",
            "nullable": true
          },
          "filter": {
            "description": "An optional filter to limit the schemas.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/FilterBase"
              }
            ]
          },
          "debugMode": {
            "type": "boolean",
            "description": "Enable debug mode: additional debug information regarding the query execution and reason of the matched documents are returned in the SchemaSearchResult.\nWarning! It severely affects performance.",
            "default": false
          },
          "searchLanguages": {
            "type": "array",
            "description": "When searching in multi language fields, limit the searchable fields to the ones corresponding to the specified languages.\nIf not specified, all metadata languages in the system are used.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "rightsFilter": {
            "type": "array",
            "description": "Limits the schemas to the ones the user has the specified MetadataRights.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/MetadataRight"
            }
          }
        }
      },
      "IndexField": {
        "type": "object",
        "description": "Contains compiled field information.",
        "additionalProperties": false,
        "required": [
          "boost",
          "ignoreForSearch"
        ],
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "fieldId": {
            "type": "string",
            "description": "The field id.",
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "The field's type name.",
            "nullable": true
          },
          "indexFields": {
            "type": "object",
            "description": "Contains all index field name variants of the field.",
            "nullable": true,
            "x-dictionaryKey": {
              "$ref": "#/components/schemas/Analyzer"
            },
            "additionalProperties": {
              "type": "string"
            }
          },
          "simpleSearchFields": {
            "type": "object",
            "description": "Contains all simple search field name variants of the field.\nThe amount of simple search fields can be equal or less to the amount of IndexFields, but never more.",
            "nullable": true,
            "x-dictionaryKey": {
              "$ref": "#/components/schemas/Analyzer"
            },
            "additionalProperties": {
              "type": "string"
            }
          },
          "boost": {
            "type": "number",
            "description": "Contains the fields boost value.",
            "format": "double"
          },
          "ignoreForSearch": {
            "type": "boolean",
            "description": "Not to be returned for search query, but only used for mapping purposes"
          },
          "nestedPath": {
            "type": "string",
            "description": "The path of the Nested document this property belongs to. If set to null, it means that there is no Nested document",
            "nullable": true
          },
          "sortField": {
            "type": "string",
            "description": "Path to the sorting information in the DataSortValuesField sort index.",
            "nullable": true
          }
        }
      },
      "IndexFieldsSearchBySchemaIdsRequest": {
        "type": "object",
        "description": "Request to search indexed fields of specific schemas",
        "additionalProperties": false,
        "required": [
          "searchMode"
        ],
        "properties": {
          "schemaIds": {
            "type": "array",
            "description": "The IDs of the schemas for which the indexed fields should be returned.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "searchMode": {
            "description": "Controls how the search works which schemas should be considered in the search.\nAllDescendantsFieldsOnRootSchema: All indexed fields from descendant schemas of root ones will be returned. Schemas that are not root schemas will be ignored.\nSchemaAndParentFieldsOnly: Indexed fields of the requested schema and its parents will be returned.",
            "default": "AllDescendantsFieldsOnRootSchema",
            "oneOf": [
              {
                "$ref": "#/components/schemas/IndexFieldsSearchMode"
              }
            ]
          }
        }
      },
      "IndexFieldsSearchMode": {
        "type": "string",
        "description": "How the index field search works",
        "x-enumNames": [
          "AllDescendantsFieldsOnRootSchema",
          "SchemaAndParentFieldsOnly"
        ],
        "enum": [
          "AllDescendantsFieldsOnRootSchema",
          "SchemaAndParentFieldsOnly"
        ]
      },
      "Transfer": {
        "type": "object",
        "description": "Represents a transfer.",
        "additionalProperties": false,
        "required": [
          "id",
          "name",
          "state",
          "transferType",
          "fileTransferCount"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of transfer.",
            "minLength": 1
          },
          "name": {
            "type": "string",
            "description": "Name of transfer.",
            "minLength": 1
          },
          "state": {
            "description": "State of transfer.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/TransferState"
              }
            ]
          },
          "transferType": {
            "description": "Type of transfer.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/TransferType"
              }
            ]
          },
          "businessProcessId": {
            "type": "string",
            "description": "Associated business process ID.",
            "nullable": true
          },
          "fileTransferCount": {
            "type": "integer",
            "description": "Number of files in transfer.",
            "format": "int64"
          },
          "collectionId": {
            "type": "string",
            "description": "ID of collection created from transfer.",
            "nullable": true
          }
        }
      },
      "TransferState": {
        "type": "string",
        "description": "Transfer states",
        "x-enumNames": [
          "Draft",
          "UploadInProgress",
          "UploadCompleted",
          "ImportInProgress",
          "ImportCompleted",
          "UploadCancelled",
          "ImportCancelled",
          "ImportFailed",
          "Created",
          "Deleted",
          "TransferReady",
          "FileDeleteInProgress",
          "TransferCleanup",
          "ImportCompletedWithErrors",
          "UploadCompletedWithErrors",
          "UploadCancellationInProgress",
          "ImportDone"
        ],
        "enum": [
          "Draft",
          "UploadInProgress",
          "UploadCompleted",
          "ImportInProgress",
          "ImportCompleted",
          "UploadCancelled",
          "ImportCancelled",
          "ImportFailed",
          "Created",
          "Deleted",
          "TransferReady",
          "FileDeleteInProgress",
          "TransferCleanup",
          "ImportCompletedWithErrors",
          "UploadCompletedWithErrors",
          "UploadCancellationInProgress",
          "ImportDone"
        ]
      },
      "SchemaImportRequest": {
        "type": "object",
        "description": "Request to import schemas and list items",
        "additionalProperties": false,
        "required": [
          "fileTransferId",
          "allowMissingDependencies",
          "importListItems"
        ],
        "properties": {
          "fileTransferId": {
            "type": "string",
            "description": "ID of the file transfer identifying the file previously uploaded.",
            "minLength": 1
          },
          "allowMissingDependencies": {
            "type": "boolean",
            "description": "Allow creating list items that refer to list items or contents that don't exist in the system."
          },
          "importListItems": {
            "type": "boolean",
            "description": "Import the list items belonging to the schema."
          }
        }
      },
      "ShareDetail": {
        "type": "object",
        "description": "Share detail",
        "additionalProperties": false,
        "required": [
          "id",
          "name",
          "creator",
          "audit",
          "contentSelections",
          "expired",
          "outputAccess",
          "shareType"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Share ID.",
            "minLength": 1
          },
          "name": {
            "type": "string",
            "description": "Name of share.",
            "minLength": 1
          },
          "description": {
            "type": "string",
            "description": "Description of share entered by user.",
            "nullable": true
          },
          "creator": {
            "description": "Creator of share.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ShareUser"
              }
            ]
          },
          "audit": {
            "description": "Audit information.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserAudit"
              }
            ]
          },
          "contentSelections": {
            "type": "array",
            "description": "Detailed information about contents in the share.",
            "items": {
              "$ref": "#/components/schemas/ShareContentDetail"
            }
          },
          "layerSchemaIds": {
            "type": "array",
            "description": "List of shared layers.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "data": {
            "description": "Detail of share.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ShareDataBase"
              }
            ]
          },
          "expirationDate": {
            "type": "string",
            "description": "Date when share expires and cannot be accessed anymore.",
            "format": "date-time",
            "nullable": true
          },
          "expired": {
            "type": "boolean",
            "description": "Info if share is already expired."
          },
          "outputAccess": {
            "description": "Defined access for contents in share.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/OutputAccess"
              }
            ]
          },
          "shareType": {
            "description": "Type of share.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ShareType"
              }
            ]
          },
          "schemas": {
            "type": "array",
            "description": "Schema detail of the content and the layers.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/SchemaDetail"
            }
          }
        }
      },
      "ShareUser": {
        "type": "object",
        "description": "Reduced set of user information used for shares",
        "additionalProperties": false,
        "required": [
          "displayName",
          "emailHash"
        ],
        "properties": {
          "displayName": {
            "type": "string",
            "description": "Name of user",
            "minLength": 1
          },
          "emailHash": {
            "type": "string",
            "description": "MD5 hash of email address. Can be used to display gravatar image",
            "minLength": 1
          }
        }
      },
      "ShareContentDetail": {
        "type": "object",
        "description": "Detail of shared content",
        "additionalProperties": false,
        "required": [
          "contentSchemaId",
          "content",
          "id",
          "outputs",
          "contentType",
          "displayValues"
        ],
        "properties": {
          "contentSchemaId": {
            "type": "string",
            "description": "The id of the schema with schema type content.",
            "minLength": 1
          },
          "layerSchemaIds": {
            "type": "array",
            "description": "An optional id list of schemas with type layer.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "content": {
            "type": "object",
            "description": "The content data. It's an object of dynamic metadata whose structure is defined in the Content schema specified\nby the ContentSchemaId property."
          },
          "metadata": {
            "type": "object",
            "description": "The metadata belonging to the layers of the content. It's a dictionary of dynamic metadata whose structure is defined in the Layer schemas identified\nby the LayerSchemaIds property.",
            "nullable": true,
            "additionalProperties": {}
          },
          "id": {
            "type": "string",
            "description": "Content ID.",
            "minLength": 1
          },
          "outputs": {
            "type": "array",
            "description": "List of shared outputs for this content.",
            "items": {
              "$ref": "#/components/schemas/ShareOutputBase"
            }
          },
          "contentType": {
            "description": "The type of content",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ContentType"
              }
            ]
          },
          "displayValues": {
            "description": "Contains language specific display values, rendered according to the content schema's display pattern configuration.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/DisplayValueDictionary"
              }
            ]
          },
          "iconUrl": {
            "type": "string",
            "description": "Contains an URL that can be used to retrieve the icon corresponding to the file type.",
            "nullable": true
          }
        }
      },
      "ShareOutputBase": {
        "type": "object",
        "discriminator": {
          "propertyName": "kind",
          "mapping": {
            "ShareOutputBasic": "#/components/schemas/ShareOutputBasic",
            "ShareOutputEmbed": "#/components/schemas/ShareOutputEmbed"
          }
        },
        "description": "Base of shared output",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "contentId",
          "outputFormatId",
          "dynamicRendering",
          "kind"
        ],
        "properties": {
          "contentId": {
            "type": "string",
            "description": "Content ID.",
            "minLength": 1
          },
          "outputFormatId": {
            "type": "string",
            "description": "Output format ID.",
            "minLength": 1
          },
          "viewUrl": {
            "type": "string",
            "description": "Url to directly view output. In case of BasicShare if not fetched using a token, a placeholder {token} is included which needs to be replaced with the recipient's token",
            "nullable": true
          },
          "downloadUrl": {
            "type": "string",
            "description": "Url to directly download output. In case of BasicShare if not fetched using a token, a placeholder {token} is included which needs to be replaced with the recipient's token",
            "nullable": true
          },
          "detail": {
            "description": "Output details.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/OutputDataBase"
              }
            ]
          },
          "dynamicRendering": {
            "type": "boolean",
            "description": "Whether this Output belongs to a dynamic OutputFormat"
          },
          "kind": {
            "type": "string"
          }
        }
      },
      "ShareOutputBasic": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ShareOutputBase"
          },
          {
            "type": "object",
            "description": "Shared output for basic share",
            "additionalProperties": false
          }
        ]
      },
      "ShareOutputEmbed": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ShareOutputBase"
          },
          {
            "type": "object",
            "description": "Shared output for embed share",
            "additionalProperties": false,
            "properties": {
              "token": {
                "type": "string",
                "description": "Share token for the shared output.",
                "nullable": true
              }
            }
          }
        ]
      },
      "ShareDataBase": {
        "type": "object",
        "discriminator": {
          "propertyName": "kind",
          "mapping": {
            "ShareDataEmbed": "#/components/schemas/ShareDataEmbed",
            "ShareDataBasic": "#/components/schemas/ShareDataBasic"
          }
        },
        "description": "Base of share data",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "url",
          "kind"
        ],
        "properties": {
          "url": {
            "type": "string",
            "description": "The URL to access the share.",
            "minLength": 1
          },
          "kind": {
            "type": "string"
          }
        }
      },
      "ShareDataEmbed": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ShareDataBase"
          },
          {
            "type": "object",
            "description": "Embed share data",
            "additionalProperties": false,
            "required": [
              "token"
            ],
            "properties": {
              "token": {
                "type": "string",
                "description": "Token for the embed share.",
                "minLength": 1
              }
            }
          }
        ]
      },
      "ShareDataBasic": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ShareDataBase"
          },
          {
            "type": "object",
            "description": "Basic share data",
            "additionalProperties": false,
            "required": [
              "mailRecipients",
              "internalRecipients"
            ],
            "properties": {
              "mailRecipients": {
                "type": "array",
                "description": "List of recipients added using email address",
                "items": {
                  "$ref": "#/components/schemas/MailRecipient"
                }
              },
              "internalRecipients": {
                "type": "array",
                "description": "List of recipients that exist in Picturepark.",
                "items": {
                  "$ref": "#/components/schemas/InternalRecipient"
                }
              },
              "languageCode": {
                "type": "string",
                "description": "Language of share.",
                "nullable": true
              }
            }
          }
        ]
      },
      "MailRecipient": {
        "type": "object",
        "description": "Share mail recipient",
        "additionalProperties": false,
        "required": [
          "userEmail"
        ],
        "properties": {
          "userEmail": {
            "description": "User information including email.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserEmail"
              }
            ]
          },
          "token": {
            "type": "string",
            "description": "Recipient specific token.",
            "nullable": true
          },
          "url": {
            "type": "string",
            "description": "URL to access the share for this recipient.",
            "nullable": true
          }
        }
      },
      "UserEmail": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "emailAddress"
        ],
        "properties": {
          "firstName": {
            "type": "string",
            "description": "First name.",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "description": "Last name.",
            "nullable": true
          },
          "emailAddress": {
            "type": "string",
            "description": "Email address",
            "minLength": 1
          }
        }
      },
      "InternalRecipient": {
        "type": "object",
        "description": "Internal share recipient",
        "additionalProperties": false,
        "required": [
          "recipient"
        ],
        "properties": {
          "recipient": {
            "description": "User information of recipient.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/User"
              }
            ]
          },
          "token": {
            "type": "string",
            "description": "Recipient specific token.",
            "nullable": true
          },
          "url": {
            "type": "string",
            "description": "URL to access the share for this recipient.",
            "nullable": true
          }
        }
      },
      "OutputAccess": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Full",
          "Preview",
          "None"
        ],
        "enum": [
          "Full",
          "Preview",
          "None"
        ]
      },
      "ShareResolveBehavior": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Schemas"
        ],
        "enum": [
          "Schemas"
        ]
      },
      "ShareBaseUpdateRequest": {
        "type": "object",
        "discriminator": {
          "propertyName": "kind",
          "mapping": {
            "ShareBasicUpdateRequest": "#/components/schemas/ShareBasicUpdateRequest",
            "ShareEmbedUpdateRequest": "#/components/schemas/ShareEmbedUpdateRequest"
          }
        },
        "description": "Base of update request for share",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "name",
          "contents",
          "outputAccess",
          "kind"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of share.",
            "minLength": 1
          },
          "expirationDate": {
            "type": "string",
            "description": "Optional date when share expires and cannot be accessed anymore.",
            "format": "date-time",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Optional description of share.",
            "nullable": true
          },
          "contents": {
            "type": "array",
            "description": "List of contents including outputs. Existing items needs to be sent again, otherwise they will be removed.",
            "items": {
              "$ref": "#/components/schemas/ShareContent"
            }
          },
          "layerSchemaIds": {
            "type": "array",
            "description": "List of content layers to share.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "outputAccess": {
            "description": "Access for content outputs in share.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/OutputAccess"
              }
            ]
          },
          "kind": {
            "type": "string"
          }
        }
      },
      "ShareContent": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "contentId"
        ],
        "properties": {
          "contentId": {
            "type": "string",
            "description": "Content ID to share.",
            "minLength": 1
          },
          "outputFormatIds": {
            "type": "array",
            "description": "List of output formats for this content to share. If not specified outer OutputAccess is used.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ShareBasicUpdateRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ShareBaseUpdateRequest"
          },
          {
            "type": "object",
            "description": "Update request for basic share",
            "additionalProperties": false
          }
        ]
      },
      "ShareEmbedUpdateRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ShareBaseUpdateRequest"
          },
          {
            "type": "object",
            "description": "Update request for embed share",
            "additionalProperties": false
          }
        ]
      },
      "ShareBaseCreateRequest": {
        "type": "object",
        "discriminator": {
          "propertyName": "kind",
          "mapping": {
            "ShareBasicCreateRequest": "#/components/schemas/ShareBasicCreateRequest",
            "ShareEmbedCreateRequest": "#/components/schemas/ShareEmbedCreateRequest"
          }
        },
        "description": "Base create request for share",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "name",
          "contents",
          "outputAccess",
          "kind"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of share.",
            "minLength": 1
          },
          "description": {
            "type": "string",
            "description": "Optional description of share.",
            "nullable": true
          },
          "expirationDate": {
            "type": "string",
            "description": "Optional date when share expires and cannot be accessed anymore.",
            "format": "date-time",
            "nullable": true
          },
          "contents": {
            "type": "array",
            "description": "List of contents including outputs to share.",
            "items": {
              "$ref": "#/components/schemas/ShareContent"
            }
          },
          "layerSchemaIds": {
            "type": "array",
            "description": "List of content layers to share.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "outputAccess": {
            "description": "Access for content outputs in share.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/OutputAccess"
              }
            ]
          },
          "kind": {
            "type": "string"
          }
        }
      },
      "ShareBasicCreateRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ShareBaseCreateRequest"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "languageCode"
            ],
            "properties": {
              "recipientEmails": {
                "type": "array",
                "description": "List of external mail recipients which are no Picturepark users.",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/UserEmail"
                }
              },
              "languageCode": {
                "type": "string",
                "description": "System language used for share (mail and detail page). en or de.",
                "minLength": 1
              },
              "suppressNotifications": {
                "type": "boolean",
                "description": "Set to true to disable the creation of notifications and emails to recipients."
              }
            }
          }
        ]
      },
      "ShareEmbedCreateRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ShareBaseCreateRequest"
          },
          {
            "type": "object",
            "description": "Create request for embed share",
            "additionalProperties": false
          }
        ]
      },
      "ShareDeleteManyRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "ids"
        ],
        "properties": {
          "ids": {
            "type": "array",
            "description": "IDs of shares to delete.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ShareRevokeManyRequest": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "ids": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ShareAggregationRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ShareSearchAndAggregationBaseRequest"
          },
          {
            "type": "object",
            "description": "Request to aggregate shares based on the specified aggregators",
            "additionalProperties": false,
            "required": [
              "aggregators"
            ],
            "properties": {
              "aggregators": {
                "type": "array",
                "description": "List of aggregators that defines how the items should be aggregated.",
                "items": {
                  "$ref": "#/components/schemas/AggregatorBase"
                }
              }
            }
          }
        ]
      },
      "ShareSearchAndAggregationBaseRequest": {
        "type": "object",
        "description": "Request to aggregate shares based on the specified aggregators",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "searchString": {
            "type": "string",
            "description": "Limits the search by using a query string filter. The Lucene query string syntax is supported.",
            "nullable": true
          },
          "searchBehaviors": {
            "type": "array",
            "description": "An optional list of search behaviors. All the passed behaviors will be applied.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/SearchBehavior"
            }
          },
          "filter": {
            "description": "An optional search filter. Limits the document result set.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/FilterBase"
              }
            ]
          },
          "aggregationFilters": {
            "type": "array",
            "description": "Special filters used to filter down independently the aggregations' values and the search results on specific conditions.\nFor the search results, the aggregation filters are used to create a Filter that is put in AND with the eventual existing Filter of the search request to nail down the search results. The filters generated\nby the aggregation filters are put in OR each other if they have the same AggregationName, and then such groups are put in AND.\nFor the aggregation values, only the original Filter of the search request is used to nail down the data to be considered for the aggregations. Then, on top of that, for each aggregator in the search request, a Filter is created to filter down the\naggregation results of that aggregation: depending if the AggregationName of the AggregationFilter matches the AggregationName of the Aggregator, the filter is put in OR (if it matches) or in AND (if it does not match it).\nMoreover, an AggregationFilter ensures that the related value is returned in the AggregationResults also if the top aggregation values returned by default do not contain it.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/AggregationFilter"
            }
          }
        }
      },
      "ShareSearchResult": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SearchBehaviorWithAggregationBaseResultOfShare"
          },
          {
            "type": "object",
            "description": "Result for share search operation",
            "additionalProperties": false
          }
        ]
      },
      "SearchBehaviorWithAggregationBaseResultOfShare": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SearchBehaviorBaseResultOfShare"
          },
          {
            "type": "object",
            "description": "Base class for search result queries that support SearchBehaviors",
            "additionalProperties": false,
            "properties": {
              "aggregationResults": {
                "type": "array",
                "description": "Results of the aggregation, if any aggregators was passed in the request.",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/AggregationResult"
                }
              }
            }
          }
        ]
      },
      "SearchBehaviorBaseResultOfShare": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResultOfShare"
          },
          {
            "type": "object",
            "description": "Base class for search result queries that support SearchBehaviors",
            "additionalProperties": false,
            "properties": {
              "searchString": {
                "type": "string",
                "description": "The search string used to query the data.",
                "nullable": true
              },
              "isSearchStringRewritten": {
                "type": "boolean",
                "description": "Flag to notify if the SearchString was modified compared to the original requested one."
              },
              "queryDebugInformation": {
                "type": "array",
                "description": "Additional information regarding the query execution and reason of the matched documents. Multiple items are returned if multiple queries were performed.",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/QueryDebugInformation"
                }
              }
            }
          }
        ]
      },
      "BaseResultOfShare": {
        "type": "object",
        "description": "Base class for search results",
        "additionalProperties": false,
        "required": [
          "results",
          "totalResults",
          "elapsedMilliseconds"
        ],
        "properties": {
          "totalResults": {
            "type": "integer",
            "description": "The total number of matching documents.",
            "format": "int64"
          },
          "results": {
            "type": "array",
            "description": "The matched documents.",
            "items": {
              "$ref": "#/components/schemas/Share"
            }
          },
          "elapsedMilliseconds": {
            "type": "integer",
            "description": "The search execution time in milliseconds.",
            "format": "int64"
          },
          "pageToken": {
            "type": "string",
            "description": "An optional token to access the next page of results for those endpoints that support backend scrolling logic.",
            "nullable": true
          }
        }
      },
      "Share": {
        "type": "object",
        "description": "Share",
        "additionalProperties": false,
        "required": [
          "id",
          "contentIds",
          "audit",
          "shareType",
          "isReadOnly"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Share ID.",
            "minLength": 1
          },
          "name": {
            "type": "string",
            "description": "Name of share.",
            "nullable": true
          },
          "contentIds": {
            "type": "array",
            "description": "List of shared content IDs.",
            "items": {
              "type": "string"
            }
          },
          "audit": {
            "description": "Audit information.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserAudit"
              }
            ]
          },
          "expirationDate": {
            "type": "string",
            "description": "Date when share expires and cannot be accessed anymore.",
            "format": "date-time",
            "nullable": true
          },
          "shareType": {
            "description": "Type of share.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ShareType"
              }
            ]
          },
          "isReadOnly": {
            "type": "boolean",
            "description": "Share is readonly if the current user is not the creator but only the recipient."
          }
        }
      },
      "ShareSearchRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ShareSearchAndAggregationBaseRequest"
          },
          {
            "type": "object",
            "description": "Request to search shares",
            "additionalProperties": false,
            "properties": {
              "limit": {
                "type": "integer",
                "description": "Limits the document count of the result set.",
                "format": "int32",
                "default": 30
              },
              "sort": {
                "type": "array",
                "description": "Fields and respective directions requested to sort the search results. Sorting on a not indexed field will throw an exception.",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/SortInfo"
                }
              },
              "pageToken": {
                "type": "string",
                "description": "The token used to retrieve the next page of results. It must be null on first request and only filled with the returned pageToken to request next page of results.",
                "nullable": true
              },
              "debugMode": {
                "type": "boolean",
                "description": "Enable debug mode to get as result of the Searched additional debug information. Warning! It severely affects performance.",
                "default": false
              },
              "aggregators": {
                "type": "array",
                "description": "List of aggregators that defines how the items should be aggregated.",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/AggregatorBase"
                }
              }
            }
          }
        ]
      },
      "CreateTransferRequest": {
        "type": "object",
        "description": "Creates a transfer.",
        "additionalProperties": false,
        "required": [
          "name",
          "transferType",
          "createCollection"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of transfer.",
            "minLength": 1
          },
          "transferType": {
            "description": "Type of transfer.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/TransferType"
              }
            ]
          },
          "files": {
            "type": "array",
            "description": "Files uploaded in transfer.\nThe client is responsible for uploading files to backend.\nRequired when TransferType is FileUpload or FileUploadAutoImport.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/TransferUploadFile"
            }
          },
          "webLinks": {
            "type": "array",
            "description": "Weblinks downloaded in transfer.\nThe backend will download files using HTTP, therefore public access to files is needed.\nRequired when TransferType is WebDownload.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/TransferWebLink"
            }
          },
          "collectionName": {
            "type": "string",
            "description": "Name of collection created after transfer.",
            "nullable": true
          },
          "createCollection": {
            "type": "boolean",
            "description": "A value indicating whether to create a collection after importing the transfer."
          }
        }
      },
      "TransferUploadFile": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TransferFile"
          },
          {
            "type": "object",
            "description": "Represents a file being uploaded in a transfer.",
            "additionalProperties": false,
            "required": [
              "fileName"
            ],
            "properties": {
              "fileName": {
                "type": "string",
                "description": "Target filename of file.",
                "minLength": 1
              }
            }
          }
        ]
      },
      "TransferFile": {
        "type": "object",
        "description": "Represents the base class for transfer items.",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "identifier": {
            "type": "string",
            "description": "Replaced in favor of RequestId. Client generated identifier of the item.",
            "deprecated": true,
            "x-deprecatedMessage": "Replaced by RequestId",
            "nullable": true
          },
          "requestId": {
            "type": "string",
            "description": "Client generated identifier of the item.",
            "nullable": true
          }
        }
      },
      "TransferWebLink": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TransferFile"
          },
          {
            "type": "object",
            "description": "Represents an item being downloaded by URL in a transfer.",
            "additionalProperties": false,
            "required": [
              "url"
            ],
            "properties": {
              "url": {
                "type": "string",
                "description": "URL of the item.",
                "minLength": 1
              },
              "fileName": {
                "type": "string",
                "description": "Optional target filename of the file.",
                "nullable": true
              }
            }
          }
        ]
      },
      "TransferDetail": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Transfer"
          },
          {
            "type": "object",
            "description": "Represents a transfer and includes detailed information.",
            "additionalProperties": false,
            "required": [
              "audit"
            ],
            "properties": {
              "audit": {
                "description": "Audit information.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/UserAudit"
                  }
                ]
              },
              "itemProgress": {
                "type": "integer",
                "description": "Number of items processed.",
                "format": "int64"
              },
              "itemCount": {
                "type": "integer",
                "description": "Total number of items.",
                "format": "int64"
              },
              "fileUploadInProgressCount": {
                "type": "integer",
                "description": "Number of items currently being uploaded.",
                "format": "int64"
              },
              "dataExtractionInProgressCount": {
                "type": "integer",
                "description": "Number of items currently being processed in data extraction.",
                "format": "int64"
              },
              "itemsFailed": {
                "type": "integer",
                "description": "Number of items failed.",
                "format": "int64"
              },
              "itemsCancelled": {
                "type": "integer",
                "description": "Number of items cancelled.",
                "format": "int64"
              },
              "lastDataExtractionProgressTimeStamp": {
                "type": "string",
                "description": "Time stamp of last progress update from data extraction.",
                "format": "date-time",
                "nullable": true
              },
              "lastFileUploadProgressTimeStamp": {
                "type": "string",
                "description": "Time stamp of last progress update from upload.",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ]
      },
      "ImportTransferRequest": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "layerSchemaIds": {
            "type": "array",
            "description": "An optional id list of schemas with type layer.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "metadata": {
            "type": "object",
            "description": "The metadata to be assigned to the imported content. It's a dictionary of dynamic metadata whose structure is defined in the Layer schemas identified\nby the LayerSchemaIds property.",
            "nullable": true,
            "additionalProperties": {}
          },
          "contentPermissionSetIds": {
            "type": "array",
            "description": "An optional id list of content permission sets. Controls content accessibility outside of content ownership.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ImportTransferPartialRequest": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "items": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/FileTransferCreateItem"
            }
          }
        }
      },
      "FileTransferCreateItem": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "fileId"
        ],
        "properties": {
          "fileId": {
            "type": "string",
            "minLength": 1
          },
          "layerSchemaIds": {
            "type": "array",
            "description": "An optional id list of schemas with type layer.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "metadata": {
            "type": "object",
            "description": "The metadata to be assigned to the imported content. It's a dictionary of dynamic metadata whose structure is defined in the Layer schemas identified\nby the LayerSchemaIds property.",
            "nullable": true,
            "additionalProperties": {}
          },
          "contentPermissionSetIds": {
            "type": "array",
            "description": "An optional id list of content permission sets. Controls content accessibility outside of content ownership.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "TransferSearchResult": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SearchBehaviorBaseResultOfTransfer"
          },
          {
            "type": "object",
            "description": "Result from a search for transfers.",
            "additionalProperties": false
          }
        ]
      },
      "SearchBehaviorBaseResultOfTransfer": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResultOfTransfer"
          },
          {
            "type": "object",
            "description": "Base class for search result queries that support SearchBehaviors",
            "additionalProperties": false,
            "properties": {
              "searchString": {
                "type": "string",
                "description": "The search string used to query the data.",
                "nullable": true
              },
              "isSearchStringRewritten": {
                "type": "boolean",
                "description": "Flag to notify if the SearchString was modified compared to the original requested one."
              },
              "queryDebugInformation": {
                "type": "array",
                "description": "Additional information regarding the query execution and reason of the matched documents. Multiple items are returned if multiple queries were performed.",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/QueryDebugInformation"
                }
              }
            }
          }
        ]
      },
      "BaseResultOfTransfer": {
        "type": "object",
        "description": "Base class for search results",
        "additionalProperties": false,
        "required": [
          "results",
          "totalResults",
          "elapsedMilliseconds"
        ],
        "properties": {
          "totalResults": {
            "type": "integer",
            "description": "The total number of matching documents.",
            "format": "int64"
          },
          "results": {
            "type": "array",
            "description": "The matched documents.",
            "items": {
              "$ref": "#/components/schemas/Transfer"
            }
          },
          "elapsedMilliseconds": {
            "type": "integer",
            "description": "The search execution time in milliseconds.",
            "format": "int64"
          },
          "pageToken": {
            "type": "string",
            "description": "An optional token to access the next page of results for those endpoints that support backend scrolling logic.",
            "nullable": true
          }
        }
      },
      "TransferSearchRequest": {
        "type": "object",
        "description": "Request to search for transfers.",
        "additionalProperties": false,
        "required": [
          "limit",
          "debugMode"
        ],
        "properties": {
          "searchString": {
            "type": "string",
            "description": "Limits the search by using a query string filter. The Lucene query string syntax is supported.",
            "nullable": true
          },
          "searchBehaviors": {
            "type": "array",
            "description": "An optional list of search behaviors. All the passed behaviors will be applied.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/SearchBehavior"
            }
          },
          "limit": {
            "type": "integer",
            "description": "Limits the document count of the result set.",
            "format": "int32",
            "default": 30
          },
          "pageToken": {
            "type": "string",
            "description": "The token used to retrieve the next page of results. It must be null on first request and only filled with the returned pageToken to request next page of results.",
            "nullable": true
          },
          "filter": {
            "description": "An optional search filter. Limits the document result set.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/FilterBase"
              }
            ]
          },
          "debugMode": {
            "type": "boolean",
            "description": "Enable debug mode: additional debug information regarding the query execution and reason of the matched documents are returned in the TransferSearchResult.\nWarning! It severely affects performance.",
            "default": false
          }
        }
      },
      "FileTransferDetail": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FileTransfer"
          },
          {
            "type": "object",
            "description": "Detailed representation of file transfer.",
            "additionalProperties": false,
            "required": [
              "audit"
            ],
            "properties": {
              "audit": {
                "description": "Audit information.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/UserAudit"
                  }
                ]
              },
              "fileMetadata": {
                "description": "Metadata extracted for file.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/FileMetadata"
                  }
                ]
              },
              "outputItems": {
                "type": "array",
                "description": "Outputs rendered during data extraction phase.",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/FileTransferOutput"
                }
              }
            }
          }
        ]
      },
      "FileMetadata": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "names": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/TranslatedStringDictionary"
              }
            ]
          },
          "descriptions": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/TranslatedStringDictionary"
              }
            ]
          },
          "fileExtension": {
            "type": "string",
            "nullable": true
          },
          "fileName": {
            "type": "string",
            "nullable": true
          },
          "filePath": {
            "type": "string",
            "nullable": true
          },
          "fileSizeInBytes": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "sha1Hash": {
            "type": "string",
            "nullable": true
          },
          "xmpMetadata": {
            "nullable": true
          },
          "exifMetadata": {
            "nullable": true
          },
          "language": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "FileTransferOutput": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "outputSource"
        ],
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "filePath": {
            "type": "string",
            "nullable": true
          },
          "outputSource": {
            "$ref": "#/components/schemas/OutputSource"
          }
        }
      },
      "OutputSource": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Rendered",
          "Embedded"
        ],
        "enum": [
          "Rendered",
          "Embedded"
        ]
      },
      "FileTransfer": {
        "type": "object",
        "description": "Representation of a file transfer.",
        "additionalProperties": false,
        "required": [
          "id",
          "name",
          "requestId",
          "transferId",
          "state"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of file transfer.",
            "minLength": 1
          },
          "name": {
            "type": "string",
            "description": "Name of file transfer.",
            "minLength": 1
          },
          "identifier": {
            "type": "string",
            "description": "Replaced in favor of RequestId. Client provided identifier.",
            "deprecated": true,
            "x-deprecatedMessage": "Replaced by RequestId",
            "nullable": true
          },
          "requestId": {
            "type": "string",
            "description": "Client provided identifier.",
            "minLength": 1
          },
          "transferId": {
            "type": "string",
            "description": "ID of transfer.",
            "minLength": 1
          },
          "state": {
            "description": "State of file transfer.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/FileTransferState"
              }
            ]
          },
          "contentId": {
            "type": "string",
            "description": "ID of Content created for file.",
            "nullable": true
          }
        }
      },
      "FileTransferState": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Draft",
          "UploadInProgress",
          "UploadCompleted",
          "DataExtractionInProgress",
          "DataExtractionDone",
          "ImportInProgress",
          "ImportCompleted",
          "UploadCancelled",
          "ImportCancelled",
          "UploadFailed",
          "ImportFailed",
          "DeleteInProgress",
          "Deleted",
          "CleanupInProgress",
          "CleanupCompleted"
        ],
        "enum": [
          "Draft",
          "UploadInProgress",
          "UploadCompleted",
          "DataExtractionInProgress",
          "DataExtractionDone",
          "ImportInProgress",
          "ImportCompleted",
          "UploadCancelled",
          "ImportCancelled",
          "UploadFailed",
          "ImportFailed",
          "DeleteInProgress",
          "Deleted",
          "CleanupInProgress",
          "CleanupCompleted"
        ]
      },
      "FileTransferSearchResult": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SearchBehaviorBaseResultOfFileTransfer"
          },
          {
            "type": "object",
            "description": "Result from a search for file transfers.",
            "additionalProperties": false
          }
        ]
      },
      "SearchBehaviorBaseResultOfFileTransfer": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResultOfFileTransfer"
          },
          {
            "type": "object",
            "description": "Base class for search result queries that support SearchBehaviors",
            "additionalProperties": false,
            "properties": {
              "searchString": {
                "type": "string",
                "description": "The search string used to query the data.",
                "nullable": true
              },
              "isSearchStringRewritten": {
                "type": "boolean",
                "description": "Flag to notify if the SearchString was modified compared to the original requested one."
              },
              "queryDebugInformation": {
                "type": "array",
                "description": "Additional information regarding the query execution and reason of the matched documents. Multiple items are returned if multiple queries were performed.",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/QueryDebugInformation"
                }
              }
            }
          }
        ]
      },
      "BaseResultOfFileTransfer": {
        "type": "object",
        "description": "Base class for search results",
        "additionalProperties": false,
        "required": [
          "results",
          "totalResults",
          "elapsedMilliseconds"
        ],
        "properties": {
          "totalResults": {
            "type": "integer",
            "description": "The total number of matching documents.",
            "format": "int64"
          },
          "results": {
            "type": "array",
            "description": "The matched documents.",
            "items": {
              "$ref": "#/components/schemas/FileTransfer"
            }
          },
          "elapsedMilliseconds": {
            "type": "integer",
            "description": "The search execution time in milliseconds.",
            "format": "int64"
          },
          "pageToken": {
            "type": "string",
            "description": "An optional token to access the next page of results for those endpoints that support backend scrolling logic.",
            "nullable": true
          }
        }
      },
      "FileTransferSearchRequest": {
        "type": "object",
        "description": "Request to search for file transfers.",
        "additionalProperties": false,
        "required": [
          "limit"
        ],
        "properties": {
          "searchString": {
            "type": "string",
            "description": "Limits the search by using a query string filter. The Lucene query string syntax is supported.",
            "nullable": true
          },
          "searchBehaviors": {
            "type": "array",
            "description": "An optional list of search behaviors. All the passed behaviors will be applied.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/SearchBehavior"
            }
          },
          "limit": {
            "type": "integer",
            "description": "Limits the document count of the result set.",
            "format": "int32",
            "default": 30
          },
          "pageToken": {
            "type": "string",
            "description": "The token used to retrieve the next page of results. It must be null on first request and only filled with the returned pageToken to request next page of results.",
            "nullable": true
          },
          "filter": {
            "description": "An optional search filter. Limits the document result set.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/FilterBase"
              }
            ]
          }
        }
      },
      "FileTransferDeleteRequest": {
        "type": "object",
        "description": "Deletes files from transfer.",
        "additionalProperties": false,
        "required": [
          "transferId",
          "fileTransferIds"
        ],
        "properties": {
          "transferId": {
            "type": "string",
            "description": "ID of transfer.",
            "minLength": 1
          },
          "fileTransferIds": {
            "type": "array",
            "description": "List of IDs of file transfers to delete.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Blacklist": {
        "type": "object",
        "description": "Blacklist containing file name patterns skipped when uploading.",
        "additionalProperties": false,
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "description": "Blacklist entries.",
            "items": {
              "$ref": "#/components/schemas/BlacklistItem"
            }
          }
        }
      },
      "BlacklistItem": {
        "type": "object",
        "description": "Entry in the Blacklist.",
        "additionalProperties": false,
        "required": [
          "name",
          "match"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Friendly name of item.",
            "minLength": 1
          },
          "match": {
            "type": "string",
            "description": "Pattern a file name must match to be excluded from the transfer.",
            "minLength": 1
          }
        }
      },
      "UserRoleSearchResult": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SearchBehaviorBaseResultOfUserRole"
          },
          {
            "type": "object",
            "description": "Holds results of the user role search.",
            "additionalProperties": false
          }
        ]
      },
      "SearchBehaviorBaseResultOfUserRole": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResultOfUserRole"
          },
          {
            "type": "object",
            "description": "Base class for search result queries that support SearchBehaviors",
            "additionalProperties": false,
            "properties": {
              "searchString": {
                "type": "string",
                "description": "The search string used to query the data.",
                "nullable": true
              },
              "isSearchStringRewritten": {
                "type": "boolean",
                "description": "Flag to notify if the SearchString was modified compared to the original requested one."
              },
              "queryDebugInformation": {
                "type": "array",
                "description": "Additional information regarding the query execution and reason of the matched documents. Multiple items are returned if multiple queries were performed.",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/QueryDebugInformation"
                }
              }
            }
          }
        ]
      },
      "BaseResultOfUserRole": {
        "type": "object",
        "description": "Base class for search results",
        "additionalProperties": false,
        "required": [
          "results",
          "totalResults",
          "elapsedMilliseconds"
        ],
        "properties": {
          "totalResults": {
            "type": "integer",
            "description": "The total number of matching documents.",
            "format": "int64"
          },
          "results": {
            "type": "array",
            "description": "The matched documents.",
            "items": {
              "$ref": "#/components/schemas/UserRole"
            }
          },
          "elapsedMilliseconds": {
            "type": "integer",
            "description": "The search execution time in milliseconds.",
            "format": "int64"
          },
          "pageToken": {
            "type": "string",
            "description": "An optional token to access the next page of results for those endpoints that support backend scrolling logic.",
            "nullable": true
          }
        }
      },
      "UserRole": {
        "allOf": [
          {
            "$ref": "#/components/schemas/UserRoleEditable"
          },
          {
            "type": "object",
            "description": "Represents a user role, which associates users with user rights.",
            "additionalProperties": false,
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "type": "string",
                "description": "User role ID.",
                "minLength": 1
              }
            }
          }
        ]
      },
      "UserRoleEditable": {
        "type": "object",
        "description": "Represents a user role, which associates users with user rights.",
        "additionalProperties": false,
        "required": [
          "names",
          "userRights"
        ],
        "properties": {
          "names": {
            "description": "Language specific user role names.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/TranslatedStringDictionary"
              }
            ]
          },
          "userRights": {
            "type": "array",
            "description": "All user rights for this user role.",
            "items": {
              "$ref": "#/components/schemas/UserRight"
            }
          }
        }
      },
      "UserRoleSearchRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "limit",
          "debugMode",
          "includeAdministratorSystemUserRole"
        ],
        "properties": {
          "searchString": {
            "type": "string",
            "description": "Limits the search by using a query string filter. The Lucene query string syntax is supported.",
            "nullable": true
          },
          "searchBehaviors": {
            "type": "array",
            "description": "An optional list of search behaviors. All the passed behaviors will be applied.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/SearchBehavior"
            }
          },
          "sort": {
            "type": "array",
            "description": "Fields and respective directions requested to sort the search results.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/SortInfo"
            }
          },
          "limit": {
            "type": "integer",
            "description": "Limits the document count of the result set. Defaults to 30.",
            "format": "int32",
            "default": 30
          },
          "pageToken": {
            "type": "string",
            "description": "The token used to retrieve the next page of results. It must be null on first request and only filled with the returned pageToken to request next page of results.",
            "nullable": true
          },
          "filter": {
            "description": "Filter applied to user roles.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/FilterBase"
              }
            ]
          },
          "debugMode": {
            "type": "boolean",
            "description": "Enable debug mode to get as result of the Searched additional debug information. Warning! It severely affects performance.",
            "default": false
          },
          "searchLanguages": {
            "type": "array",
            "description": "Which languages to search against when using the search string.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "includeAdministratorSystemUserRole": {
            "type": "boolean",
            "description": "Defines if the user roles with system user role Administrator is returned."
          }
        }
      },
      "UserRoleDetail": {
        "allOf": [
          {
            "$ref": "#/components/schemas/UserRole"
          },
          {
            "type": "object",
            "description": "Represents a user role, which associates users with user rights.",
            "additionalProperties": false,
            "properties": {
              "audit": {
                "description": "Audit information.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/UserAuditDetail"
                  }
                ]
              }
            }
          }
        ]
      },
      "UserRoleCreateManyRequest": {
        "type": "object",
        "description": "Holds information needed to create multiple user roles.",
        "additionalProperties": false,
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "description": "Multiple user creation requests.",
            "items": {
              "$ref": "#/components/schemas/UserRoleCreateRequest"
            }
          }
        }
      },
      "UserRoleCreateRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/UserRoleEditable"
          },
          {
            "type": "object",
            "description": "Holds information needed for user role creation.",
            "additionalProperties": false,
            "properties": {
              "requestId": {
                "type": "string",
                "description": "Optional client reference for this request.\nWill be returned back in response to make easier for clients to match request items with the respective results.\nIt is not persisted anywhere and it is ignored in single operations.",
                "nullable": true
              }
            }
          }
        ]
      },
      "UserRoleUpdateManyRequest": {
        "type": "object",
        "description": "Holds information about which user roles and how are requested to be updated.",
        "additionalProperties": false,
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "description": "New value for user roles with specified IDs.",
            "items": {
              "$ref": "#/components/schemas/UserRole"
            }
          }
        }
      },
      "UserRoleDeleteManyRequest": {
        "type": "object",
        "description": "Holds information about which user roles are requested to be deleted.",
        "additionalProperties": false,
        "required": [
          "ids"
        ],
        "properties": {
          "ids": {
            "type": "array",
            "description": "IDs of the user roles to delete.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "UserDetail": {
        "allOf": [
          {
            "$ref": "#/components/schemas/User"
          },
          {
            "type": "object",
            "description": "Detail information about a user.",
            "additionalProperties": false,
            "properties": {
              "userRoles": {
                "type": "array",
                "description": "User roles the user should be assigned to. Overwrites the original user roles.",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/UserRoleAssignment"
                }
              },
              "comment": {
                "type": "string",
                "description": "Comment saved for the user.",
                "nullable": true
              },
              "languageCode": {
                "type": "string",
                "description": "Preferred language, e.g. for correspondence.",
                "nullable": true
              },
              "address": {
                "description": "User's address.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/UserAddress"
                  }
                ]
              },
              "identityProviderId": {
                "type": "string",
                "description": "Identity provider that governs this user or null for Picturepark's own IdentityServer.",
                "nullable": true
              },
              "ownerTokens": {
                "type": "array",
                "description": "Owner tokens referencing the user.",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/OwnerToken"
                }
              },
              "authorizationState": {
                "description": "Authorization state the user is currently in.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/AuthorizationState"
                  }
                ]
              },
              "isLocked": {
                "type": "boolean",
                "description": "Locked users are unable to log in and use the system."
              },
              "lifeCycle": {
                "description": "Life cycle state the user is currently in.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/LifeCycle"
                  }
                ]
              },
              "isSupportUser": {
                "type": "boolean",
                "description": "The support user is a user created for Picturepark support personnel."
              },
              "isReadOnly": {
                "type": "boolean",
                "description": "Read-only users can't be removed from the system, e.g. service user."
              },
              "isFederated": {
                "type": "boolean",
                "description": "Federated user is a user who is (currently) governed by an external identity provider."
              },
              "audit": {
                "description": "Audit information.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/UserAuditDetail"
                  }
                ]
              }
            }
          }
        ]
      },
      "UserRoleAssignment": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "isFederated"
        ],
        "properties": {
          "userRole": {
            "description": "User role assigned.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserRole"
              }
            ]
          },
          "isFederated": {
            "type": "boolean",
            "description": "Marks user roles that were assigned automatically to a federated user based on group mapping of a federated identity provider."
          }
        }
      },
      "OwnerToken": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "The ownertoken id.",
            "nullable": true
          },
          "userId": {
            "type": "string",
            "description": "The id of the user to whom this ownertoken currently belongs to.",
            "nullable": true
          }
        }
      },
      "UserUpdateRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/User"
          },
          {
            "type": "object",
            "description": "Represents the updateable fields of the user.",
            "additionalProperties": false,
            "properties": {
              "userRoles": {
                "type": "array",
                "description": "User roles the user should be assigned to. Overwrites the original user roles.",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/UserRole"
                }
              },
              "comment": {
                "type": "string",
                "description": "Comment saved for the user.",
                "nullable": true
              },
              "languageCode": {
                "type": "string",
                "description": "Preferred language, e.g. for correspondence.",
                "nullable": true
              },
              "address": {
                "description": "User's address.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/UserAddress"
                  }
                ]
              },
              "identityProviderId": {
                "type": "string",
                "description": "Identity provider that governs this user or null for Picturepark's own IdentityServer.",
                "nullable": true
              }
            }
          }
        ]
      },
      "UserLockRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "lock"
        ],
        "properties": {
          "lock": {
            "type": "boolean",
            "description": "Indicates the requested lock state of the user.\nIf _true_ was specified, the user will be _locked_. _False_ will unlock the previously _locked_ user.\nIf User is already in desired state, this will be returned as error."
          }
        }
      },
      "UserLockManyRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/UserManyRequestBase"
          },
          {
            "type": "object",
            "description": "Request update of lock state of multiple users",
            "additionalProperties": false,
            "required": [
              "lock"
            ],
            "properties": {
              "lock": {
                "type": "boolean",
                "description": "Indicates the requested lock state of the users.\nIf _true_ was specified, the users will be _locked_. _False_ will unlock the previously _locked_ users.\nUsers which are already in desired state will be returned as errors."
              }
            }
          }
        ]
      },
      "UserManyRequestBase": {
        "type": "object",
        "description": "Base class for requests affecting multiple users",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "userIds"
        ],
        "properties": {
          "userIds": {
            "type": "array",
            "description": "User IDs.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "UserReviewRequest": {
        "type": "object",
        "description": "Holds additional information for user review.",
        "additionalProperties": false,
        "required": [
          "reviewed"
        ],
        "properties": {
          "reviewed": {
            "type": "boolean",
            "description": "Indicates the requested review state of the user.\nIf _true_ is specified, user will be transitioned into _reviewed_ state. _False_ will put the user back into _to be reviewed_ state."
          }
        }
      },
      "UserReviewManyRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/UserManyRequestBase"
          },
          {
            "type": "object",
            "description": "Review many request",
            "additionalProperties": false,
            "required": [
              "reviewed"
            ],
            "properties": {
              "reviewed": {
                "type": "boolean",
                "description": "Indicates the requested review state of the user.\nIf _true_ is specified, user will be transitioned into _reviewed_ state. _False_ will put the user back into _to be reviewed_ state."
              }
            }
          }
        ]
      },
      "UserInviteManyRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/UserManyRequestBase"
          },
          {
            "type": "object",
            "description": "Request for inviting users (applies to users in states ToBeReviewed + Reviewed)",
            "additionalProperties": false
          }
        ]
      },
      "UserReinviteManyRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/UserManyRequestBase"
          },
          {
            "type": "object",
            "description": "Request for re-inviting users (applies to users in states Invited)",
            "additionalProperties": false
          }
        ]
      },
      "UserRoleAssignManyRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/UserManyRequestBase"
          },
          {
            "type": "object",
            "description": "Request to update role assignment of users.",
            "additionalProperties": false,
            "required": [
              "userRoleIds",
              "operation"
            ],
            "properties": {
              "userRoleIds": {
                "type": "array",
                "description": "Users roles to modify.",
                "items": {
                  "type": "string"
                }
              },
              "operation": {
                "description": "Defines how to apply specified UserRoleIds to UserIds\nIf an operation results in no change for a user, that user will be returned as succeeded.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/UserRoleAssignmentOperationType"
                  }
                ]
              }
            }
          }
        ]
      },
      "UserRoleAssignmentOperationType": {
        "type": "string",
        "description": "User role assignment operation type",
        "x-enumNames": [
          "Add",
          "Remove",
          "Update"
        ],
        "enum": [
          "Add",
          "Remove",
          "Update"
        ]
      },
      "UserDeleteRequest": {
        "type": "object",
        "description": "Details of the user deletion.",
        "additionalProperties": false,
        "properties": {
          "ownerTokenTransferUserId": {
            "type": "string",
            "description": "User ID of user who will take over the ownership of the content currently owned by the deleted user.",
            "nullable": true
          }
        }
      },
      "UserCreateRequest": {
        "type": "object",
        "description": "Holds information needed for user creation.",
        "additionalProperties": false,
        "required": [
          "emailAddress"
        ],
        "properties": {
          "firstName": {
            "type": "string",
            "description": "User's first name.",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "description": "User's last name.",
            "nullable": true
          },
          "emailAddress": {
            "type": "string",
            "description": "Email address of the user (doubles as username).",
            "minLength": 1
          },
          "languageCode": {
            "type": "string",
            "description": "Preferred language, e.g. for correspondence.",
            "nullable": true
          },
          "userRoleIds": {
            "type": "array",
            "description": "IDs of user roles the user is assigned to.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "address": {
            "description": "User address.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserAddress"
              }
            ]
          }
        }
      },
      "UserSearchResult": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SearchBehaviorWithAggregationBaseResultOfUserWithRoles"
          },
          {
            "type": "object",
            "description": "Holds results of the user search.",
            "additionalProperties": false
          }
        ]
      },
      "SearchBehaviorWithAggregationBaseResultOfUserWithRoles": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SearchBehaviorBaseResultOfUserWithRoles"
          },
          {
            "type": "object",
            "description": "Base class for search result queries that support SearchBehaviors",
            "additionalProperties": false,
            "properties": {
              "aggregationResults": {
                "type": "array",
                "description": "Results of the aggregation, if any aggregators was passed in the request.",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/AggregationResult"
                }
              }
            }
          }
        ]
      },
      "SearchBehaviorBaseResultOfUserWithRoles": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResultOfUserWithRoles"
          },
          {
            "type": "object",
            "description": "Base class for search result queries that support SearchBehaviors",
            "additionalProperties": false,
            "properties": {
              "searchString": {
                "type": "string",
                "description": "The search string used to query the data.",
                "nullable": true
              },
              "isSearchStringRewritten": {
                "type": "boolean",
                "description": "Flag to notify if the SearchString was modified compared to the original requested one."
              },
              "queryDebugInformation": {
                "type": "array",
                "description": "Additional information regarding the query execution and reason of the matched documents. Multiple items are returned if multiple queries were performed.",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/QueryDebugInformation"
                }
              }
            }
          }
        ]
      },
      "BaseResultOfUserWithRoles": {
        "type": "object",
        "description": "Base class for search results",
        "additionalProperties": false,
        "required": [
          "results",
          "totalResults",
          "elapsedMilliseconds"
        ],
        "properties": {
          "totalResults": {
            "type": "integer",
            "description": "The total number of matching documents.",
            "format": "int64"
          },
          "results": {
            "type": "array",
            "description": "The matched documents.",
            "items": {
              "$ref": "#/components/schemas/UserWithRoles"
            }
          },
          "elapsedMilliseconds": {
            "type": "integer",
            "description": "The search execution time in milliseconds.",
            "format": "int64"
          },
          "pageToken": {
            "type": "string",
            "description": "An optional token to access the next page of results for those endpoints that support backend scrolling logic.",
            "nullable": true
          }
        }
      },
      "UserWithRoles": {
        "type": "object",
        "description": "User information retrieved via search",
        "additionalProperties": false,
        "required": [
          "id",
          "emailAddress",
          "authorizationState",
          "lifeCycle",
          "isLocked",
          "isSupportUser",
          "isReadOnly",
          "isFederated"
        ],
        "properties": {
          "userRoleIds": {
            "type": "array",
            "description": "IDs of user roles user is assigned to",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "id": {
            "type": "string",
            "description": "User's Picturepark ID.",
            "minLength": 1
          },
          "firstName": {
            "type": "string",
            "description": "User's first name.",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "description": "User's last name.",
            "nullable": true
          },
          "emailAddress": {
            "type": "string",
            "description": "Email address of the user (doubles as username).",
            "minLength": 1
          },
          "authorizationState": {
            "description": "Authorization state the user is currently in.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/AuthorizationState"
              }
            ]
          },
          "lifeCycle": {
            "description": "Life cycle state the user is currently in.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/LifeCycle"
              }
            ]
          },
          "isLocked": {
            "type": "boolean",
            "description": "A locked user is not allowed to log in."
          },
          "isSupportUser": {
            "type": "boolean",
            "description": "A support user is a user created for Picturepark support personnel."
          },
          "isReadOnly": {
            "type": "boolean",
            "description": "Read-only users can't be removed from the system, e.g. service user."
          },
          "isFederated": {
            "type": "boolean",
            "description": "Federated user is a user who is (currently) governed by an external identity provider."
          }
        }
      },
      "UserSearchRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/UserSearchAndAggregationBaseRequest"
          },
          {
            "type": "object",
            "description": "Represents user search request.",
            "additionalProperties": false,
            "properties": {
              "sort": {
                "type": "array",
                "description": "Fields and respective directions requested to sort the search results. Sorting on a not indexed field will throw an exception.",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/SortInfo"
                }
              },
              "limit": {
                "type": "integer",
                "description": "Limits the document count of the result set.",
                "format": "int32",
                "default": 30
              },
              "pageToken": {
                "type": "string",
                "description": "The token used to retrieve the next page of results. It must be null on first request and only filled with the returned pageToken to request next page of results.",
                "nullable": true
              },
              "debugMode": {
                "type": "boolean",
                "description": "Enable debug mode to get as result of the Searched additional debug information. Warning! Severely affects performance.",
                "default": false
              },
              "aggregators": {
                "type": "array",
                "description": "List of aggregators that defines how the items should be aggregated.",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/AggregatorBase"
                }
              }
            }
          }
        ]
      },
      "UserSearchAndAggregationBaseRequest": {
        "type": "object",
        "description": "Represents an aggregation request over users.",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "lifeCycleFilter",
          "includeServiceUser",
          "editableOnly"
        ],
        "properties": {
          "searchString": {
            "type": "string",
            "description": "Limits the search by using a query string filter. The Lucene query string syntax is supported.",
            "nullable": true
          },
          "searchBehaviors": {
            "type": "array",
            "description": "An optional list of search behaviors. All the passed behaviors will be applied.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/SearchBehavior"
            }
          },
          "filter": {
            "description": "An optional search filter. Limits the document result set.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/FilterBase"
              }
            ]
          },
          "lifeCycleFilter": {
            "description": "Return only users in certain life cycle state(s).",
            "oneOf": [
              {
                "$ref": "#/components/schemas/LifeCycleFilter"
              }
            ]
          },
          "userRightsFilter": {
            "type": "array",
            "description": "Return only users with certain user rights.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/UserRight"
            }
          },
          "aggregationFilters": {
            "type": "array",
            "description": "Special filters used to filter down independently the aggregations' values and the search results on specific conditions.\nFor the search results, the aggregation filters are used to create a Filter that is put in AND with the eventual existing Filter of the search request to nail down the search results. The filters generated\nby the aggregation filters are put in OR each other if they have the same AggregationName, and then such groups are put in AND.\nFor the aggregation values, only the original Filter of the search request is used to nail down the data to be considered for the aggregations. Then, on top of that, for each aggregator in the search request, a Filter is created to filter down the\naggregation results of that aggregation: depending if the AggregationName of the AggregationFilter matches the AggregationName of the Aggregator, the filter is put in OR (if it matches) or in AND (if it does not match it).\nMoreover, an AggregationFilter ensures that the related value is returned in the AggregationResults also if the top aggregation values returned by default do not contain it.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/AggregationFilter"
            }
          },
          "includeServiceUser": {
            "type": "boolean",
            "description": "Includes the service user in result."
          },
          "editableOnly": {
            "type": "boolean",
            "description": "Restricts the results to users that are editable for calling user.\nIf set to true, IncludeServiceUser is ignored."
          }
        }
      },
      "UserAggregationRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/UserSearchAndAggregationBaseRequest"
          },
          {
            "type": "object",
            "description": "Represents an aggregation request over users.",
            "additionalProperties": false,
            "required": [
              "aggregators"
            ],
            "properties": {
              "aggregators": {
                "type": "array",
                "description": "List of aggregators that defines how the items should be aggregated.",
                "items": {
                  "$ref": "#/components/schemas/AggregatorBase"
                }
              }
            }
          }
        ]
      },
      "UserUpdateIdentityProviderManyRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/UserManyRequestBase"
          },
          {
            "type": "object",
            "description": "Request to update identity provider assignment of users.",
            "additionalProperties": false,
            "required": [
              "identityProviderId"
            ],
            "properties": {
              "identityProviderId": {
                "type": "string",
                "description": "Identity provider to assign to users.",
                "minLength": 1
              }
            }
          }
        ]
      },
      "XmpMappingTargets": {
        "type": "object",
        "description": "Represents a list of source/target fields for XMP mappings",
        "additionalProperties": false,
        "required": [
          "xmpFields",
          "metadataFields"
        ],
        "properties": {
          "xmpFields": {
            "type": "array",
            "description": "Fields in XMP/Exif.",
            "items": {
              "$ref": "#/components/schemas/XmpField"
            }
          },
          "metadataFields": {
            "type": "array",
            "description": "Fields in metadata.",
            "items": {
              "$ref": "#/components/schemas/MetadataField"
            }
          }
        }
      },
      "XmpField": {
        "type": "object",
        "description": "Represents a field in XMP that can be mapped from or to",
        "additionalProperties": false,
        "required": [
          "isWritable",
          "dataType"
        ],
        "properties": {
          "path": {
            "type": "string",
            "description": "Path of the field in XMP.",
            "nullable": true
          },
          "isWritable": {
            "type": "boolean",
            "description": "Indicates if the field can be written to."
          },
          "dataType": {
            "description": "Data type of the field.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/XmpFieldDataType"
              }
            ]
          }
        }
      },
      "XmpFieldDataType": {
        "type": "string",
        "description": "Data types of XMP fields",
        "x-enumNames": [
          "Simple",
          "LangAlt",
          "List"
        ],
        "enum": [
          "Simple",
          "LangAlt",
          "List"
        ]
      },
      "MetadataField": {
        "type": "object",
        "description": "Represents a field in metadata that XMP can be mapped to or from",
        "additionalProperties": false,
        "required": [
          "path",
          "isWritable",
          "dataType"
        ],
        "properties": {
          "path": {
            "type": "string",
            "description": "Path to the field in metadata.",
            "minLength": 1
          },
          "isWritable": {
            "type": "boolean",
            "description": "Indicates if the field can act as target for a mapping.\nIf field is read-only, it can only act as source of a mapping."
          },
          "dataType": {
            "description": "Data type of the field.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/MetadataFieldDataType"
              }
            ]
          },
          "availableKeyFields": {
            "type": "array",
            "description": "A list of field IDs that can be used as a key field when a tagbox is mapped.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "MetadataFieldDataType": {
        "type": "string",
        "description": "Data types of metadata fields",
        "x-enumNames": [
          "Simple",
          "TranslatedString",
          "Tagbox"
        ],
        "enum": [
          "Simple",
          "TranslatedString",
          "Tagbox"
        ]
      },
      "XmpMappingEntrySearchResult": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SearchBehaviorWithAggregationBaseResultOfXmpMappingEntry"
          },
          {
            "type": "object",
            "description": "Holds results of search for XMP mappings",
            "additionalProperties": false
          }
        ]
      },
      "SearchBehaviorWithAggregationBaseResultOfXmpMappingEntry": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SearchBehaviorBaseResultOfXmpMappingEntry"
          },
          {
            "type": "object",
            "description": "Base class for search result queries that support SearchBehaviors",
            "additionalProperties": false,
            "properties": {
              "aggregationResults": {
                "type": "array",
                "description": "Results of the aggregation, if any aggregators was passed in the request.",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/AggregationResult"
                }
              }
            }
          }
        ]
      },
      "SearchBehaviorBaseResultOfXmpMappingEntry": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResultOfXmpMappingEntry"
          },
          {
            "type": "object",
            "description": "Base class for search result queries that support SearchBehaviors",
            "additionalProperties": false,
            "properties": {
              "searchString": {
                "type": "string",
                "description": "The search string used to query the data.",
                "nullable": true
              },
              "isSearchStringRewritten": {
                "type": "boolean",
                "description": "Flag to notify if the SearchString was modified compared to the original requested one."
              },
              "queryDebugInformation": {
                "type": "array",
                "description": "Additional information regarding the query execution and reason of the matched documents. Multiple items are returned if multiple queries were performed.",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/QueryDebugInformation"
                }
              }
            }
          }
        ]
      },
      "BaseResultOfXmpMappingEntry": {
        "type": "object",
        "description": "Base class for search results",
        "additionalProperties": false,
        "required": [
          "results",
          "totalResults",
          "elapsedMilliseconds"
        ],
        "properties": {
          "totalResults": {
            "type": "integer",
            "description": "The total number of matching documents.",
            "format": "int64"
          },
          "results": {
            "type": "array",
            "description": "The matched documents.",
            "items": {
              "$ref": "#/components/schemas/XmpMappingEntry"
            }
          },
          "elapsedMilliseconds": {
            "type": "integer",
            "description": "The search execution time in milliseconds.",
            "format": "int64"
          },
          "pageToken": {
            "type": "string",
            "description": "An optional token to access the next page of results for those endpoints that support backend scrolling logic.",
            "nullable": true
          }
        }
      },
      "XmpMappingEntry": {
        "allOf": [
          {
            "$ref": "#/components/schemas/XmpMappingEntryEditable"
          },
          {
            "type": "object",
            "description": "XMP mapping entry",
            "additionalProperties": false,
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "type": "string",
                "minLength": 1
              }
            }
          }
        ]
      },
      "XmpMappingEntryEditable": {
        "type": "object",
        "description": "Editable properties of a XMP mapping entry",
        "additionalProperties": false,
        "required": [
          "direction",
          "priority",
          "stopProcessing",
          "xmpPath",
          "metadataPath"
        ],
        "properties": {
          "direction": {
            "description": "Direction of the mapping.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/MappingDirection"
              }
            ]
          },
          "priority": {
            "type": "integer",
            "description": "Priority of the mapping.",
            "format": "int32"
          },
          "stopProcessing": {
            "type": "boolean",
            "description": "Stop processing further mappings for the same field if a value was found."
          },
          "xmpPath": {
            "type": "string",
            "description": "Path to source property in XMP.",
            "minLength": 1
          },
          "metadataPath": {
            "type": "string",
            "description": "Path to target property in metadata.",
            "minLength": 1
          },
          "configuration": {
            "description": "Optional additional configuration for the mapping.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/XmpMappingEntryConfigurationBase"
              }
            ]
          }
        }
      },
      "MappingDirection": {
        "type": "string",
        "description": "Direction of mapping of XMP data",
        "x-enumNames": [
          "XmpToMetadata",
          "MetadataToXmp",
          "Both"
        ],
        "enum": [
          "XmpToMetadata",
          "MetadataToXmp",
          "Both"
        ]
      },
      "XmpMappingEntryConfigurationBase": {
        "type": "object",
        "discriminator": {
          "propertyName": "kind",
          "mapping": {
            "XmpMappingEntryConfigurationTagbox": "#/components/schemas/XmpMappingEntryConfigurationTagbox"
          }
        },
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "kind"
        ],
        "properties": {
          "kind": {
            "type": "string"
          }
        }
      },
      "XmpMappingEntryConfigurationTagbox": {
        "allOf": [
          {
            "$ref": "#/components/schemas/XmpMappingEntryConfigurationBase"
          },
          {
            "type": "object",
            "description": "Additional configuration for a mapping tagbox fields",
            "additionalProperties": false,
            "required": [
              "keyFieldIds",
              "caseSensitive",
              "includeAllSchemaChildren"
            ],
            "properties": {
              "keyFieldIds": {
                "type": "array",
                "description": "IDs of key fields.",
                "items": {
                  "type": "string"
                }
              },
              "caseSensitive": {
                "type": "boolean",
                "description": "Indicates if lookup shall be performed case sensitive."
              },
              "includeAllSchemaChildren": {
                "type": "boolean",
                "description": "Indicates if child schemas should also be included."
              }
            }
          }
        ]
      },
      "XmpMappingEntrySearchRequest": {
        "type": "object",
        "description": "Search request for getting configured XMP mappings",
        "additionalProperties": false,
        "required": [
          "debugMode",
          "limit"
        ],
        "properties": {
          "debugMode": {
            "type": "boolean",
            "description": "Enable debug mode to get as result of the Searched additional debug information. Warning! Severely affects performance.",
            "default": false
          },
          "aggregationFilters": {
            "type": "array",
            "description": "Special filters used to filter down independently the aggregations' values and the search results on specific conditions.\nFor the search results, the aggregation filters are used to create a Filter that is put in AND with the eventual existing Filter of the search request to nail down the search results. The filters generated\nby the aggregation filters are put in OR each other if they have the same AggregationName, and then such groups are put in AND.\nFor the aggregation values, only the original Filter of the search request is used to nail down the data to be considered for the aggregations. Then, on top of that, for each aggregator in the search request, a Filter is created to filter down the\naggregation results of that aggregation: depending if the AggregationName of the AggregationFilter matches the AggregationName of the Aggregator, the filter is put in OR (if it matches) or in AND (if it does not match it).\nMoreover, an AggregationFilter ensures that the related value is returned in the AggregationResults also if the top aggregation values returned by default do not contain it.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/AggregationFilter"
            }
          },
          "aggregators": {
            "type": "array",
            "description": "List of aggregators that defines how the items should be aggregated.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/AggregatorBase"
            }
          },
          "filter": {
            "description": "An optional search filter. Limits the document result set.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/FilterBase"
              }
            ]
          },
          "limit": {
            "type": "integer",
            "description": "Limits the document count of the result set.",
            "format": "int32",
            "default": 30
          },
          "pageToken": {
            "type": "string",
            "description": "The token used to retrieve the next page of results. It must be null on first request and only filled with the returned pageToken to request next page of results.",
            "nullable": true
          },
          "searchString": {
            "type": "string",
            "description": "Limits the search by using a query string filter. The Lucene query string syntax is supported.",
            "nullable": true
          },
          "searchBehaviors": {
            "type": "array",
            "description": "An optional list of search behaviors. All the passed behaviors will be applied.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/SearchBehavior"
            }
          },
          "sort": {
            "type": "array",
            "description": "Fields and respective directions requested to sort the search results. Sorting on a not indexed field will throw an exception.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/SortInfo"
            }
          }
        }
      },
      "XmpMappingEntryCreateRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/XmpMappingEntryEditable"
          },
          {
            "type": "object",
            "description": "Request to create XMP mapping",
            "additionalProperties": false,
            "properties": {
              "requestId": {
                "type": "string",
                "description": "Optional client reference for this request.\nWill be returned back in response to make easier for clients to match request items with the respective results.\nIt is not persisted anywhere and it is ignored in single operations.",
                "nullable": true
              }
            }
          }
        ]
      },
      "XmpMappingEntryCreateManyRequest": {
        "type": "object",
        "description": "Request to create many XMP mappings",
        "additionalProperties": false,
        "properties": {
          "items": {
            "type": "array",
            "description": "Mappings to create.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/XmpMappingEntryCreateRequest"
            }
          }
        }
      },
      "XmpMappingEntryUpdateManyRequest": {
        "type": "object",
        "description": "Request to update many XMP mappings",
        "additionalProperties": false,
        "properties": {
          "items": {
            "type": "array",
            "description": "Items to update.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/XmpMappingEntry"
            }
          }
        }
      },
      "XmpMappingEntryDeleteManyRequest": {
        "type": "object",
        "description": "Request to delete many XMP mappings",
        "additionalProperties": false,
        "properties": {
          "ids": {
            "type": "array",
            "description": "IDs to delete.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "DataDictionary": {
        "type": "object",
        "additionalProperties": {}
      },
      "LiveStreamMessage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Message"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "customerId": {
                "type": "string",
                "nullable": true
              },
              "customerAlias": {
                "type": "string",
                "nullable": true
              },
              "timestamp": {
                "type": "string",
                "format": "date-time"
              },
              "scope": {
                "type": "string",
                "nullable": true
              },
              "documentChange": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/DocumentChange"
                  }
                ]
              },
              "applicationEvent": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApplicationEvent"
                  }
                ]
              }
            }
          }
        ]
      },
      "DocumentChange": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "version",
          "timeStamp"
        ],
        "properties": {
          "documentName": {
            "type": "string",
            "nullable": true
          },
          "documentId": {
            "type": "string",
            "nullable": true
          },
          "version": {
            "type": "integer",
            "format": "int64"
          },
          "action": {
            "type": "string",
            "nullable": true
          },
          "timeStamp": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ApplicationEvent": {
        "type": "object",
        "discriminator": {
          "propertyName": "kind",
          "mapping": {
            "TransferEvent": "#/components/schemas/TransferEvent",
            "ReindexEvent": "#/components/schemas/ReindexEvent",
            "ContentDetailViewEvent": "#/components/schemas/ContentDetailViewEvent",
            "ContentDownloadEvent": "#/components/schemas/ContentDownloadEvent",
            "SessionRenewalEvent": "#/components/schemas/SessionRenewalEvent",
            "SharePageViewEvent": "#/components/schemas/SharePageViewEvent",
            "ApiStatisticsEvent": "#/components/schemas/ApiStatisticsEvent",
            "BusinessProcessEvent": "#/components/schemas/BusinessProcessEvent",
            "OutputRenderedEvent": "#/components/schemas/OutputRenderedEvent",
            "ConfigurationChangeEvent": "#/components/schemas/ConfigurationChangeEvent",
            "CustomerChangeEvent": "#/components/schemas/CustomerChangeEvent",
            "SearchReindexCompletedEvent": "#/components/schemas/SearchReindexCompletedEvent",
            "BusinessRuleFiredEvent": "#/components/schemas/BusinessRuleFiredEvent",
            "BusinessProcessCancellationRequestedEvent": "#/components/schemas/BusinessProcessCancellationRequestedEvent",
            "XmpWritebackCompletedEvent": "#/components/schemas/XmpWritebackCompletedEvent"
          }
        },
        "additionalProperties": false,
        "required": [
          "kind",
          "timestamp"
        ],
        "properties": {
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "kind": {
            "type": "string"
          }
        }
      },
      "TransferEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApplicationEvent"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "transferId": {
                "type": "string",
                "nullable": true
              },
              "state": {
                "$ref": "#/components/schemas/TransferState"
              }
            }
          }
        ]
      },
      "ReindexEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApplicationEvent"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "indexId": {
                "type": "string",
                "nullable": true
              },
              "state": {
                "$ref": "#/components/schemas/IndexState"
              }
            }
          }
        ]
      },
      "IndexState": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Draft",
          "Create",
          "Inactive",
          "Active",
          "Closed",
          "ReindexInProgress",
          "Cancelled"
        ],
        "enum": [
          "Draft",
          "Create",
          "Inactive",
          "Active",
          "Closed",
          "ReindexInProgress",
          "Cancelled"
        ]
      },
      "ContentDetailViewEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApplicationEvent"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "contentIds": {
                "type": "array",
                "nullable": true,
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "ContentDownloadEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApplicationEvent"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "downloadInfos": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/DownloadTrackingInfo"
                }
              },
              "fileSize": {
                "type": "integer",
                "format": "int64"
              },
              "shareToken": {
                "type": "string",
                "nullable": true
              },
              "range": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "DownloadTrackingInfo": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "contentDisposition"
        ],
        "properties": {
          "contentId": {
            "type": "string",
            "nullable": true
          },
          "outputFormatId": {
            "type": "string",
            "nullable": true
          },
          "width": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "height": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "contentDisposition": {
            "$ref": "#/components/schemas/ContentDisposition"
          }
        }
      },
      "ContentDisposition": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Attachment",
          "Inline"
        ],
        "enum": [
          "Attachment",
          "Inline"
        ]
      },
      "SessionRenewalEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApplicationEvent"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "authorizationState": {
                "$ref": "#/components/schemas/AuthorizationState"
              }
            }
          }
        ]
      },
      "SharePageViewEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApplicationEvent"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "shareToken": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "ApiStatisticsEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApplicationEvent"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "requestsPerClient": {
                "type": "object",
                "nullable": true,
                "additionalProperties": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        ]
      },
      "BusinessProcessEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApplicationEvent"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "businessProcessId": {
                "type": "string",
                "nullable": true
              },
              "lifeCycle": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/BusinessProcessLifeCycle"
                  }
                ]
              },
              "state": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "OutputRenderedEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApplicationEvent"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "outputId": {
                "type": "string",
                "nullable": true
              },
              "contentId": {
                "type": "string",
                "nullable": true
              },
              "outputFormatId": {
                "type": "string",
                "nullable": true
              },
              "renderingState": {
                "$ref": "#/components/schemas/OutputRenderingState"
              }
            }
          }
        ]
      },
      "ConfigurationChangeEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApplicationEvent"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "documentType": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "CustomerChangeEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ConfigurationChangeEvent"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "lifeCycle": {
                "$ref": "#/components/schemas/LifeCycle"
              }
            }
          }
        ]
      },
      "SearchReindexCompletedEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApplicationEvent"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "searchIndex": {
                "$ref": "#/components/schemas/SearchIndexType"
              },
              "items": {
                "type": "integer",
                "format": "int64"
              },
              "duration": {
                "type": "string",
                "format": "time-span"
              }
            }
          }
        ]
      },
      "SearchIndexType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Content",
          "ListItem"
        ],
        "enum": [
          "Content",
          "ListItem"
        ]
      },
      "BusinessRuleFiredEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApplicationEvent"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "details": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/BusinessRuleFiredEventDetail"
                }
              }
            }
          }
        ]
      },
      "BusinessRuleFiredEventDetail": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "documentId": {
            "type": "string",
            "nullable": true
          },
          "documentType": {
            "type": "string",
            "nullable": true
          },
          "ruleIds": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "BusinessProcessCancellationRequestedEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApplicationEvent"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "businessProcessId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "XmpWritebackCompletedEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApplicationEvent"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "outputDocId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "Message": {
        "type": "object",
        "discriminator": {
          "propertyName": "kind",
          "mapping": {
            "ConsoleMessage": "#/components/schemas/ConsoleMessage",
            "NodeInfoMessage": "#/components/schemas/NodeInfoMessage",
            "LiveStreamMessage": "#/components/schemas/LiveStreamMessage"
          }
        },
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "kind",
          "retries",
          "priority",
          "deduplicate"
        ],
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "retries": {
            "type": "integer",
            "format": "int32"
          },
          "priority": {
            "type": "integer",
            "format": "int32"
          },
          "deduplicate": {
            "type": "boolean"
          },
          "kind": {
            "type": "string"
          }
        }
      },
      "ConsoleMessage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Message"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "command": {
                "type": "string",
                "nullable": true
              },
              "arguments": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/TupleOfStringAndString"
                }
              },
              "targetQueue": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "TupleOfStringAndString": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "item1",
          "item2"
        ],
        "properties": {
          "item1": {
            "type": "string"
          },
          "item2": {
            "type": "string"
          }
        }
      },
      "NodeInfoMessage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Message"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "nodeId": {
                "type": "string",
                "nullable": true
              },
              "hostName": {
                "type": "string",
                "nullable": true
              },
              "lastResponseTime": {
                "type": "string",
                "format": "date-time"
              },
              "serviceName": {
                "type": "string",
                "nullable": true
              },
              "fileVersion": {
                "type": "string",
                "nullable": true
              },
              "productVersion": {
                "type": "string",
                "nullable": true
              },
              "release": {
                "type": "string",
                "nullable": true
              },
              "logLevel": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "AudioMetadata": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FileMetadata"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "audioStreams": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/AudioStream"
                }
              }
            }
          }
        ]
      },
      "AudioStream": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "bitRate": {
            "type": "string",
            "nullable": true
          },
          "bitRateMode": {
            "type": "string",
            "nullable": true
          },
          "channels": {
            "type": "string",
            "nullable": true
          },
          "channelPositions": {
            "type": "string",
            "nullable": true
          },
          "codec": {
            "type": "string",
            "nullable": true
          },
          "durationInSeconds": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "format": {
            "type": "string",
            "nullable": true
          },
          "language": {
            "type": "string",
            "nullable": true
          },
          "resolution": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "samplingRate": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "streamSize": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          }
        }
      },
      "DocumentMetadata": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FileMetadata"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "applicationName": {
                "type": "string",
                "nullable": true
              },
              "applicationVersion": {
                "type": "string",
                "nullable": true
              },
              "author": {
                "type": "string",
                "nullable": true
              },
              "creator": {
                "type": "string",
                "nullable": true
              },
              "publisher": {
                "type": "string",
                "nullable": true
              },
              "company": {
                "type": "string",
                "nullable": true
              },
              "documentTitle": {
                "type": "string",
                "nullable": true
              },
              "characterCount": {
                "type": "integer",
                "format": "int32"
              },
              "characterCountWithSpaces": {
                "type": "integer",
                "format": "int32"
              },
              "lineCount": {
                "type": "integer",
                "format": "int32"
              },
              "pageCount": {
                "type": "integer",
                "format": "int32"
              },
              "slideCount": {
                "type": "integer",
                "format": "int32"
              },
              "paragraphCount": {
                "type": "integer",
                "format": "int32"
              },
              "revisionNumber": {
                "type": "integer",
                "format": "int32"
              },
              "titles": {
                "type": "array",
                "nullable": true,
                "items": {
                  "type": "string"
                }
              },
              "imageTitles": {
                "type": "array",
                "nullable": true,
                "items": {
                  "type": "string"
                }
              },
              "epsInfo": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/EpsMetadata"
                  }
                ]
              }
            }
          }
        ]
      },
      "EpsMetadata": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "isRasterized",
          "widthInPoints",
          "heightInPoints"
        ],
        "properties": {
          "isRasterized": {
            "type": "boolean"
          },
          "widthInPoints": {
            "type": "number",
            "format": "double"
          },
          "heightInPoints": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "ImageMetadata": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FileMetadata"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "width": {
                "type": "integer",
                "format": "int32"
              },
              "height": {
                "type": "integer",
                "format": "int32"
              },
              "widthInInch": {
                "type": "number",
                "format": "double"
              },
              "heightInInch": {
                "type": "number",
                "format": "double"
              },
              "widthInCm": {
                "type": "number",
                "format": "double"
              },
              "heightInCm": {
                "type": "number",
                "format": "double"
              },
              "colorSpace": {
                "type": "string",
                "nullable": true
              },
              "colorProfile": {
                "type": "string",
                "nullable": true
              },
              "bitsPerPixel": {
                "type": "integer",
                "format": "int32"
              },
              "bitsPerChannel": {
                "type": "integer",
                "format": "int32"
              },
              "channels": {
                "type": "string",
                "nullable": true
              },
              "pixelFormat": {
                "type": "string",
                "nullable": true
              },
              "hasAlpha": {
                "type": "boolean"
              },
              "isIndexed": {
                "type": "boolean"
              },
              "isExtended": {
                "type": "boolean"
              },
              "horizontalResolution": {
                "type": "number",
                "format": "double"
              },
              "verticalResolution": {
                "type": "number",
                "format": "double"
              },
              "totalFrames": {
                "type": "integer",
                "format": "int32"
              },
              "totalUnspecifiedTiffExtraChannels": {
                "type": "integer",
                "format": "int32"
              },
              "hasExifData": {
                "type": "boolean"
              },
              "hasIptcData": {
                "type": "boolean"
              },
              "hasAdobeResourceData": {
                "type": "boolean"
              },
              "hasXmpData": {
                "type": "boolean"
              },
              "uncompressedSizeInBytes": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ]
      },
      "VideoMetadata": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FileMetadata"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "width": {
                "type": "integer",
                "format": "int32"
              },
              "height": {
                "type": "integer",
                "format": "int32"
              },
              "durationInSeconds": {
                "type": "number",
                "format": "float"
              },
              "format": {
                "type": "string",
                "nullable": true
              },
              "codec": {
                "type": "string",
                "nullable": true
              },
              "overallBitrate": {
                "type": "integer",
                "format": "int32",
                "nullable": true
              },
              "videoStreams": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/VideoStream"
                }
              },
              "audioStreams": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/AudioStream"
                }
              }
            }
          }
        ]
      },
      "VideoStream": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "durationInSeconds"
        ],
        "properties": {
          "bitRate": {
            "type": "string",
            "nullable": true
          },
          "codec": {
            "type": "string",
            "nullable": true
          },
          "displayAspectRatio": {
            "type": "string",
            "nullable": true
          },
          "durationInSeconds": {
            "type": "number",
            "format": "float"
          },
          "format": {
            "type": "string",
            "nullable": true
          },
          "frameCount": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "frameRate": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "height": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "language": {
            "type": "string",
            "nullable": true
          },
          "pixelAspectRatio": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "resolution": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "streamSize": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "width": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "rotation": {
            "type": "number",
            "format": "float",
            "nullable": true
          }
        }
      },
      "VectorMetadata": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FileMetadata"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "author": {
                "type": "string",
                "nullable": true
              },
              "creator": {
                "type": "string",
                "nullable": true
              },
              "publisher": {
                "type": "string",
                "nullable": true
              },
              "company": {
                "type": "string",
                "nullable": true
              },
              "title": {
                "type": "string",
                "nullable": true
              },
              "pageCount": {
                "type": "integer",
                "format": "int32"
              },
              "epsInfo": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/EpsMetadata"
                  }
                ]
              }
            }
          }
        ]
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "oauth2",
        "description": "Picturepark uses Bearer authentication scheme. User of the API has to specify a Bearer token in Authorization header of the request.",
        "name": "Authorization",
        "in": "header",
        "flows": {
          "password": {
            "scopes": {
              "picturepark_api": "Required to access the Picturepark API",
              "businessprocess_read": "Read business processes",
              "businessprocess_write": "Write business processes",
              "businessrule_read": "Read business rules",
              "businessrule_write": "Write business rules",
              "channel_read": "Read channels",
              "channel_write": "Write channels",
              "permission_read": "Read content permission sets and schema permission sets",
              "permission_write": "Write content permission sets and schema permission sets",
              "content_read": "Read content",
              "content_write": "Write content",
              "schema_read": "Read display values, metadata and schemas",
              "schema_write": "Write display values, metadata and schemas",
              "documenthistory_read": "Read document history",
              "identityprovider_read": "Read identity providers",
              "identityprovider_write": "Write identity providers",
              "jsonschema_read": "Read json schemas",
              "listitem_read": "Read list items",
              "listitem_write": "Write list items",
              "livestream_read": "Read live stream",
              "outputformat_read": "Read output formats",
              "outputformat_write": "Write output formats",
              "output_read": "Read outputs",
              "output_write": "Write outputs",
              "profile_read": "Read profile",
              "profile_write": "Write profile",
              "share_read": "Read shares",
              "share_write": "Write shares",
              "transfer_read": "Read transfers",
              "transfer_write": "Write transfers",
              "userrole_read": "Read user roles",
              "userrole_write": "Write user roles",
              "user_read": "Read users",
              "user_write": "Write users",
              "xmpmapping_read": "Read xmp mappings",
              "xmpmapping_write": "Write xmp mappings"
            }
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "BusinessProcess",
      "description": "Endpoints to work with business processes.\r\n\r\nA business process is created when a long running server process is started and the API endpoint does not await the processing (e.g. batch updates of content).\r\n\r\nTo wait for the business process to complete, call the operation [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion).\r\n\r\n[Code examples](https://github.com/Picturepark/Picturepark.SDK.DotNet/blob/master/src/Picturepark.SDK.V1.Tests/Clients/BusinessProcessTests.cs)\r\n"
    },
    {
      "name": "BusinessRule",
      "description": "Endpoints to work with business rules."
    },
    {
      "name": "Channel",
      "description": "Endpoints to work with channels."
    },
    {
      "name": "ContentPermissionSet",
      "description": "Endpoints to work with content permission sets.\r\n\r\n[Code examples](https://github.com/Picturepark/Picturepark.SDK.DotNet/blob/master/src/Picturepark.SDK.V1.Tests/Clients/ContentPermissionSetTests.cs)\r\n"
    },
    {
      "name": "Content",
      "description": "Endpoints to work with content.\r\n\r\nFor search / filtering: See [Search](#tag/Search)\r\n\r\n- [Code examples](https://github.com/Picturepark/Picturepark.SDK.DotNet/blob/master/src/Picturepark.SDK.V1.Tests/Clients/ContentTests.cs)\r\n- [Code examples analyzers](https://github.com/Picturepark/Picturepark.SDK.DotNet/blob/master/src/Picturepark.SDK.V1.Tests/AnalyzerTests.cs)\r\n"
    },
    {
      "name": "DisplayValue",
      "description": "Endpoint to work with display values."
    },
    {
      "name": "DocumentHistory",
      "description": "Endpoints to work with history of documents.\r\n\r\nMost entities provide a history of changes. E.g. update metadata of a content. You can see and search the history of documents.\r\n\r\nYou can use a diff [CompareWithCurrent](#operation/DocumentHistory_CompareWithCurrent) and [CompareWithVersion](#operation/DocumentHistory_CompareWithVersion) to get a json diff and see what exactly has changed.\r\n\r\n[Code examples](https://github.com/Picturepark/Picturepark.SDK.DotNet/blob/master/src/Picturepark.SDK.V1.Tests/Clients/DocumentHistoryTests.cs)\r\n"
    },
    {
      "name": "IdentityProviders",
      "description": "Endpoints to access and manipulate with identity providers.\r\n    To create identity providers, please use UI section Settings/Identity providers.\r\n"
    },
    {
      "name": "Info",
      "description": "Endpoint to get basic configuration information."
    },
    {
      "name": "JsonSchema",
      "description": "Endpoint to work with json schemas.\r\n\r\nYou are able to fetch a [Json Schema](http://json-schema.org/) from a schema in Picturepark.\r\nWith a Json schema you are able to validate your metadata before saving it.\r\n\r\nCurrently Draft 4 is supported. http://json-schema.org/specification-links.html#draft-4\r\n"
    },
    {
      "name": "ListItem",
      "description": "Endpoints to work with list items.\r\n\r\nList items have its own custom schema of type \"ListItem\". See [Schema](#tag/Schema)\r\n\r\n[Code examples](https://github.com/Picturepark/Picturepark.SDK.DotNet/blob/master/src/Picturepark.SDK.V1.Tests/Clients/ListItemTests.cs)\r\n"
    },
    {
      "name": "LiveStream",
      "description": "Endpoints to access live stream information.\r\n\r\nYou can also use [ServiceProviders](https://www.nuget.org/packages/Picturepark.SDK.V1.ServiceProvider/) to get a live stream of messages.\r\n\r\n[Code examples](https://github.com/Picturepark/Picturepark.SDK.Samples/tree/master/Picturepark.SDK.V1.Samples/Picturepark.ServiceProvider.Example)\r\n"
    },
    {
      "name": "Metadata",
      "description": "Endpoints to work with metadata items (contents and list items).\r\n\r\n[Code examples](https://github.com/Picturepark/Picturepark.SDK.DotNet/blob/master/src/Picturepark.SDK.V1.Tests/Clients/MetadataTests.cs)\r\n"
    },
    {
      "name": "OutputFormat",
      "description": "Endpoints to access and manipulate with output formats.\r\n\r\n[Code examples](https://github.com/Picturepark/Picturepark.SDK.DotNet/blob/master/src/Picturepark.SDK.V1.Tests/Clients/OutputFormatTests.cs)\r\n"
    },
    {
      "name": "Output",
      "description": "Endpoints to work with content outputs.\r\n\r\nOutputs for contents are created on the import process. There are predefined outputs for each file-based content.\r\n\r\n- Original: The original file uploaded (exists always)\r\n- Preview: A preview of the file (1600*1600px in JPEG Format for previewing, exists if preview of format is supported)\r\n- ThumbnailSmall: A small preview of the file (120*90px in JPEG Format for previewing, exists if preview of format is supported)\r\n- ThumbnailSmall: A small preview of the file (240*240px in JPEG Format for previewing, exists if preview of format is supported)\r\n- ThumbnailSmall: A small preview of the file (320*320px in JPEG Format for previewing, exists if preview of format is supported)\r\n\r\n[Code examples](https://github.com/Picturepark/Picturepark.SDK.DotNet/blob/master/src/Picturepark.SDK.V1.Tests/Clients/OutputTests.cs)\r\n"
    },
    {
      "name": "Profile",
      "description": "Endpoints to work with currently logged in user profile.\r\n\r\n[Code examples](https://github.com/Picturepark/Picturepark.SDK.DotNet/blob/master/src/Picturepark.SDK.V1.Tests/Clients/ProfileTests.cs)\r\n"
    },
    {
      "name": "SchemaPermissionSet",
      "description": "Endpoints to work with schema permission sets.\r\n\r\n[Code examples](https://github.com/Picturepark/Picturepark.SDK.DotNet/blob/master/src/Picturepark.SDK.V1.Tests/Clients/SchemaPermissionSetTests.cs)\r\n"
    },
    {
      "name": "Schema",
      "description": "Endpoints to work with schemas.\r\n\r\n[Code examples](https://github.com/Picturepark/Picturepark.SDK.DotNet/blob/master/src/Picturepark.SDK.V1.Tests/Clients/SchemaTests.cs)\r\n"
    },
    {
      "name": "SchemaTransfer",
      "description": "Endpoints to transfer schemas.\r\n\r\n[Code examples](https://github.com/Picturepark/Picturepark.SDK.DotNet/blob/master/src/Picturepark.SDK.V1.Tests/Clients/SchemaTransferTests.cs)\r\n"
    },
    {
      "name": "Share",
      "description": "Endpoints to work with shares.\r\n\r\n[Code examples](https://github.com/Picturepark/Picturepark.SDK.DotNet/blob/master/src/Picturepark.SDK.V1.Tests/Clients/ShareTests.cs)\r\n"
    },
    {
      "name": "Transfer",
      "description": "Endpoints to work with transfers.\r\n\r\nTo import a set of files into CP:\r\n\r\n1. Create transfer\r\n2. Wait for transfer creation to complete (WaitForStates \"Created\" on BusinessProcess)\r\n3. Upload files to this transfer\r\n4. Wait for transfer to be ready (WaitForCompletion on BusinessProcess)\r\n5. Import transfer using ImportTransfer or ImportTransferPartial\r\n6. Wait for import to complete (WaitForCompletion on BusinessProcess)\r\n\r\nConsult the [code examples](https://github.com/Picturepark/Picturepark.SDK.DotNet/blob/master/src/Picturepark.SDK.V1.Tests/Clients/TransferTests.cs) or the docs of the endpoints mentioned above for more details.\r\n"
    },
    {
      "name": "UserRole",
      "description": "Endpoints for user role retrieval and manipulation.\r\n\r\n[Code examples](https://github.com/Picturepark/Picturepark.SDK.DotNet/blob/master/src/Picturepark.SDK.V1.Tests/Clients/UserRoleTests.cs)\r\n"
    },
    {
      "name": "User",
      "description": "Endpoints for user retrieval and manipulation.\r\n\r\n- AuthorizationState.Reviewed: User is allowed to log in\r\n- AuthorizationState.ToBeReviewed: User cannot access Picturepark, needs to be invited or reviewed first\r\n- AuthorizationState.Invited: User did not log in since last invitation\r\n- AuthorizationState.UserTriggeredDeactivation: User requested deactivation of account\r\n\r\n[Code examples](https://github.com/Picturepark/Picturepark.SDK.DotNet/blob/master/src/Picturepark.SDK.V1.Tests/Clients/UserTests.cs)\r\n"
    },
    {
      "name": "XmpMapping",
      "description": "Endpoints to work with XMP mappings."
    }
  ]
}