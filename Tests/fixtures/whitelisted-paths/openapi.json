{
  "openapi" : "3.0.0",
  "info" : {
    "description" : "API Reference â€” Labs v1",
    "version" : "1.10",
    "title" : "Tweets and Users",
    "termsOfService" : "https://developer.twitter.com/en/developer-terms/agreement-and-policy.html",
    "contact" : {
      "name" : "Twitter Developers",
      "url" : "https://developer.twitter.com/"
    },
    "license" : {
      "name" : "Twitter Developer Agreement and Policy",
      "url" : "https://developer.twitter.com/en/developer-terms/agreement-and-policy.html"
    }
  },
  "servers" : [ {
    "description" : "Twitter API",
    "url" : "https://api.twitter.com"
  } ],
  "tags" : [ {
    "name" : "General",
    "description" : "Miscellaneous endpoints for general API functionality",
    "externalDocs" : {
      "description" : "Find out more",
      "url" : "https://developer.twitter.com/en/docs/labs"
    }
  }, {
    "name" : "Rules",
    "description" : "APIs related to Rules For Tweet APIs",
    "externalDocs" : {
      "description" : "Find out more",
      "url" : "https://developer.twitter.com/en/docs/labs/filtered-stream/api-reference"
    }
  }, {
    "name" : "Search",
    "description" : "APIs related to Recent Search",
    "externalDocs" : {
      "description" : "Find out more",
      "url" : "https://developer.twitter.com/en/docs/labs/recent-search/overview"
    }
  }, {
    "name" : "Tweets",
    "description" : "APIs related to Tweets",
    "externalDocs" : {
      "description" : "Find out more",
      "url" : "https://developer.twitter.com/en/docs/labs/tweets-and-users/overview"
    }
  }, {
    "name" : "Users",
    "description" : "APIs related to Users",
    "externalDocs" : {
      "description" : "Find out more",
      "url" : "https://developer.twitter.com/en/docs/labs/tweets-and-users/overview"
    }
  } ],
  "paths" : {
    "/labs/1/users" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "Return details for the specified users",
        "description" : "This endpoint returns information about users. You can specify users by their ID or screen name, or by a combination of the two.",
        "operationId" : "findUsersByIdOrUsername",
        "parameters" : [ {
          "name" : "ids",
          "in" : "query",
          "description" : "Required (unless using `usernames`). A list of User IDs, comma-separated. You can specify up to 100 IDs.",
          "required" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UserID"
            },
            "minItems" : 1,
            "maxItems" : 100
          },
          "style" : "form",
          "explode" : false
        }, {
          "name" : "usernames",
          "in" : "query",
          "description" : "Required (unless using `ids`). A list of Twitter handles, comma-separated. You can specify up to 100 values.",
          "required" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UserName"
            },
            "minItems" : 1,
            "maxItems" : 100
          },
          "style" : "form",
          "explode" : false
        }, {
          "$ref" : "#/components/parameters/DefaultFormat"
        }, {
          "$ref" : "#/components/parameters/TweetFormat"
        }, {
          "$ref" : "#/components/parameters/UserFormat"
        }, {
          "$ref" : "#/components/parameters/PlaceFormat"
        }, {
          "name" : "expansions",
          "in" : "query",
          "style" : "form",
          "explode" : false,
          "description" : "A comma separated list of fields to expand.",
          "schema" : {
            "$ref" : "#/components/schemas/UserExpansionsParamType"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The request was successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserLookupResponse"
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/responses/HttpErrorResponse"
          }
        }
      }
    },
    "/labs/1/tweets" : {
      "get" : {
        "tags" : [ "Tweets" ],
        "summary" : "Returns hydrated Tweet objects",
        "description" : "Returns a variety of information about the Tweet specified by the requested ID",
        "operationId" : "findTweetsById",
        "parameters" : [ {
          "name" : "ids",
          "in" : "query",
          "description" : "A comma separated list of Tweet IDs. Up to 100 are allowed in a single request.",
          "required" : true,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TweetID"
            },
            "minItems" : 1,
            "maxItems" : 100
          }
        }, {
          "$ref" : "#/components/parameters/DefaultFormat"
        }, {
          "$ref" : "#/components/parameters/TweetFormat"
        }, {
          "$ref" : "#/components/parameters/UserFormat"
        }, {
          "$ref" : "#/components/parameters/PlaceFormat"
        }, {
          "name" : "expansions",
          "in" : "query",
          "style" : "form",
          "explode" : false,
          "description" : "A comma separated list of fields to expand.",
          "schema" : {
            "$ref" : "#/components/schemas/TweetExpansionsParamType"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The request was successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TweetLookupResponse"
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/responses/HttpErrorResponse"
          }
        }
      }
    },
    "/labs/1/tweets/{id}/hidden" : {
      "put" : {
        "tags" : [ "Tweets" ],
        "summary" : "Hides a reply to an owned conversation.",
        "description" : "Tweet ID in the path is that of the reply to hide.",
        "operationId" : "hideReplyById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the reply that you want to hide.",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/TweetID"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/HideReplyRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "A successful response. The reply has been hidden.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/HideReplyResponse"
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/responses/HttpErrorResponse"
          }
        }
      }
    },
    "/labs/1/tweets/metrics/private" : {
      "get" : {
        "tags" : [ "Tweets" ],
        "summary" : "Returns private metrics corresponding to a Tweet",
        "description" : "Returns various metrics about a Tweet, including metrics for an embedded Video if one exists",
        "operationId" : "findPrivateTweetMetricsById",
        "parameters" : [ {
          "name" : "ids",
          "in" : "query",
          "description" : "A comma separated list of Tweet IDs. Up to 50 are allowed in a single request.",
          "required" : true,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TweetID"
            },
            "minItems" : 1,
            "maxItems" : 50
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The request was successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TweetMetricsResponse"
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/responses/HttpErrorResponse"
          }
        }
      }
    },
    "/labs/1/tweets/search" : {
      "get" : {
        "tags" : [ "Search", "Tweets" ],
        "summary" : "Returns Tweets from the last 7 days that match a search query.",
        "description" : "Returns Tweets from the last 7 days that match a search query.",
        "operationId" : "tweetsRecentSearch",
        "parameters" : [ {
          "in" : "query",
          "name" : "query",
          "description" : "One query/rule/filter for matching Tweets. Up to 512 characters.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "minLength" : 1,
            "maxLength" : 512
          }
        }, {
          "in" : "query",
          "name" : "start_time",
          "description" : "YYYY-MM-DDTHH:mm:ssZ. The oldest UTC timestamp (from most recent 7 days) from which the Tweets will be provided. Timestamp is in second granularity and is inclusive (i.e. 12:00:01 includes the first second of the minute).",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "in" : "query",
          "name" : "end_time",
          "description" : "YYYY-MM-DDTHH:mm:ssZ. The newest, most recent UTC timestamp to which the Tweets will be provided. Timestamp is in second granularity and is exclusive (i.e. 12:00:01 excludes the first second of the minute).",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "in" : "query",
          "name" : "since_id",
          "description" : "Returns results with a Tweet ID greater than (that is, more recent than) the specified ID.",
          "required" : false,
          "schema" : {
            "$ref" : "#/components/schemas/TweetID"
          }
        }, {
          "in" : "query",
          "name" : "until_id",
          "description" : "Returns results with a Tweet ID less than (that is, older than) the specified ID.",
          "required" : false,
          "schema" : {
            "$ref" : "#/components/schemas/TweetID"
          }
        }, {
          "in" : "query",
          "name" : "max_results",
          "description" : "The maximum number of search results to be returned by a request.",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "minimum" : 10,
            "maximum" : 100,
            "default" : 10
          }
        }, {
          "in" : "query",
          "name" : "next_token",
          "description" : "This parameter is used to get the next 'page' of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/DefaultFormat"
        }, {
          "$ref" : "#/components/parameters/TweetFormat"
        }, {
          "$ref" : "#/components/parameters/UserFormat"
        }, {
          "$ref" : "#/components/parameters/PlaceFormat"
        }, {
          "name" : "expansions",
          "in" : "query",
          "style" : "form",
          "explode" : false,
          "description" : "A comma separated list of fields to expand.",
          "schema" : {
            "$ref" : "#/components/schemas/TweetExpansionsParamType"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Tweets recent search response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TweetSearchResponse"
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/responses/HttpErrorResponse"
          }
        }
      }
    },
    "/labs/1/tweets/stream/filter/rules" : {
      "get" : {
        "tags" : [ "Rules", "Tweets" ],
        "summary" : "Returns rules from a user's active rule set.",
        "description" : "Returns rules from a user's active rule set. Users can fetch all of their rules or a subset, specified by the provided rule ids.",
        "operationId" : "getRules",
        "parameters" : [ {
          "name" : "ids",
          "in" : "query",
          "description" : "A comma-separated list of Rule IDs.",
          "required" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RuleId"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The request was successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetRulesResponse"
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/responses/HttpErrorResponse"
          }
        }
      },
      "post" : {
        "tags" : [ "Rules", "Tweets" ],
        "summary" : "Add or delete rules from a user's active rule set.",
        "description" : "Add or delete rules from a user's active rule set. Users can provide unique, optionally tagged rules to add. Users can delete their entire rule set or a subset specified by rule ids or values.",
        "operationId" : "addOrDeleteRules",
        "parameters" : [ {
          "name" : "dry_run",
          "in" : "query",
          "description" : "Dry Run can be used with both the add and delete action, with the expected result given, but without actually taking any action in the system (meaning the end state will always be as it was when the request was submitted). This is particularly useful to validate rule changes.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "requestBody" : {
          "description" : "",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "oneOf" : [ {
                  "$ref" : "#/components/schemas/AddRulesRequest"
                }, {
                  "$ref" : "#/components/schemas/DeleteRulesRequest"
                } ]
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The request was successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "oneOf" : [ {
                    "$ref" : "#/components/schemas/AddRulesResponse"
                  }, {
                    "$ref" : "#/components/schemas/DeleteRulesResponse"
                  } ]
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/responses/HttpErrorResponse"
          }
        }
      }
    },
    "/labs/1/tweets/stream/filter" : {
      "get" : {
        "tags" : [ "Tweets" ],
        "summary" : "Streams tweets matching a user's active rule set.",
        "description" : "Streams tweets matching a user's active rule set.",
        "operationId" : "streamFilter",
        "parameters" : [ {
          "name" : "expansions",
          "in" : "query",
          "description" : "A comma-separated list of tweet expansions.",
          "required" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TweetExpansionsParamType"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The request was successful. Successful responses will return a stream of individual JSON Tweet payloads.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "description" : "A tweet or error that can be returned by the streaming tweet API",
                  "oneOf" : [ {
                    "type" : "object",
                    "description" : "The values returned with a successful streamed tweet. Includes the user provided rules that the tweet matched.",
                    "required" : [ "data", "matching_rules" ],
                    "properties" : {
                      "data" : {
                        "$ref" : "#/components/schemas/Tweet"
                      },
                      "matching_rules" : {
                        "type" : "array",
                        "description" : "The list of rules which matched the tweet",
                        "items" : {
                          "type" : "object",
                          "required" : [ "id" ],
                          "properties" : {
                            "id" : {
                              "$ref" : "#/components/schemas/RuleId"
                            },
                            "tag" : {
                              "type" : "string",
                              "description" : "The user-supplied tag assigned to the rule which matched"
                            }
                          }
                        }
                      },
                      "includes" : {
                        "$ref" : "#/components/schemas/Expansions"
                      }
                    }
                  }, {
                    "type" : "object",
                    "required" : [ "errors" ],
                    "properties" : {
                      "errors" : {
                        "type" : "array",
                        "items" : {
                          "$ref" : "#/components/schemas/Problem"
                        }
                      }
                    }
                  } ]
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/responses/HttpErrorResponse"
          }
        }
      }
    },
    "/labs/1/tweets/stream/sample" : {
      "get" : {
        "tags" : [ "Tweets" ],
        "summary" : "Streams a deterministic 1% of public tweets.",
        "description" : "Streams a deterministic 1% of public tweets.",
        "operationId" : "streamSample",
        "parameters" : [ {
          "name" : "expansions",
          "in" : "query",
          "description" : "A comma-separated list of tweet expansions.",
          "required" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TweetExpansionsParamType"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The request was successful. Successful responses will return a stream of individual JSON Tweet payloads.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "description" : "A tweet or error that can be returned by the streaming tweet API.",
                  "oneOf" : [ {
                    "$ref" : "#/components/schemas/SingleTweetLookupResponse"
                  }, {
                    "type" : "object",
                    "required" : [ "errors" ],
                    "properties" : {
                      "errors" : {
                        "type" : "array",
                        "items" : {
                          "$ref" : "#/components/schemas/Problem"
                        }
                      }
                    }
                  } ]
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/responses/HttpErrorResponse"
          }
        }
      }
    },
    "/labs/1/openapi.json" : {
      "get" : {
        "tags" : [ "General" ],
        "summary" : "Returns the open api spec document.",
        "description" : "Full open api spec in JSON format. (See https://github.com/OAI/OpenAPI-Specification/blob/master/README.md)",
        "operationId" : "getOpenApiSpec",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "The request was successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "MediaHeight" : {
        "type" : "integer",
        "minimum" : 0,
        "description" : "The height of the media in pixels"
      },
      "MediaWidth" : {
        "type" : "integer",
        "minimum" : 0,
        "description" : "The width of the media in pixels"
      },
      "HTTPStatusCode" : {
        "type" : "integer",
        "minimum" : 100,
        "maximum" : 599,
        "description" : "HTTP Status Code."
      },
      "ContextAnnotation" : {
        "type" : "object",
        "description" : "Annotation inferred from the tweet text.",
        "required" : [ "domain", "entity" ],
        "properties" : {
          "domain" : {
            "$ref" : "#/components/schemas/ContextAnnotationDomainFields"
          },
          "entity" : {
            "$ref" : "#/components/schemas/ContextAnnotationEntityFields"
          }
        }
      },
      "ContextAnnotationDomainFields" : {
        "type" : "object",
        "description" : "Represents the data for the context annotation domain.",
        "required" : [ "id" ],
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The unique id for a context annotation domain.",
            "pattern" : "^[0-9]{1,19}$"
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the context annotation domain."
          },
          "description" : {
            "type" : "string",
            "description" : "Description of the context annotation domain."
          }
        }
      },
      "ContextAnnotationEntityFields" : {
        "type" : "object",
        "description" : "Represents the data for the context annotation entity.",
        "required" : [ "id" ],
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The unique id for a context annotation entity.",
            "pattern" : "^[0-9]{1,19}$"
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the context annotation entity."
          },
          "description" : {
            "type" : "string",
            "description" : "Description of the context annotation entity."
          }
        }
      },
      "URL" : {
        "type" : "string",
        "description" : "A validly formatted URL.",
        "format" : "uri",
        "example" : "https://example.com"
      },
      "EntityIndices" : {
        "type" : "object",
        "description" : "Represent a boundary range (start and end index) for a recognized entity (for example a hashtag or a mention). `start` must be smaller than `end`.",
        "required" : [ "start", "end" ],
        "properties" : {
          "start" : {
            "type" : "integer",
            "minimum" : 0,
            "description" : "Index (zero-based) at which position this entity starts."
          },
          "end" : {
            "type" : "integer",
            "minimum" : 0,
            "description" : "Index (zero-based) at which position this entity ends."
          }
        }
      },
      "URLFields" : {
        "type" : "object",
        "description" : "Represent the portion of text recognized as a URL.",
        "required" : [ "url" ],
        "properties" : {
          "url" : {
            "$ref" : "#/components/schemas/URL"
          },
          "expanded_url" : {
            "$ref" : "#/components/schemas/URL"
          },
          "display_url" : {
            "type" : "string",
            "description" : "The URL as displayed in the Twitter client."
          },
          "status" : {
            "$ref" : "#/components/schemas/HTTPStatusCode"
          },
          "title" : {
            "type" : "string",
            "description" : "Title of the page the URL points to."
          },
          "description" : {
            "type" : "string",
            "description" : "Description of the URL landing page."
          },
          "images" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/URLImage"
            },
            "minItems" : 1
          }
        }
      },
      "UrlEntity" : {
        "description" : "Represent the portion of text recognized as a URL, and its start and end position within the text.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/EntityIndices"
        }, {
          "$ref" : "#/components/schemas/URLFields"
        } ]
      },
      "URLImage" : {
        "type" : "object",
        "description" : "Represent the information for the URL image",
        "properties" : {
          "url" : {
            "$ref" : "#/components/schemas/URL"
          },
          "height" : {
            "$ref" : "#/components/schemas/MediaHeight"
          },
          "width" : {
            "$ref" : "#/components/schemas/MediaWidth"
          }
        }
      },
      "HashtagFields" : {
        "type" : "object",
        "description" : "Represent the portion of text recognized as a Hashtag, and its start and end position within the text.",
        "required" : [ "tag" ],
        "properties" : {
          "tag" : {
            "type" : "string",
            "description" : "The text of the Hashtag"
          }
        }
      },
      "HashtagEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/EntityIndices"
        }, {
          "$ref" : "#/components/schemas/HashtagFields"
        } ]
      },
      "CashtagFields" : {
        "type" : "object",
        "description" : "Represent the portion of text recognized as a Cashtag, and its start and end position within the text.",
        "required" : [ "tag" ],
        "properties" : {
          "tag" : {
            "type" : "string"
          }
        }
      },
      "CashtagEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/EntityIndices"
        }, {
          "$ref" : "#/components/schemas/CashtagFields"
        } ]
      },
      "MentionFields" : {
        "type" : "object",
        "description" : "Represent the portion of text recognized as a User mention, and its start and end position within the text.",
        "required" : [ "username" ],
        "properties" : {
          "username" : {
            "$ref" : "#/components/schemas/UserName"
          }
        }
      },
      "MentionEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/EntityIndices"
        }, {
          "$ref" : "#/components/schemas/MentionFields"
        } ]
      },
      "FullTextEntities" : {
        "type" : "object",
        "properties" : {
          "urls" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UrlEntity"
            },
            "minItems" : 1
          },
          "hashtags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/HashtagEntity"
            },
            "minItems" : 1
          },
          "mentions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/MentionEntity"
            },
            "minItems" : 1
          },
          "cashtags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CashtagEntity"
            },
            "minItems" : 1
          },
          "annotations" : {
            "type" : "array",
            "items" : {
              "description" : "Annotation for entities based on the tweet text.",
              "allOf" : [ {
                "$ref" : "#/components/schemas/EntityIndices"
              }, {
                "type" : "object",
                "description" : "Represents the data for the annotation.",
                "properties" : {
                  "probability" : {
                    "type" : "number",
                    "format" : "double",
                    "minimum" : 0,
                    "maximum" : 1,
                    "description" : "Confidence factor for annotation type."
                  },
                  "type" : {
                    "type" : "string",
                    "description" : "Annotation type."
                  },
                  "normalized_text" : {
                    "type" : "string",
                    "description" : "Text used to determine annotation."
                  }
                }
              } ]
            },
            "minItems" : 1
          }
        }
      },
      "TweetID" : {
        "type" : "string",
        "description" : "Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.",
        "pattern" : "^[0-9]{1,19}$",
        "example" : "120897978112909812"
      },
      "UserID" : {
        "type" : "string",
        "description" : "Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.",
        "pattern" : "^[0-9]{1,19}$",
        "example" : "712089797812"
      },
      "FormatParamType" : {
        "type" : "string",
        "enum" : [ "compact", "default", "detailed" ],
        "description" : "Specifies the level of detail the response body should return. Allowed values are `default` (return most fields in the response body), `compact` (return only a minimum subset with the most important fields) and `detailed` (return all the available fields).",
        "example" : "detailed"
      },
      "TweetExpansionsParamType" : {
        "description" : "The list of fields you can expand for a [Tweet](#Tweet) object. If the field has an ID, it can be expanded into a full object.",
        "type" : "array",
        "items" : {
          "type" : "string",
          "enum" : [ "author_id", "referenced_tweets.id", "in_reply_to_user_id", "geo.place_id", "attachments.media_keys", "attachments.poll_ids", "entities.mentions.username", "referenced_tweets.id.author_id" ]
        },
        "minItems" : 1,
        "uniqueItems" : true,
        "example" : "author_id"
      },
      "UserExpansionsParamType" : {
        "description" : "The list of fields you can expand for a [User](#User) object. If the field has an ID, it can be expanded into a full object.",
        "type" : "array",
        "items" : {
          "type" : "string",
          "enum" : [ "most_recent_tweet_id", "pinned_tweet_id" ]
        },
        "minItems" : 1,
        "uniqueItems" : true,
        "example" : "most_recent_tweet_id"
      },
      "Error" : {
        "required" : [ "code", "message" ],
        "properties" : {
          "code" : {
            "type" : "integer",
            "format" : "int32"
          },
          "message" : {
            "type" : "string"
          }
        }
      },
      "Expansions" : {
        "type" : "object",
        "properties" : {
          "users" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/User"
            },
            "minItems" : 1
          },
          "tweets" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Tweet"
            },
            "minItems" : 1
          },
          "places" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Place"
            },
            "minItems" : 1
          },
          "media" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Media"
            },
            "minItems" : 1
          },
          "polls" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Poll"
            },
            "minItems" : 1
          }
        }
      },
      "Tweet" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/CompactTweet"
        }, {
          "$ref" : "#/components/schemas/DefaultTweet"
        }, {
          "$ref" : "#/components/schemas/DetailedTweet"
        } ],
        "required" : [ "format" ],
        "discriminator" : {
          "propertyName" : "format",
          "mapping" : {
            "compact" : "#/components/schemas/CompactTweet",
            "default" : "#/components/schemas/DefaultTweet",
            "detailed" : "#/components/schemas/DetailedTweet"
          }
        },
        "example" : {
          "id" : "12234",
          "created_at" : "Wed Jun 20 16:53:49 +0000 2018",
          "text" : "Some great insight into the human condition.",
          "author_id" : "712089797812",
          "format" : "compact"
        }
      },
      "CompactTweetFields" : {
        "type" : "object",
        "description" : "This is the list of fields returned when requesting a `compact` response format for a Tweet object.",
        "required" : [ "id", "created_at", "text", "author_id" ],
        "properties" : {
          "id" : {
            "$ref" : "#/components/schemas/TweetID"
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Creation time of the Tweet."
          },
          "text" : {
            "type" : "string",
            "description" : "The content of the Tweet."
          },
          "author_id" : {
            "$ref" : "#/components/schemas/UserID"
          },
          "in_reply_to_user_id" : {
            "$ref" : "#/components/schemas/UserID"
          },
          "referenced_tweets" : {
            "type" : "array",
            "description" : "A list of Tweets this Tweet refers to. For example, if the parent Tweet is a Retweet, a Quoted Tweet or a Reply, it will include the related Tweet referenced to by its parent.",
            "items" : {
              "type" : "object",
              "required" : [ "type", "id" ],
              "properties" : {
                "type" : {
                  "type" : "string",
                  "enum" : [ "retweeted", "quoted", "replied_to" ]
                },
                "id" : {
                  "$ref" : "#/components/schemas/TweetID"
                }
              }
            },
            "minItems" : 1
          },
          "attachments" : {
            "type" : "object",
            "description" : "Specifies the type of attachments (if any) present in this Tweet.",
            "properties" : {
              "media_keys" : {
                "type" : "array",
                "description" : "A list of Media Keys for each one of the media attachments (if media are attached).",
                "items" : {
                  "$ref" : "#/components/schemas/MediaKey"
                },
                "minItems" : 1
              },
              "poll_ids" : {
                "type" : "array",
                "description" : "A list of poll IDs (if polls are attached).",
                "items" : {
                  "$ref" : "#/components/schemas/PollId"
                },
                "minItems" : 1
              }
            }
          },
          "withheld" : {
            "$ref" : "#/components/schemas/TweetWithheld"
          }
        }
      },
      "DefaultTweetFields" : {
        "type" : "object",
        "description" : "This is the list of fields returned by default for a Tweet object, for example when `format` or `tweet.format` are omitted, or when they are set to `default`.",
        "properties" : {
          "geo" : {
            "type" : "object",
            "description" : "The location tagged on the Tweet, if the user provided one.",
            "properties" : {
              "coordinates" : {
                "$ref" : "#/components/schemas/Point"
              },
              "place_id" : {
                "$ref" : "#/components/schemas/PlaceId"
              }
            }
          },
          "entities" : {
            "$ref" : "#/components/schemas/FullTextEntities"
          }
        }
      },
      "DetailedTweetFields" : {
        "type" : "object",
        "description" : "This is the list of fields for a Tweet object when `format` or `tweet.format` are set to `detailed`.",
        "required" : [ "stats", "possibly_sensitive" ],
        "properties" : {
          "stats" : {
            "type" : "object",
            "description" : "Engagement metrics for the Tweet at the time of the request.",
            "required" : [ "retweet_count", "reply_count", "like_count" ],
            "properties" : {
              "retweet_count" : {
                "type" : "integer",
                "description" : "Number of times this Tweet has been Retweeted."
              },
              "reply_count" : {
                "type" : "integer",
                "description" : "Number of times this Tweet has been replied to."
              },
              "like_count" : {
                "type" : "integer",
                "description" : "Number of times this Tweet has been liked."
              },
              "quote_count" : {
                "type" : "integer",
                "description" : "Number of times this Tweet has been quoted."
              }
            }
          },
          "context_annotation" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ContextAnnotation"
            },
            "minItems" : 1
          },
          "possibly_sensitive" : {
            "type" : "boolean",
            "description" : "Indicates if this Tweet contains URLs marked as sensitive, for example content suitable for mature audiences."
          },
          "lang" : {
            "type" : "string",
            "description" : "Language of the Tweet, if detected by Twitter. Returned as a BCP47 language tag."
          },
          "source" : {
            "type" : "string",
            "description" : "The name of the app the user Tweeted from."
          }
        }
      },
      "CompactTweet" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/CompactTweetFields"
        } ],
        "properties" : {
          "format" : {
            "type" : "string",
            "pattern" : "compact"
          }
        }
      },
      "DefaultTweet" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/CompactTweetFields"
        }, {
          "$ref" : "#/components/schemas/DefaultTweetFields"
        } ],
        "properties" : {
          "format" : {
            "type" : "string",
            "pattern" : "default"
          }
        }
      },
      "DetailedTweet" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/CompactTweetFields"
        }, {
          "$ref" : "#/components/schemas/DefaultTweetFields"
        }, {
          "$ref" : "#/components/schemas/DetailedTweetFields"
        } ],
        "properties" : {
          "format" : {
            "type" : "string",
            "pattern" : "detailed"
          }
        }
      },
      "User" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/CompactUser"
        }, {
          "$ref" : "#/components/schemas/DefaultUser"
        }, {
          "$ref" : "#/components/schemas/DetailedUser"
        } ],
        "required" : [ "format" ],
        "discriminator" : {
          "propertyName" : "format",
          "mapping" : {
            "compact" : "#/components/schemas/CompactUser",
            "default" : "#/components/schemas/DefaultUser",
            "detailed" : "#/components/schemas/DetailedUser"
          }
        },
        "example" : {
          "id" : "1234",
          "created_at" : "2017-10-09T17:16:24Z",
          "name" : "Twitter API",
          "username" : "twitterapi",
          "protected" : false,
          "format" : "compact"
        }
      },
      "CompactUserFields" : {
        "type" : "object",
        "description" : "This is the list of fields returned when requesting a `compact` response format for a User object.",
        "required" : [ "id", "created_at", "name", "username", "protected", "verified" ],
        "properties" : {
          "id" : {
            "$ref" : "#/components/schemas/UserID"
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Creation time of this user."
          },
          "name" : {
            "type" : "string",
            "description" : "The friendly name of this user, as shown on their profile."
          },
          "username" : {
            "$ref" : "#/components/schemas/UserName"
          },
          "protected" : {
            "type" : "boolean",
            "description" : "Indicates if this user has chosen to protect their Tweets (in other words, if this user's Tweets are private)."
          },
          "verified" : {
            "type" : "boolean",
            "description" : "Indicate if this user is a verified Twitter User."
          },
          "withheld" : {
            "$ref" : "#/components/schemas/UserWithheld"
          },
          "profile_image_url" : {
            "type" : "string",
            "description" : "The URL to the profile image for this user.",
            "format" : "uri"
          }
        }
      },
      "DefaultUserFields" : {
        "type" : "object",
        "description" : "This is the list of fields returned by default for a User object, for example when `format` or `user.format` are omitted, or when they are set to `default`.",
        "required" : [ "url", "description" ],
        "properties" : {
          "location" : {
            "type" : "string",
            "description" : "The location specified in the user's profile, if the user provided one. As this is a freeform value, it may not indicate a valid location, but it may be fuzzily evaluated when performing searches with location queries."
          },
          "url" : {
            "type" : "string",
            "description" : "The URL specified in the user's profile."
          },
          "description" : {
            "type" : "string",
            "description" : "The text of this user's profile description (also known as bio), if the user provided one."
          },
          "entities" : {
            "type" : "object",
            "description" : "A list of metadata found in the user's profile description.",
            "properties" : {
              "url" : {
                "type" : "object",
                "description" : "Expanded details for the URL specified in the user's profile, with start and end indices.",
                "properties" : {
                  "urls" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/UrlEntity"
                    },
                    "minItems" : 1
                  }
                }
              },
              "description" : {
                "$ref" : "#/components/schemas/FullTextEntities"
              }
            }
          },
          "most_recent_tweet_id" : {
            "$ref" : "#/components/schemas/TweetID"
          },
          "pinned_tweet_id" : {
            "$ref" : "#/components/schemas/TweetID"
          }
        }
      },
      "DetailedUserFields" : {
        "type" : "object",
        "description" : "This is the list of fields for a User object when `format` or `user.format` are set to `detailed`.",
        "properties" : {
          "stats" : {
            "type" : "object",
            "description" : "A list of metrics for this user",
            "required" : [ "followers_count", "following_count", "tweet_count", "listed_count" ],
            "properties" : {
              "followers_count" : {
                "type" : "integer",
                "description" : "Number of users who are following this user."
              },
              "following_count" : {
                "type" : "integer",
                "description" : "Number of users this user is following."
              },
              "tweet_count" : {
                "type" : "integer",
                "description" : "The number of Tweets (including Retweets) posted by this user."
              },
              "listed_count" : {
                "type" : "integer",
                "description" : "The number of lists that include this user."
              }
            }
          }
        }
      },
      "CompactUser" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/CompactUserFields"
        } ],
        "properties" : {
          "format" : {
            "type" : "string",
            "pattern" : "compact"
          }
        }
      },
      "DefaultUser" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/CompactUserFields"
        }, {
          "$ref" : "#/components/schemas/DefaultUserFields"
        } ],
        "properties" : {
          "format" : {
            "type" : "string",
            "pattern" : "default"
          }
        }
      },
      "DetailedUser" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/CompactUserFields"
        }, {
          "$ref" : "#/components/schemas/DefaultUserFields"
        }, {
          "$ref" : "#/components/schemas/DetailedUserFields"
        } ],
        "properties" : {
          "format" : {
            "type" : "string",
            "pattern" : "detailed"
          }
        }
      },
      "UserName" : {
        "type" : "string",
        "description" : "The Twitter handle (screen name) of this user.",
        "pattern" : "^[A-Za-z0-9_]{1,15}$"
      },
      "UserLookupResponse" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/User"
            },
            "minItems" : 1
          },
          "includes" : {
            "type" : "object",
            "$ref" : "#/components/schemas/Expansions"
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Problem"
            },
            "minItems" : 1
          }
        }
      },
      "TweetLookupResponse" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Tweet"
            },
            "minItems" : 1
          },
          "includes" : {
            "$ref" : "#/components/schemas/Expansions"
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Problem"
            },
            "minItems" : 1
          }
        }
      },
      "SingleTweetLookupResponse" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "$ref" : "#/components/schemas/Tweet"
          },
          "includes" : {
            "$ref" : "#/components/schemas/Expansions"
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Problem"
            },
            "minItems" : 1
          }
        }
      },
      "TweetMetricsResponse" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TweetMetrics"
            },
            "minItems" : 1
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Problem"
            },
            "minItems" : 1
          }
        }
      },
      "Point" : {
        "type" : "object",
        "description" : "A [GeoJson Point](https://tools.ietf.org/html/rfc7946#section-3.1.2) geometry object.",
        "required" : [ "type", "coordinates" ],
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "Point" ]
          },
          "coordinates" : {
            "$ref" : "#/components/schemas/Position"
          }
        }
      },
      "Position" : {
        "type" : "array",
        "description" : "A [GeoJson Position](https://tools.ietf.org/html/rfc7946#section-3.1.1) in the format `[longitude,latitude]`.",
        "items" : {
          "type" : "number"
        },
        "minItems" : 2,
        "maxItems" : 2
      },
      "Geo" : {
        "type" : "object",
        "required" : [ "type", "bbox", "properties" ],
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "Feature" ]
          },
          "bbox" : {
            "type" : "array",
            "maxItems" : 4,
            "minItems" : 4,
            "items" : {
              "type" : "number",
              "format" : "double",
              "minimum" : -180,
              "maximum" : 180
            }
          },
          "geometry" : {
            "$ref" : "#/components/schemas/Point"
          },
          "properties" : {
            "type" : "object"
          }
        }
      },
      "PlaceId" : {
        "type" : "string",
        "description" : "The identifier for this place"
      },
      "Place" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/CompactPlace"
        }, {
          "$ref" : "#/components/schemas/DefaultPlace"
        }, {
          "$ref" : "#/components/schemas/DetailedPlace"
        } ],
        "required" : [ "format" ],
        "discriminator" : {
          "propertyName" : "format",
          "mapping" : {
            "compact" : "#/components/schemas/CompactPlace",
            "default" : "#/components/schemas/DefaultPlace",
            "detailed" : "#/components/schemas/DetailedPlace"
          }
        }
      },
      "PlaceType" : {
        "type" : "string",
        "enum" : [ "poi", "neighborhood", "city", "admin", "country", "unknown" ]
      },
      "Poll" : {
        "type" : "object",
        "description" : "Represent a Poll attached to a Tweet",
        "required" : [ "id", "options", "voting_status", "end_datetime" ],
        "properties" : {
          "id" : {
            "$ref" : "#/components/schemas/PollId"
          },
          "options" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PollOption"
            },
            "minItems" : 2,
            "maxItems" : 4
          },
          "voting_status" : {
            "type" : "string",
            "enum" : [ "open", "closed" ]
          },
          "end_datetime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "duration_minutes" : {
            "type" : "integer"
          }
        }
      },
      "PollId" : {
        "type" : "string",
        "description" : "Unique identifier of this poll.",
        "pattern" : "^[0-9]{1,19}$"
      },
      "PollOption" : {
        "type" : "object",
        "description" : "Describes a choice in a Poll object.",
        "required" : [ "position", "label", "votes" ],
        "properties" : {
          "position" : {
            "type" : "integer",
            "description" : "Position of this choice in the poll."
          },
          "label" : {
            "type" : "string",
            "description" : "The text of a poll choice."
          },
          "votes" : {
            "type" : "integer",
            "description" : "Number of users who voted for this choice."
          }
        }
      },
      "Media" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/Photo"
        }, {
          "$ref" : "#/components/schemas/Video"
        }, {
          "$ref" : "#/components/schemas/AnimatedGif"
        } ],
        "required" : [ "type" ],
        "discriminator" : {
          "propertyName" : "type",
          "mapping" : {
            "photo" : "#/components/schemas/Photo",
            "video" : "#/components/schemas/Video",
            "animated_gif" : "#/components/schemas/AnimatedGif"
          }
        }
      },
      "CommonMediaFields" : {
        "type" : "object",
        "description" : "This contains the list of the fields that are common to all media returned.",
        "required" : [ "media_key", "height", "width" ],
        "properties" : {
          "media_key" : {
            "$ref" : "#/components/schemas/MediaKey"
          },
          "height" : {
            "$ref" : "#/components/schemas/MediaHeight"
          },
          "width" : {
            "$ref" : "#/components/schemas/MediaWidth"
          }
        }
      },
      "Photo" : {
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/CommonMediaFields"
        } ],
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "photo" ]
          },
          "url" : {
            "type" : "string",
            "format" : "uri"
          }
        }
      },
      "Video" : {
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/CommonMediaFields"
        } ],
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "video" ]
          },
          "preview_image_url" : {
            "type" : "string",
            "format" : "uri"
          },
          "duration_ms" : {
            "type" : "integer"
          }
        }
      },
      "AnimatedGif" : {
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/CommonMediaFields"
        } ],
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "animated_gif" ]
          },
          "preview_image_url" : {
            "type" : "string",
            "format" : "uri"
          }
        }
      },
      "MediaKey" : {
        "type" : "string",
        "description" : "The Media Key identifier for this attachment.",
        "pattern" : "^([0-9]+)_([0-9]+)$"
      },
      "TweetWithheld" : {
        "type" : "object",
        "description" : "Indicates withholding details for [withheld content](https://help.twitter.com/en/rules-and-policies/tweet-withheld-by-country).",
        "required" : [ "copyright", "country_codes" ],
        "properties" : {
          "copyright" : {
            "type" : "boolean",
            "description" : "Indicates if the content is being withheld for on the basis of copyright infringement."
          },
          "country_codes" : {
            "type" : "array",
            "description" : "Provides a list of countries where this content is not available.",
            "items" : {
              "$ref" : "#/components/schemas/CountryCode"
            },
            "uniqueItems" : true,
            "minItems" : 1
          },
          "scope" : {
            "type" : "string",
            "description" : "Indicates whether the content being withheld is the `tweet` or a `user`.",
            "enum" : [ "tweet", "user" ]
          }
        }
      },
      "UserWithheld" : {
        "type" : "object",
        "description" : "Indicates withholding details for [withheld content](https://help.twitter.com/en/rules-and-policies/tweet-withheld-by-country).",
        "required" : [ "country_codes" ],
        "properties" : {
          "country_codes" : {
            "type" : "array",
            "description" : "Provides a list of countries where this content is not available.",
            "items" : {
              "$ref" : "#/components/schemas/CountryCode"
            },
            "uniqueItems" : true,
            "minItems" : 1
          },
          "scope" : {
            "type" : "string",
            "description" : "Indicates that the content being withheld is a `user`.",
            "enum" : [ "user" ]
          }
        }
      },
      "CountryCode" : {
        "type" : "string",
        "pattern" : "^[A-Z]{2}$"
      },
      "CompactPlaceFields" : {
        "type" : "object",
        "required" : [ "id", "name", "country_code" ],
        "properties" : {
          "id" : {
            "$ref" : "#/components/schemas/PlaceId"
          },
          "name" : {
            "type" : "string",
            "description" : "The human readable name of this place."
          },
          "country_code" : {
            "$ref" : "#/components/schemas/CountryCode"
          }
        }
      },
      "DefaultPlaceFields" : {
        "type" : "object",
        "required" : [ "place_type", "full_name", "country" ],
        "properties" : {
          "place_type" : {
            "$ref" : "#/components/schemas/PlaceType"
          },
          "full_name" : {
            "type" : "string"
          },
          "country" : {
            "type" : "string"
          },
          "contained_within" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PlaceId"
            },
            "minItems" : 1
          }
        }
      },
      "DetailedPlaceFields" : {
        "type" : "object",
        "properties" : {
          "geo" : {
            "$ref" : "#/components/schemas/Geo"
          }
        }
      },
      "CompactPlace" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/CompactPlaceFields"
        } ],
        "properties" : {
          "format" : {
            "type" : "string",
            "pattern" : "compact"
          }
        }
      },
      "DefaultPlace" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/CompactPlaceFields"
        }, {
          "$ref" : "#/components/schemas/DefaultPlaceFields"
        } ],
        "properties" : {
          "format" : {
            "type" : "string",
            "pattern" : "default"
          }
        }
      },
      "DetailedPlace" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/CompactPlaceFields"
        }, {
          "$ref" : "#/components/schemas/DefaultPlaceFields"
        }, {
          "$ref" : "#/components/schemas/DetailedPlaceFields"
        } ],
        "properties" : {
          "format" : {
            "type" : "string",
            "pattern" : "detailed"
          }
        }
      },
      "ProblemFields" : {
        "type" : "object",
        "required" : [ "type", "title", "detail" ],
        "properties" : {
          "type" : {
            "type" : "string",
            "format" : "uri"
          },
          "title" : {
            "type" : "string"
          },
          "detail" : {
            "type" : "string"
          }
        }
      },
      "GenericProblem" : {
        "description" : "A generic problem with no additional information beyond that provided by the HTTP status code.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/ProblemFields"
        } ],
        "required" : [ "status" ],
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "about:blank" ]
          },
          "status" : {
            "type" : "integer"
          }
        }
      },
      "InvalidRequestProblem" : {
        "description" : "A problem that indicates this request is invalid.",
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/ProblemFields"
        } ],
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "https://api.twitter.com/labs/1/problems/invalid-request" ]
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "parameters" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    }
                  }
                },
                "message" : {
                  "type" : "string"
                }
              }
            }
          }
        }
      },
      "ResourceNotFoundProblem" : {
        "description" : "A problem that indicates that a given Tweet, User, etc. does not exist.",
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/ProblemFields"
        } ],
        "required" : [ "parameter", "value", "resource_type" ],
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "https://api.twitter.com/labs/1/problems/resource-not-found" ]
          },
          "parameter" : {
            "type" : "string",
            "minLength" : 1
          },
          "value" : {
            "description" : "Value will match the schema of the field."
          },
          "resource_type" : {
            "type" : "string",
            "enum" : [ "user", "tweet" ]
          }
        }
      },
      "ResourceUnauthorizedProblem" : {
        "description" : "A problem that indicates you are not allowed to see a particular Tweet, User, etc.",
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/ProblemFields"
        } ],
        "required" : [ "resource_id", "resource_type", "section" ],
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "https://api.twitter.com/labs/1/problems/not-authorized-for-resource" ]
          },
          "resource_id" : {
            "type" : "string"
          },
          "resource_type" : {
            "type" : "string",
            "enum" : [ "tweet" ]
          },
          "section" : {
            "type" : "string",
            "enum" : [ "data", "includes" ]
          }
        }
      },
      "ClientForbiddenProblem" : {
        "description" : "A problem that indicates your client is forbidden from making this request.",
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/ProblemFields"
        } ],
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "https://api.twitter.com/labs/1/problems/client-forbidden" ]
          },
          "reason" : {
            "type" : "string",
            "enum" : [ "official-client-forbidden", "client-not-enrolled" ]
          },
          "registration_url" : {
            "type" : "string",
            "format" : "uri"
          }
        }
      },
      "DisallowedResourceProblem" : {
        "description" : "A problem that indicates that the resource requested violates the precepts of this API.",
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/ProblemFields"
        } ],
        "required" : [ "resource_id", "resource_type", "section" ],
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "https://api.twitter.com/labs/1/problems/disallowed-resource" ]
          },
          "resource_id" : {
            "type" : "string"
          },
          "resource_type" : {
            "type" : "string",
            "enum" : [ "tweet" ]
          },
          "section" : {
            "type" : "string",
            "enum" : [ "data", "includes" ]
          }
        }
      },
      "UnsupportedAuthenticationProblem" : {
        "description" : "A problem that indicates that the authentication used is not supported.",
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/ProblemFields"
        } ],
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "https://api.twitter.com/labs/1/problems/unsupported-authentication" ]
          }
        }
      },
      "UsageCapExceededProblem" : {
        "description" : "A problem that indicates that a usage cap has been exceeded.",
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/ProblemFields"
        } ],
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "https://api.twitter.com/labs/1/problems/usage-capped" ]
          },
          "period" : {
            "type" : "string",
            "enum" : [ "Daily", "Monthly" ]
          },
          "scope" : {
            "type" : "string",
            "enum" : [ "Account", "Product" ]
          }
        }
      },
      "ConnectionExceptionProblem" : {
        "description" : "A problem that indicates something is wrong with the connection",
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/ProblemFields"
        } ],
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "https://api.twitter.com/labs/1/problems/streaming-connection" ]
          },
          "connection_issue" : {
            "type" : "string",
            "enum" : [ "TooManyConnections", "ProvisioningSubscription" ]
          }
        }
      },
      "ClientDisconnectedProblem" : {
        "description" : "Your client has gone away.",
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/ProblemFields"
        } ],
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "https://api.twitter.com/labs/1/problems/client-disconnected" ]
          }
        }
      },
      "OperationalDisconnectProblem" : {
        "description" : "You have been disconnected for operational reasons.",
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/ProblemFields"
        } ],
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "https://api.twitter.com/labs/1/problems/operational-disconnect" ]
          },
          "disconnect_type" : {
            "type" : "string",
            "enum" : [ "OperationalDisconnect", "UpstreamOperationalDisconnect", "ForceDisconnect", "UpstreamUncleanDisconnect", "SlowReader", "InternalError", "PackageUpgraded", "PackageDowngraded", "ClientApplicationStateDegraded" ]
          }
        }
      },
      "RulesCapProblem" : {
        "description" : "You have exceeded the maximum number of rules.",
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/ProblemFields"
        } ],
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "https://api.twitter.com/labs/1/problems/rule-cap" ]
          }
        }
      },
      "InvalidRuleProblem" : {
        "description" : "The rule you have submitted is invalid.",
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/ProblemFields"
        } ],
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "https://api.twitter.com/labs/1/problems/invalid-rules" ]
          },
          "title" : {
            "type" : "string",
            "enum" : [ "UnprocessableEntity", "DuplicateRule" ]
          }
        }
      },
      "Problem" : {
        "description" : "An HTTP Problem Details object, as defined in IETF RFC 7807 (https://tools.ietf.org/html/rfc7807).",
        "oneOf" : [ {
          "$ref" : "#/components/schemas/GenericProblem"
        }, {
          "$ref" : "#/components/schemas/InvalidRequestProblem"
        }, {
          "$ref" : "#/components/schemas/ClientForbiddenProblem"
        }, {
          "$ref" : "#/components/schemas/ResourceNotFoundProblem"
        }, {
          "$ref" : "#/components/schemas/ResourceUnauthorizedProblem"
        }, {
          "$ref" : "#/components/schemas/DisallowedResourceProblem"
        }, {
          "$ref" : "#/components/schemas/UnsupportedAuthenticationProblem"
        }, {
          "$ref" : "#/components/schemas/UsageCapExceededProblem"
        }, {
          "$ref" : "#/components/schemas/ConnectionExceptionProblem"
        }, {
          "$ref" : "#/components/schemas/ClientDisconnectedProblem"
        }, {
          "$ref" : "#/components/schemas/OperationalDisconnectProblem"
        }, {
          "$ref" : "#/components/schemas/RulesCapProblem"
        }, {
          "$ref" : "#/components/schemas/InvalidRuleProblem"
        } ],
        "discriminator" : {
          "propertyName" : "type",
          "mapping" : {
            "about:blank" : "#/components/schemas/GenericProblem",
            "https://api.twitter.com/labs/1/problems/invalid-request" : "#/components/schemas/InvalidRequestProblem",
            "https://api.twitter.com/labs/1/problems/client-forbidden" : "#/components/schemas/ClientForbiddenProblem",
            "https://api.twitter.com/labs/1/problems/resource-not-found" : "#/components/schemas/ResourceNotFoundProblem",
            "https://api.twitter.com/labs/1/problems/not-authorized-for-resource" : "#/components/schemas/ResourceUnauthorizedProblem",
            "https://api.twitter.com/labs/1/problems/disallowed-resource" : "#/components/schemas/DisallowedResourceProblem",
            "https://api.twitter.com/labs/1/problems/unsupported-authentication" : "#/components/schemas/UnsupportedAuthenticationProblem",
            "https://api.twitter.com/labs/1/problems/usage-capped" : "#/components/schemas/UsageCapExceededProblem",
            "https://api.twitter.com/labs/1/problems/streaming-connection" : "#/components/schemas/ConnectionExceptionProblem",
            "https://api.twitter.com/labs/1/problems/client-disconnected" : "#/components/schemas/ClientDisconnectedProblem",
            "https://api.twitter.com/labs/1/problems/operational-disconnect" : "#/components/schemas/OperationalDisconnectProblem",
            "https://api.twitter.com/labs/1/problems/rule-cap" : "#/components/schemas/RulesCapProblem",
            "https://api.twitter.com/labs/1/problems/invalid-rules" : "#/components/schemas/InvalidRuleProblem"
          }
        }
      },
      "TweetMetrics" : {
        "type" : "object",
        "description" : "Metrics for a Tweet.",
        "required" : [ "tweet_id", "tweet" ],
        "properties" : {
          "tweet_id" : {
            "$ref" : "#/components/schemas/TweetID"
          },
          "tweet" : {
            "$ref" : "#/components/schemas/TweetInteractionMetrics"
          },
          "video" : {
            "$ref" : "#/components/schemas/VideoMetrics"
          }
        }
      },
      "TweetInteractionMetrics" : {
        "type" : "object",
        "description" : "Interaction metrics for a Tweet.",
        "required" : [ "like_count", "retweet_count", "quote_count", "reply_count" ],
        "properties" : {
          "like_count" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Number of times this Tweet has been liked."
          },
          "retweet_count" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Number of times this Tweet has been Retweeted."
          },
          "quote_count" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Number of times this Tweet has been quoted."
          },
          "reply_count" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Number of times this Tweet has been replied to."
          },
          "impression_count" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Number of times this Tweet has been viewed."
          }
        },
        "example" : {
          "like_count" : 1,
          "retweet_count" : 2,
          "quote_count" : 3,
          "reply_count" : 4,
          "impression_count" : 100
        }
      },
      "VideoMetrics" : {
        "type" : "object",
        "description" : "Metrics corresponding to a Video.",
        "required" : [ "media_key", "view_count" ],
        "properties" : {
          "media_key" : {
            "$ref" : "#/components/schemas/MediaKey"
          },
          "view_count" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Number of times this video has been viewed."
          },
          "playback_0_count" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Number of users who made it through 0% of the video."
          },
          "playback_25_count" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Number of users who made it through 25% of the video."
          },
          "playback_50_count" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Number of users who made it through 50% of the video."
          },
          "playback_75_count" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Number of users who made it through 75% of the video."
          },
          "playback_100_count" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Number of users who made it through 100% of the video."
          }
        }
      },
      "RuleId" : {
        "type" : "string",
        "description" : "Unique identifier of this rule.",
        "pattern" : "^[0-9]{1,19}$",
        "example" : "120897978112909812"
      },
      "RuleTag" : {
        "type" : "string",
        "description" : "A tag meant for the labeling of user provided rules.",
        "example" : "Non-retweeted coffee tweets"
      },
      "RuleValue" : {
        "type" : "string",
        "description" : "The filterlang value of the rule.",
        "example" : "coffee -is:retweet"
      },
      "Rule" : {
        "type" : "object",
        "required" : [ "value" ],
        "properties" : {
          "value" : {
            "$ref" : "#/components/schemas/RuleValue"
          },
          "tag" : {
            "$ref" : "#/components/schemas/RuleTag"
          },
          "id" : {
            "$ref" : "#/components/schemas/RuleId"
          }
        }
      },
      "RuleNoId" : {
        "type" : "object",
        "required" : [ "value" ],
        "properties" : {
          "value" : {
            "$ref" : "#/components/schemas/RuleValue"
          },
          "tag" : {
            "$ref" : "#/components/schemas/RuleTag"
          }
        }
      },
      "GetRulesResponse" : {
        "type" : "object",
        "required" : [ "data", "meta" ],
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Rule"
            }
          },
          "meta" : {
            "$ref" : "#/components/schemas/RulesResponseMetadata"
          }
        }
      },
      "AddRulesRequest" : {
        "type" : "object",
        "required" : [ "add" ],
        "properties" : {
          "add" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RuleNoId"
            }
          }
        }
      },
      "AddRulesResponse" : {
        "type" : "object",
        "required" : [ "data", "meta" ],
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Rule"
            }
          },
          "meta" : {
            "$ref" : "#/components/schemas/RulesResponseMetadata"
          }
        }
      },
      "DeleteRulesRequest" : {
        "type" : "object",
        "properties" : {
          "ids" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RuleId"
            }
          },
          "values" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RuleValue"
            }
          }
        }
      },
      "DeleteRulesResponse" : {
        "type" : "object",
        "required" : [ "meta" ],
        "properties" : {
          "meta" : {
            "$ref" : "#/components/schemas/RulesResponseMetadata"
          }
        }
      },
      "RulesRequestSummary" : {
        "type" : "object",
        "oneOf" : [ {
          "type" : "object",
          "required" : [ "created", "not_created" ],
          "properties" : {
            "created" : {
              "type" : "integer",
              "format" : "int32"
            },
            "not_created" : {
              "type" : "integer",
              "format" : "int32"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "deleted", "not_deleted" ],
          "properties" : {
            "deleted" : {
              "type" : "integer",
              "format" : "int32"
            },
            "not_deleted" : {
              "type" : "integer",
              "format" : "int32"
            }
          }
        } ]
      },
      "RulesResponseMetadata" : {
        "type" : "object",
        "required" : [ "sent" ],
        "properties" : {
          "sent" : {
            "type" : "string"
          },
          "summary" : {
            "$ref" : "#/components/schemas/RulesRequestSummary"
          }
        }
      },
      "TweetSearchResponse" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Tweet"
            },
            "minItems" : 1
          },
          "includes" : {
            "$ref" : "#/components/schemas/Expansions"
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Problem"
            },
            "minItems" : 1
          },
          "meta" : {
            "type" : "object",
            "properties" : {
              "newest_id" : {
                "type" : "string",
                "pattern" : "^[0-9]{1,19}$",
                "description" : "Most recent Tweet Id returned by search query"
              },
              "oldest_id" : {
                "type" : "string",
                "pattern" : "^[0-9]{1,19}$",
                "description" : "Oldest Tweet Id returned by search query"
              },
              "next_token" : {
                "description" : "This value is used to get the next 'page' of results by providing it to the next_token parameter.",
                "type" : "string"
              },
              "result_count" : {
                "description" : "Number of search query results",
                "type" : "integer",
                "format" : "int32"
              }
            }
          }
        }
      },
      "HideReplyRequest" : {
        "type" : "object",
        "properties" : {
          "hidden" : {
            "type" : "boolean",
            "enum" : [ true ]
          }
        }
      },
      "HideReplyResponse" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "object",
            "properties" : {
              "hidden" : {
                "type" : "boolean",
                "enum" : [ true ]
              }
            }
          }
        }
      }
    },
    "responses" : {
      "HttpErrorResponse" : {
        "description" : "The request has failed.",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Error"
            }
          },
          "application/problem+json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Problem"
            }
          }
        }
      }
    },
    "parameters" : {
      "DefaultFormat" : {
        "name" : "format",
        "description" : "Format for all the objects returned as part of the response, including expansions.",
        "in" : "query",
        "required" : false,
        "schema" : {
          "$ref" : "#/components/schemas/FormatParamType"
        }
      },
      "UserFormat" : {
        "name" : "user.format",
        "description" : "Format for all [User](#User) objects returned in response. Can be used together with other format parameters to expand or reduce User objects only.",
        "in" : "query",
        "required" : false,
        "schema" : {
          "$ref" : "#/components/schemas/FormatParamType"
        }
      },
      "TweetFormat" : {
        "name" : "tweet.format",
        "description" : "Format for all [Tweet](#Tweet) objects returned in response. Can be used together with other format parameters to expand or reduce Tweet objects only.",
        "in" : "query",
        "required" : false,
        "schema" : {
          "$ref" : "#/components/schemas/FormatParamType"
        }
      },
      "PlaceFormat" : {
        "name" : "place.format",
        "description" : "Format for all place objects returned in response.",
        "in" : "query",
        "required" : false,
        "schema" : {
          "$ref" : "#/components/schemas/FormatParamType"
        }
      }
    }
  },
  "externalDocs" : {
    "description" : "Find out more about Swagger",
    "url" : "http://swagger.io"
  }
}