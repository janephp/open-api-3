<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Jane\OpenApi3\JsonSchema\Normalizer;

use Jane\JsonSchemaRuntime\Reference;
use Jane\JsonSchemaRuntime\Normalizer\CheckArray;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class XMLNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Jane\\OpenApi3\\JsonSchema\\Model\\XML';
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof \Jane\OpenApi3\JsonSchema\Model\XML;
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Jane\OpenApi3\JsonSchema\Model\XML();
        if (\array_key_exists('name', $data) && $data['name'] !== null) {
            $object->setName($data['name']);
            unset($data['name']);
        } elseif (\array_key_exists('name', $data) && $data['name'] === null) {
            $object->setName(null);
        }
        if (\array_key_exists('namespace', $data) && $data['namespace'] !== null) {
            $object->setNamespace($data['namespace']);
            unset($data['namespace']);
        } elseif (\array_key_exists('namespace', $data) && $data['namespace'] === null) {
            $object->setNamespace(null);
        }
        if (\array_key_exists('prefix', $data) && $data['prefix'] !== null) {
            $object->setPrefix($data['prefix']);
            unset($data['prefix']);
        } elseif (\array_key_exists('prefix', $data) && $data['prefix'] === null) {
            $object->setPrefix(null);
        }
        if (\array_key_exists('attribute', $data) && $data['attribute'] !== null) {
            $object->setAttribute($data['attribute']);
            unset($data['attribute']);
        } elseif (\array_key_exists('attribute', $data) && $data['attribute'] === null) {
            $object->setAttribute(null);
        }
        if (\array_key_exists('wrapped', $data) && $data['wrapped'] !== null) {
            $object->setWrapped($data['wrapped']);
            unset($data['wrapped']);
        } elseif (\array_key_exists('wrapped', $data) && $data['wrapped'] === null) {
            $object->setWrapped(null);
        }
        foreach ($data as $key => $value) {
            if (preg_match('/^x-/', (string) $key)) {
                $object[$key] = $value;
            }
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = [];
        if (null !== $object->getName()) {
            $data['name'] = $object->getName();
        } else {
            $data['name'] = null;
        }
        if (null !== $object->getNamespace()) {
            $data['namespace'] = $object->getNamespace();
        } else {
            $data['namespace'] = null;
        }
        if (null !== $object->getPrefix()) {
            $data['prefix'] = $object->getPrefix();
        } else {
            $data['prefix'] = null;
        }
        if (null !== $object->getAttribute()) {
            $data['attribute'] = $object->getAttribute();
        } else {
            $data['attribute'] = null;
        }
        if (null !== $object->getWrapped()) {
            $data['wrapped'] = $object->getWrapped();
        } else {
            $data['wrapped'] = null;
        }
        foreach ($object as $key => $value) {
            if (preg_match('/^x-/', (string) $key)) {
                $data[$key] = $value;
            }
        }

        return $data;
    }
}
